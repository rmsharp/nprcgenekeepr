[{"path":"https://github.com/rmsharp/nprcgenekeepr/20200415_cran-comments.html","id":"resubmission","dir":"","previous_headings":"","what":"Resubmission","title":"NA","text":"resubmission. version : Removed redundant “Implements” title Enclosed package names, software names API names single quotes DESCRIPTION file Description Added executable examples wrapped () exported functions Ensured changes user’s par() settings reset using .exit directed Ensured functions modifying user’s home filespace. using path provided tempdir() Changed name package nprcmanager nprcgenekeepr Added ability export figures Made changes allow clean build check –-cran R 4.0.0 alpha Refactored several functions Added 12 unit tests learned making examples. Added new functions improve code response user requests Corrected several spelling errors","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200415_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 3.6.3 ubuntu 14.04 (travis-ci), R 3.6.3 win-builder (devel release)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200415_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 1 note new release.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200415_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200510_cran-comments.html","id":"resubmission","dir":"","previous_headings":"","what":"Resubmission","title":"NA","text":"resubmission. version : Reduced time required unit test 12 minutes 21.6 seconds skipping test dependent stochastic creation simulated pedigrees breeding groups running system. Reduced time run examples create vignettes reducing number stochastic modeling iterations orders magnitude without reducing examples provided user-facing functions. Checking (–-cran –run-donttest) Duration: 2m 21.8s system. files Rd-tag missing take arguments. Corrected private referencing (:::) exported functions. Exported functions used examples remove private referencing (:::). Removed single quotes names, abbreviations, initialisms, , acronyms. phrase Electronic Health Records (EHR) name module within LabKey, software can use source pedigree information capitalization appropriate. words suspected misspelled (EHR, Roboin, kinships) initialism module LabKey, proper name, genetic term respectively.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200510_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 4.0.0 travis-ci R version 4.0.0 (2020-04-24) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R development (unstable) (2020-05-10 r78399) platform: travis-ci R version 4.0.0 (2020-04-24) using platform: x86_64-apple-darwin17.0 (64-bit) R-hub Fedora Linux, R-devel, clang, gfortran R-hub Ubuntu Linux 16.04 LTS, R-release, GCC winbuilder R version 3.6.3 (2020-02-29) winbuilder R development (unstable) (2020-05-08 r78391) winbuilder R version 4.0.0 (2020-04-24)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200510_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 1 note new release.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200510_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200517_cran-comments.html","id":"resubmission","dir":"","previous_headings":"","what":"Resubmission","title":"NA","text":"resubmission. version : changed capitalization Shiny description section DESCRIPTION file name type application used name package. use capitalization consistent capitalization used within documentation shiny package (?shiny, See Details section, first sentence used type tutorial.) documentation tutorials provided author RStudio capitalized everywhere except referring package. runGeneKeepr(), starts Shiny application getFocalAnimalPed(), dependent valid LabKey instance, proper configuration file, .netrc _netrc authentication file. create_wkbk() createPedTree() findLoops() countLoops() 11 examples data.R makeExamplePedigreeFile() incremented version 1.0.1 1.0.2","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200517_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 4.0.0 travis-ci R version 4.0.0 (2020-04-24) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R development (unstable) (2020-05-10 r78399) platform: travis-ci R version 4.0.0 (2020-04-24) using platform: x86_64-apple-darwin17.0 (64-bit) R-hub Fedora Linux, R-devel, clang, gfortran R-hub Ubuntu Linux 16.04 LTS, R-release, GCC winbuilder R version 3.6.3 (2020-02-29) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R development (unstable) (2020-05-15 r78473) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R version 4.0.0 (2020-04-24) using platform: x86_64-w64-mingw32 (64-bit)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200517_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 1 note new release.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20200517_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20201107_cran-comments.html","id":"resubmission","dir":"","previous_headings":"","what":"Resubmission","title":"NA","text":"resubmission. version : removed capitalization “Genetic Tools Colony Management” “Genetic Value Analysis Reports” within DESCRIPTION. removed conditional installation DT ui.R file. incremented version 1.0.2 1.0.3, updated NEWS reflect changes, updated documentation reflect version change.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20201107_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 4.0.0 travis-ci R version 4.0.0 (2020-04-24) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R development (unstable) (2020-05-26 r78576) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R version 4.0.0 (2020-04-24) using platform: x86_64-apple-darwin17.0 (64-bit) R-hub Fedora Linux, R-devel, clang, gfortran R-hub Ubuntu Linux 16.04 LTS, R-release, GCC winbuilder using R version 3.6.3 (2020-02-29) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R development (unstable) (2020-05-26 r78577) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R version 4.0.0 (2020-04-24) using platform: x86_64-w64-mingw32 (64-bit)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20201107_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 1 note new release.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20201107_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210324_cran-comments.html","id":"bug-fix-and-additional-unit-tests","dir":"","previous_headings":"","what":"Bug fix and additional unit tests","title":"NA","text":"bug fix allow shiny app run shiny 1.6 Changed use internal shiny:::%% function exported rlang::%||%. Added unit tests enhanced rigor unit tests Updated documentation (NEWS, README, tutorials) minor technical edits.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210324_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 4.0.4 travis-ci R version 4.0.2 (2020-06-22) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R development (unstable) (2021-03-19 r80100) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R version 4.0.4 (2021-02-15) using platform: x86_64-apple-darwin17.0 (64-bit) R-hub Fedora Linux, R-devel, clang, gfortran R-hub Ubuntu Linux 20.04.1 LTS, R-release, GCC R-hub Windows Server 2008 R2 SP1, R-devel, 32/64 bit winbuilder using R version 3.6.3 (2020-02-29) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R development (unstable) (2021-03-19 r80100) using platform: x86_64-w64-mingw32 (64-bit) winbuilder R version 4.0.4 (2021-02-15) using platform: x86_64-w64-mingw32 (64-bit)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210324_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 0 note test systems reading historical sections NEWS file falsely identifying old URL possibly incorrect. Please ignore note.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210324_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210330_cran-comments.html","id":"resubmission","dir":"","previous_headings":"","what":"Resubmission","title":"NA","text":"Changed http https Removed direct reference old GitLab issue tracker site entirely. tests repeated results recorded “Test environments” immediately .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210330_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"local OS X install, R 4.0.4 – 0 errors | 0 warnings | 0 note travis-ci R version 4.0.2 (2020-06-22) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R development (unstable) (2021-03-19 r80100) platform: x86_64-pc-linux-gnu (64-bit) travis-ci R version 4.0.4 (2021-02-15) using platform: x86_64-apple-darwin17.0 (64-bit) R-hub Fedora Linux, R-devel, clang, gfortran – OK R-hub Ubuntu Linux 20.04.1 LTS, R-release, GCC R-hub Windows Server 2008 R2 SP1, R-devel, 32/64 bit – OK winbuilder using R version 3.6.3 (2020-02-29) using platform: x86_64-w64-mingw32 (64-bit) – Status: OK winbuilder R development (unstable) (2021-03-27 r80128) using platform: x86_64-w64-mingw32 (64-bit) – Status: OK winbuilder R version 4.0.4 (2021-02-15) using platform: x86_64-w64-mingw32 (64-bit) – Status: OK","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210330_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 0 note test systems reading historical sections NEWS file falsely identifying old URL possibly incorrect. Please ignore note.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20210330_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20241220_cran-comments.html","id":"bug-fix-and-additional-unit-tests","dir":"","previous_headings":"","what":"Bug fix and additional unit tests","title":"NA","text":"Escaped braces roxygen2 comments prevent lost braces errors Cleaned code based lintr feedback added use lintr GitHub Actions CICD pipeline Added additional unit tests Added experimental functions simulation use Added two example deidentified pedigree data sets Added Rhub.yaml file checking Rhub.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20241220_cran-comments.html","id":"test-environments","dir":"","previous_headings":"","what":"Test environments","title":"NA","text":"winbuilder using R development (unstable) (2024-12-19 r87451 ucrt) using platform: x86_64-w64-mingw32 (64-bit) winbuilder using R version 4.4.2 (2024-10-31 ucrt) using platform: x86_64-w64-mingw32 winbuilder using R version 4.3.3 (2024-02-29 ucrt) using platform: x86_64-w64-mingw32 (64-bit) linux, macos, macos-arm64, windows, atlas, c23, clang-asan, clang16, clang17, clang18, clang19, clang20, donttest, gcc13, gcc14, intel, mkl, nold, noremap, ubuntu-clang, ubuntu-gcc12, ubuntu-next, ubuntu-release, valgrind nosuggests, rchk","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20241220_cran-comments.html","id":"r-cmd-check-results","dir":"","previous_headings":"","what":"R CMD check results","title":"NA","text":"0 errors | 0 warnings | 1 note Words identified possible misspellings DESCRIPTION: EHR, Raboin, kinships correctly spelled.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/20241220_cran-comments.html","id":"reverse-dependencies","dir":"","previous_headings":"","what":"Reverse dependencies","title":"NA","text":"currently downstream dependencies package.","code":""},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team rmsharp@.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright(c) 2017-2024 R. Mark Sharp Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GeneKeepR: A Colony Manager's Tutorial","text":"tutorial demonstrates major functions used within GeneKeepR provided nprcgenekeepr package. brief tutorial illustrates typical workflow explore possible workflows. Please provide comments, questions, bug reports GitHub issue tracker https://github.com/rmsharp/nprcgenekeepr/issues.","code":""},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"downloading-r","dir":"Articles","previous_headings":"Installation and Help","what":"Downloading R","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Go https://cran.r-project.org/mirrors.html click one links within US (ex. https://ftp.osuosl.org/pub/cran/). proceed download latest version R desired operating system. Note: may install administrative permissions computer.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"installing-genekeepr","dir":"Articles","previous_headings":"Installation and Help","what":"Installing GeneKeepR","title":"GeneKeepR: A Colony Manager's Tutorial","text":"get recent version can install GeneKeepR GitHub following code. missing packages automatically installed.","code":"install.packages(\"devtools\") devtools::install_github(file.path(\"rmsharp\", \"nprcgenekeepr\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"online-documentation","dir":"Articles","previous_headings":"","what":"Online Documentation","title":"GeneKeepR: A Colony Manager's Tutorial","text":"can find complete online documentation https://rmsharp.github.io/nprcgenekeepr/. top page three menus right Home icon: Reference, Articles, Changelog. Reference menu top page brings list documentation Data objects, Major Features Functions, Primary interactive functions exposed functions. Articles menu brings list vignettes, , except Development Plans, tutorials using package. Changelog brings copy NEWS file package, records major changes made version.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"running-shiny-application","dir":"Articles","previous_headings":"","what":"Running Shiny Application","title":"GeneKeepR: A Colony Manager's Tutorial","text":"toolset available within nprcgenekeepr can used inside standard R scripts. However, originally designed used within Shiny application can started : result opening screen tell application find pedigree using.","code":"library(nprcgenekeepr) # nolint: undesirable_function_linter runGeneKeepR()"},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"pedigree-file-structure","dir":"Articles","previous_headings":"Uploading a Pedigree File","what":"Pedigree File Structure","title":"GeneKeepR: A Colony Manager's Tutorial","text":"screen filled information formatting text Excel worksheet pedigree file.  Scrolling middle opening screen exposes table describes pedigree file instructions. ********* Scrolling bottom opening screen exposes pedigree file instructions, table describes genotype file instructions regarding use genotype file.  following example pedigree file format. Without genotypes: genotypes:","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"uploading-the-pedigree","dir":"Articles","previous_headings":"Uploading a Pedigree File","what":"Uploading the Pedigree","title":"GeneKeepR: A Colony Manager's Tutorial","text":"introductory tutorial, use Excel file containing hypothetical pedigree macaques. work gray box left top screen.  Microsoft Excel workbook single worksheet default file type; though comma (.csv), semi-colon (.txt), tab (.txt) separated value files acceptable formats. Example_Pedigree.xlsx file using CSV file created shown saved Excel format. Alternatively, may download example pedigree nprc consortium web page. Select Browse button select pedigree file file system.  important make sure minimum parent age low enough animals pedigree. example pedigree, changing 4 years 2 years age since macaques may reproduce early two years age. shown three progressive images center image demonstrating hovertext provides explanation value used.","code":"makeExamplePedigreeFile()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"upload-a-pedigree-and-testing-for-errors","dir":"Articles","previous_headings":"Uploading a Pedigree File","what":"Upload a Pedigree and Testing for Errors","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Selected Read Check Pedigree read file test see pedigree file columns needed pedigree internally consistent.  Several error types, shown , detected application.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"pedigree-browser","dir":"Articles","previous_headings":"","what":"Pedigree Browser","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Pedigree Browser tab defaults displaying 10 rows pedigree time, can choose display 10, 25, 50, 100 rows. can choose display UNKNOWN IDs rows displayed. UNKNOWN IDs (UIDs) used label unknown parents animals one known parent. program calculates additional columns based input pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"unknown-ids","dir":"Articles","previous_headings":"Pedigree Browser","what":"Unknown IDs","title":"GeneKeepR: A Colony Manager's Tutorial","text":"place red lines UNKNOWN IDs partial pedigree list clarity. UNKNOWN IDs used label unknown parents animals one known parent. (Note found near end pedigree list,) IDs meaning begin letter U following left alphanumeric string five places.  example pedigree, deselect Display Unknown IDs checkbox. number rows reduces 3,694 2,322, 1,372 UNKNOWN animals generated constructing pedigree provide sire dam placeholders animals.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"selecting-a-pedigree-subset-focal-animals","dir":"Articles","previous_headings":"Pedigree Browser","what":"Selecting a Pedigree Subset — Focal Animals","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Pedigree Browser tab displays full pedigree default allows select subset pedigree entering list animals interest (focal animals).  can enter animal IDs typing text box directly shown (FJS7RQ, H6T2FF, HEVL3L, I04JZV, S63QDN). Deselect Display Unknown IDs checkbox select Trim pedigree based focal animals checkbox. (See top right image ). Trimming pedigree based focal animals keep animals pedigree related focal animals selected. Select Update Focal Animals button tell application read list animals, trim pedigree based list, display trimmed pedigree . end 54 animals pedigree.  Also, can import list focal animals selecting Browse button Choose CSV file focal animals. file can constructed creating simple text file commas animal IDs placing individual animal IDs separate lines. Focal animals list animals used following analysis. cases, recommend using alive animals breeding population. selecting focal animals, number pedigree entrees change, population membership flag set “true” focal animals, “false” animals.  entering list focal animals, can select trim pedigree include relatives focal animals selected. reduce number members within pedigree animals required connect focal animals pedigree.  pedigree trimmed based focal animals relatives animals remaining. instance total 85 focal animals relatives. Note: focal animals relatives included pedigree original pedigree file uploaded indicates common ancestor . Otherwise, focal animals relatives sorted separate pedigrees output, separate pedigree indicated number.  can remove animals list focal animals selecting Clear Focal Animals checkbox selecting Update Focal Animals button. read empty ID list, clear box IDs, bring back trimmed away IDs.  Deselect Clear Focal Animals checkbox reselect Update Focal Animals button continuing tutorial working trimmed pedigree.","code":"fig_alt_txt <- \"Pedigree browser selecting to trim pedigree for focal animals\" fig_alt_txt <- paste0(   \"Pedigree browser showing two screens; one with focal \",   \"animals displayed and one with them cleared out of \",   \"the display box.\" )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"pedigree-age-plot","dir":"Articles","previous_headings":"","what":"Pedigree Age Plot","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Pedigree Age Plot tab displays standard pyramid plot pedigree selected Pedigree Browser tab. showing 332 living animals entire example pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"genetic-value-analysis","dir":"Articles","previous_headings":"","what":"Genetic Value Analysis","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Select Genetic Value Analysis tab enter number simulations genome uniqueness threshold desired. See Genetic Value Analysis Breeding Group Description tab breakdown calculation. recommend trying multiple numbers simulations arrive ideal number produces consistent results (.e., 1,000). Genome uniqueness values calculated using gene-drop simulation according MacCluer et al. (1986) Ballou & Lacy (1995), assigning unique alleles pedigree founders, simulating segregation throughout pedigree according Mendelian rules. Genome uniqueness measure probability animal possesses founder alleles present x animals (usually 0-3), thus rare risk lost population. range 2 100,000 simulations may selected. minimum 1,000 simulations recommended. genome uniqueness threshold value 0-3 also selected, desired. Select Begin Analysis button start gene dropping process, can monitor progress meter lower right corner display. aware systematic study pedigree structure algorithm performed extensive studies pedigrees various structures, 1000 iterations seemed provide reproducible results pedigrees. must emphasized pedigree structure expected affect precision iterations held constant.  soon calculations completed, table showing results analysis displayed 10 rows. calculations 1000 iterations gene dropping algorithm took 1 minute 38 seconds example pedigree 3,691 animals using MacBook Pro (Mid 2014), 2.8 GHz Intel Core i7 16 GB 1600 MHz DDR3 memory. can select many rows display changing values Show entries selection tool, may view results specific set animals entering IDs box . default display analysis list focal animals.  Searching table results Value Designation column can see starting row 268 values change High Value Low Value. Though shown , value Undetermined Value Designation column means animal parentage information. Infants young animals without assigned parents given “Undetermined” designation. Founders also parentage information high value definition.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"summary-statistics","dir":"Articles","previous_headings":"","what":"Summary Statistics","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Summary Statistics Plots tab used results Genetic Value Analysis tab. Definitions genome uniqueness kinship located Genetic Value Analysis Breeding Group Description tab. Additionally, definitions founder equivalents founder genome equivalents located bottom Summary Statistics Plots tab.  Export Kinship Matrix button creates CSV file row column individual genetic analysis plus first row first column containing IDs. first rows file shown .  First-Order Relationships button creates CSV file following columns defined: unnamed column row number, id, parents, offspring, siblings, total. Counts based known relationships. first rows file shown .  Export Female Founders Export Male Founders buttons creates CSV file following columns defined: unnamed column row number, id, sires, dam, sex, gen, birth, exit, age, recordStatus, population, pedNum. first rows file shown .  six plots provide histograms boxplots kinship coefficients, Z-scores kinship coefficients, genome uniqueness scores. plots may also downloaded desired. ********* plots can exported PNG file directory choose.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/ColonyManagerTutorial.html","id":"breeding-group-formation","dir":"Articles","previous_headings":"","what":"Breeding Group Formation","title":"GeneKeepR: A Colony Manager's Tutorial","text":"Selecting Breeding Group Formation tab brings forward screen shown . screen can form breeding groups using one three workflows based source animals selected Choose one group formation workflow:. must specify want construct breeding groups regard groups’ sex ratios. third three options (User specified sex ratio breeders) causes appearance field can fill sex ratio (F/M) want formed breeding groups. sex ratio algorithm form group nearly selected ratio possible given size group. Limits availability either sex restrict size groups formed.  Make Groups button appears select source animals going use. However, probably making additional selections using controls screen. common source animals high-value animals found genetic analysis. can either type number groups want form select number groups using arrows right edge Number Groups Desired field, outlined blue image .  often behavioral constraints, preexisting social groups, dictate need animals maintained together. need readily accommodated pre-seeding groups social groups. may select Optional: Seed Groups Specific Animals field decide place animals together within groups know compatible . done example using six groups differing numbers seed animals. Note selection animals minimum parent age two grouped mother.  group seed animals assigned plus additional animals added satisfying requirements imposed selected settings. indicated seed animals first group red rectangles.  Display kinship values requires Include kinship display groups checkbox selected prior group formation. group ten animals formed next run choosing include kinship selecting Make Groups button.  option select desired sex ratio allows select ratio desired. However, ratio obtained limited availability animals meet criteria set.  Selecting sex ratio 2.5 6 groups illustrated resulted 5 groups 20 ratio 14:6 (2.3) 1 group 23 ratio 16:7 (2.3). Groups can individually exported file names locations choosing. corresponding kinship matrix group can also exported.","code":"fig_alt_txt <-   paste0(\"Breeding group formation of 6 breeding groups.\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interactive Use of nprcgenekeepr","text":"tutorial demonstrates major functions used within Shiny application provided nprcgenekeepr package provides sufficient insight functions may used independently. tutorial primarily directed toward someone experience using R wants better understand Shiny application works perform actions directly supported Shiny application. Please provide comments, questions, bug reports GitHub issue tracker https://github.com/rmsharp/nprcgenekeepr/issues.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"installation-and-help","dir":"Articles","previous_headings":"","what":"Installation and Help","title":"Interactive Use of nprcgenekeepr","text":"can install nprcgenekeepr GitHub following code. missing dependencies automatically installed. can get help R console help provided (nprcgenekeepr.R) needs complete include links tutorials.","code":"install.packages(nprcgenekeepr) ## Use the following code to get the development version # install.packages(\"devtools\") # devtools::install_github(\"rmsharp/nprcgenekeepr\") ?nprcgenekeepr"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"reading-in-a-pedigree","dir":"Articles","previous_headings":"","what":"Reading in a Pedigree","title":"Interactive Use of nprcgenekeepr","text":"pedigrees can imported using either Excel worksheets text files contain pedigree information using either Excel worksheets text files contain list focal animals remainder pedigree information pulled LabKey API. tutorial use pedigree file can created using makeExamplePedigreeFile function shown . function makeExamplePedigreeFile saves file returns full path name saved file, saving variable pedigreeFile. Note: user select store file. writes ExamplePedigree.csv place select within file system. use file name provided makeExamplePedigreeFile function tell read.table file read. Note number rows read. row represents individual within pedigree. next step put information read file pedigree object. done qcStudbook function, examines file contents tests common pedigree errors. can see errors can detected qcStudbook returning empty error list getEmptyErrorLst(). showing output function call now later tutorial explore errors depth. qcStudbook can take four arguments sb, minParentAge (years), reportChanges, reportErrors. However, sb default values sb argument required. prudent ensure parents least breeding age, species specific. used minParentAge 2 years.1 qcStudbook reports error, change call adding reportErrors argument set TRUE examine returned object. presented Pedigree Errors section.","code":"library(nprcgenekeepr) pedigreeFile <- makeExamplePedigreeFile() breederPedCsv <- read.table(pedigreeFile,   sep = \",\", header = TRUE,   stringsAsFactors = FALSE )  breederPedCsv$fromCenter <- \"TRUE\" breederPedCsv$fromCenter[   suppressWarnings(sample(     which(is.na(breederPedCsv$sire) &       is.na(breederPedCsv$dam)),     round(0.8 * length(which(       is.na(breederPedCsv$sire) &         is.na(breederPedCsv$dam)     )))   )) ] <- \"FALSE\" nrow(breederPedCsv) ## [1] 3694 breederPed <- qcStudbook(breederPedCsv, minParentAge = 2L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"identifying-focal-animals","dir":"Articles","previous_headings":"","what":"Identifying Focal Animals","title":"Interactive Use of nprcgenekeepr","text":"may want focus work focal group animals. can done reading list animal IDs make focal group use list update pedigree. Alternatively can created list animal IDs based criteria selected. example, select living animals facility least one parent, following can used. [1] “327 animals vector focalAnimals.” can seen, animals least one parent left facility. indicate animals interest using setPopulation function. function simply sets column named population2 logical value TRUE row represents animal list FALSE otherwise. first line code sets population column second counts number rows value set TRUE. IDs used populate population flag can used trim pedigree contains individuals ID list ancestors individuals. trimPedigree function ability remove ancestors contribute genetic information. Uninformative founders individuals parents one individual parental information. (Currently genotypic information ignored trimPedigree). can find animals trimmed pedigree focal animals. can see 377 parents. first make sure parents getting list parents entire pedigree. demonstrate trimmed pedigree. However, animals trimmed pedigree either focal animals parents. distant ancestors show. Since trimming process supposed retain focal animals ancestors, leave exercise demonstrate least remaining animals grandparents focal animals. Hint: 490 grandparents trimmed complete pedigree. can see number rows full pedigree (3694) versus trimmed pedigree (704), trimmed pedigrees can much smaller. additional 377 animals, 182 provide genetic information others (195) genetically uninformative. shown 4 (0ZX29Q, 1QBKW9, 5PWJ0G, Y3CJ5A) living animals still colony trimmed pedigree.3 [1] “living animals pedigree trimmed pedigree 0ZX29Q, 1QBKW9, 5PWJ0G, Y3CJ5A.”","code":"focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] print(stri_c(   \"There are \", length(focalAnimals),   \" animals in the vector _focalAnimals_.\" )) breederPed[breederPed$id %in%   focalAnimals, c(\"id\", \"sire\", \"dam\", \"exit\")][1L:10L, ] ##          id   sire    dam exit ## 1669 01QRQ4 VDBGDP TH7HTY <NA> ## 1743 CLSVU6 ULV9M7 SUFWJI <NA> ## 1887 1SPLS8 U9APLW 142GKP <NA> ## 1934 5IAFMK U4YSS5 WVE6Y4 <NA> ## 2072 HLQ9SY UI3RFL VEWC1E <NA> ## 2234 XFWVVX U3MFSZ L4LM1F <NA> ## 2337 6X6BG9 ENI6HX IUF0HC <NA> ## 2377 B228Q6 UEUIRJ CBSIAA <NA> ## 2378 B2CKHA ENI6HX WBFBR5 <NA> ## 2383 BCJJKN UA379T JPVAT3 <NA> breederPed <- setPopulation(ped = breederPed, ids = focalAnimals) nrow(breederPed[breederPed$population, ]) ## [1] 327 trimmedPed <- trimPedigree(focalAnimals, breederPed) nrow(breederPed) ## [1] 3694 nrow(trimmedPed) ## [1] 704 trimmedPedInformative <- trimPedigree(focalAnimals, breederPed,   removeUninformative = TRUE ) nrow(trimmedPedInformative) ## [1] 509 nonfocalInTrimmedPed <- trimmedPed$id[!trimmedPed$id %in% focalAnimals] length(nonfocalInTrimmedPed) ## [1] 377 allFocalParents <- c(   breederPed$sire[breederPed$id %in% focalAnimals],   breederPed$dam[breederPed$id %in% focalAnimals] ) trimmedFocalParents <- c(   trimmedPed$sire[trimmedPed$id %in% focalAnimals],   trimmedPed$dam[trimmedPed$id %in% focalAnimals] ) all.equal(allFocalParents, trimmedFocalParents) # Are the IDs the same? ## [1] TRUE notFocalNotParent <-   trimmedPed$id[!trimmedPed$id %in% c(focalAnimals, allFocalParents)] length(notFocalNotParent) ## [1] 187 unknownBirth <- breederPed$id[is.na(breederPed$birth)] knownExit <- breederPed$id[!is.na(breederPed$exit)] unknownBirthKnownExit <-   breederPed$id[is.na(breederPed$birth) | !is.na(breederPed$exit)] knownPed <- breederPed[!breederPed$id %in% unknownBirthKnownExit, ] otherIds <- knownPed$id[!knownPed$id %in% trimmedPed$id[is.na(trimmedPed$exit)]] print(stri_c(   \"The living animals in the pedigree that are not in the trimmed \",   \"pedigree are \", get_and_or_list(otherIds), \".\" ))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"age-sex-pyramid-plot","dir":"Articles","previous_headings":"","what":"Age Sex Pyramid Plot","title":"Interactive Use of nprcgenekeepr","text":"can examine population structure using age-sex pyramid plot single function. limit view just focal animals living relatives. appropriate colony management addition genetic diversity seek, remain cognizant age sex distributions within colonies manage.","code":"getPyramidPlot(ped = trimmedPed[is.na(trimmedPed$exit), ]) ## 45 45 ## [1] 5.1 4.1 4.1 2.1"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"genetic-value-analysis","dir":"Articles","previous_headings":"","what":"Genetic Value Analysis","title":"Interactive Use of nprcgenekeepr","text":"genetic value analysis must carefully performed. next three commands set entire pedigree analysis. first three commands set pedigree members part population interest setting population column TRUE individuals. Note new pedigree object (ped) created. arguments reportGV optional except ped, may often want non-default values. ped Pedigree information data.frame format guIter Integer indicating number iterations gene-drop analysis. Default 5000 iterations guThresh Integer indicating threshold number animals defining unique allele. Default considers allele “unique” found 1 animal. pop Character vector animal IDs consider population interest. default NULL. byID Logical variable length 1 passed eventually used alleleFreq(), calculates count allele provided vector. byID TRUE ids provided, function count unique alleles individual (homozygous alleles counted 1). happens limit analysis trimmed pedigree? Remember trimmed pedigree still contains genetic information full pedigree focal animals. clear limiting analysis animals interest reduces effort required examine animals interest.","code":"ped <- setPopulation(breederPed, NULL) probands <- ped$id[ped$population] ped <- trimPedigree(probands, ped,   removeUninformative = FALSE,   addBackParents = FALSE ) geneticValue <- reportGV(ped,   guIter = 50L,   guThresh = 3L,   byID = TRUE,   updateProgress = NULL ) summary(geneticValue) ## The genetic value report  ## Individuals in Pedigree: 3694  ## Male Founders: 141 ## Female Founders: 122 ## Total Founders: 263  ## Founder Equivalents: 241.84  ## Founder Genome Equivalents: 164.01  ## Live Offspring: 4052  ## High Value Individuals: 2947  ## Low Value Individuals: 747 trimmedGeneticValue <- reportGV(trimmedPed,   guIter = 50L,   guThresh = 3L,   byID = TRUE,   updateProgress = NULL ) summary(trimmedGeneticValue) ## The genetic value report  ## Individuals in Pedigree: 327  ## Male Founders: 3 ## Female Founders: 17 ## Total Founders: 20  ## Founder Equivalents: 109.67  ## Founder Genome Equivalents: 47.49  ## Live Offspring: 321  ## High Value Individuals: 226  ## Low Value Individuals: 101"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"detailed-look-at-the-genetic-value-report-object","dir":"Articles","previous_headings":"Genetic Value Analysis","what":"Detailed look at the Genetic Value Report object","title":"Interactive Use of nprcgenekeepr","text":"names object within genetic value report object (trimmedGeneticValue) can listed shown next line code. report object (R dataframe) can -turn examined. report conveniently used separate object. next section code rounds numerical values converts columns characters display table first 10 lines included. start next lines code getting fresh copy genetic value report since changed numeric values characters last section print table. lines demonstrate one way extracting component objects genetic value object. informative examine distribution genetic uniqueness, mean kinship, z-scores (normalized mean kinship values). Creation boxplot genetic uniqueness values shown .  Extraction individual mean kinship values corresponding z-scores shown next code chunk. Creation boxplots mean kinship z-scores left exercise.","code":"names(trimmedGeneticValue) ##  [1] \"report\"          \"kinship\"         \"gu\"              \"fe\"              ##  [5] \"fg\"              \"maleFounders\"    \"femaleFounders\"  \"nMaleFounders\"   ##  [9] \"nFemaleFounders\" \"total\" names(trimmedGeneticValue$report) ## column names ##  [1] \"id\"              \"sex\"             \"age\"             \"birth\"           ##  [5] \"exit\"            \"population\"      \"origin\"          \"indivMeanKin\"    ##  [9] \"zScores\"         \"gu\"              \"totalOffspring\"  \"livingOffspring\" ## [13] \"value\"           \"rank\" nrow(trimmedGeneticValue$report) ## Number of rows ## [1] 327 rpt <- trimmedGeneticValue[[\"report\"]] rpt$indivMeanKin <- round(rpt$indivMeanKin, 5L) rpt$zScores <- round(rpt$zScores, 2L) rpt$gu <- round(rpt$gu, 5L) rpt <- toCharacter(rpt) names(rpt) <- headerDisplayNames(names(rpt)) knitr::kable(rpt[1L:10L, ]) # needs more work for display purposes. rpt <- trimmedGeneticValue[[\"report\"]] kmat <- trimmedGeneticValue[[\"kinship\"]] f <- trimmedGeneticValue[[\"total\"]] mf <- trimmedGeneticValue[[\"maleFounders\"]] ff <- trimmedGeneticValue[[\"femaleFounders\"]] nmf <- trimmedGeneticValue[[\"nMaleFounders\"]] nff <- trimmedGeneticValue[[\"nFemaleFounders\"]] fe <- trimmedGeneticValue[[\"fe\"]] fg <- trimmedGeneticValue[[\"fg\"]] gu <- rpt[, \"gu\"] guBox <- ggplot(data.frame(gu = gu), aes(x = \"\", y = gu)) +   geom_boxplot(     color = \"darkblue\",     fill = \"lightblue\",     notch = TRUE, #| fig.alt: >     #|   Histogram of time between eruptions for Old Faithful.     #|   It is a bimodal distribution with peaks at 50-55 and     #|   80-90 minutes.      outlier.color = \"red\",     outlier.shape = 1L   ) +   theme_classic() +   geom_jitter(width = 0.2) +   coord_flip() +   ylab(\"Score\") +   ggtitle(\"Genetic Uniqueness\") print(guBox) mk <- rpt[, \"indivMeanKin\"] zs <- rpt[, \"zScores\"]"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"breeding-group-formation","dir":"Articles","previous_headings":"","what":"Breeding Group Formation","title":"Interactive Use of nprcgenekeepr","text":"primary purpose nprcgenekeepr form breeding groups according best information regarding maintaining genetic characteristics desire realities associated animal husbandry needs. several options must consider forming groups using nprcgenekeepr, examine using code . high-value: Randomly select high-value animals genetic value analysis : Randomly select animals genetic value analysis candidates: Use candidate animals entered form groups Randomly assign animals without regard sex Use harem structure one breeding male per group Specify sex ratio 0.5 10 (F/M) Whether pre-populate (seed) groups animals choice Number groups formed Whether ignore females minimum parent age Number simulations used search optimal group makeup Whether kinship coefficients included results decisions regarding options expressed call function groupAddAssign. complete description function arguments available using code shown . descriptions function parameters extracted documentation near time tutorial prepared. candidates Character vector IDs animals available use forming groups. animals may present currentGroups included within candidates. currentGroups List character vectors IDs animals currently assigned groups. Defaults list character(0) sub-list element (one group formed) assuming groups pre-populated. kmat Numeric matrix pairwise kinship values. Rows columns named animal IDs. ped Dataframe ‘Pedigree’. contains pedigree information including IDs listed candidates. threshold Numeric value indicating minimum kinship level considered group formation. Pairwise kinship level ignored. default values 0.015625. ignore List character vectors representing sex combinations ignored. provided, vectors list specify pairwise kinship ignored certain sexes. Default ignore pairwise kinship females. minAge Integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year. iter Integer indicating number times perform random group formation process. Default value 1000 iterations. numGp Integer value indicating number groups formed list IDs. Default 1. updateProgress Function NULL. function defined, called iteration update shiny::Progress object. harem Logical variable set TRUE, formed groups single male least minAge old. sexRatio Numeric value indicating ratio females males x 0.5 20 increments 0.5. withKin Logical variable set TRUE, kinship matrix group returned along group score. Defaults return kinship matrix. maintains compatibility earlier versions. use trimmedPed pedigree code. illustration purposes going keep numbers candidates, groups, iterations fairly small. get first animal IDs use candidates selecting animals least 2 years old time pedigree sampled (01-01-2015). candidates made 184 females 96 males. parameters currentGroups, threshold, ignore, minAge, sexRatio, withKin, updateProgress allowed take default values. setting sexRatio parameter 0 ignored following call groupAddAssign function. consistent value 0 making little since breeding colony. empty seventh group bottom evidence candidate animals placed group without exceeding default value 0.015625.","code":"?groupAddAssign candidates <- trimmedPed$id[trimmedPed$birth < as.Date(\"2013-01-01\") &   !is.na(trimmedPed$birth) &   is.na(trimmedPed$exit)] table(trimmedPed$sex[trimmedPed$id %in% candidates]) ##  ##   F   M   H   U  ## 184  96   0   0"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"harems","dir":"Articles","previous_headings":"Breeding Group Formation","what":"Harems","title":"Interactive Use of nprcgenekeepr","text":"following group assignments forming harem groups. done setting harem . Setting iter 100 increase optimal composition breeding groups can identify list males group following code. easy notice male listed first within breeding group. can also see number animals sex ratios created group. Since harem groups sex ratios determined number animals individual groups. Examination table shows 184 females 156 included.","code":"haremGrp <- groupAddAssign(   kmat = trimmedGeneticValue[[\"kinship\"]],   ped = trimmedPed,   candidates = candidates,   iter = 10L,   numGp = 6L,   harem = TRUE ) haremGrp$group ## [[1]] ##  [1] \"S63QDN\" \"TQEMY6\" \"XYRDKV\" \"ZATMEE\" \"AW400C\" \"AR5U44\" \"CHK1ZX\" \"414N7M\" ##  [9] \"EZ2F8A\" \"WLMGS1\" \"MYUMMX\" \"DHNQ1W\" \"1KJ2MG\" \"KZY6PD\" \"0SGJ12\" \"CS23RV\" ## [17] \"AP1YLW\" \"38K2SR\" \"VWC5ZH\" \"GTLA8R\" \"1CIRC9\" \"YLRNIK\" \"5KWNMZ\" \"83HQBN\" ## [25] \"465ERA\" \"Y6DB6L\" \"7NE2UT\" \"EX5K0S\" \"MTCAIG\" ##  ## [[2]] ##  [1] \"CHJ9D2\" \"T3QPW5\" \"XEC0M5\" \"YFCIHJ\" \"S222R3\" \"BKWE4D\" \"S3EBGZ\" \"8JUUJ9\" ##  [9] \"72LYDE\" \"6X6BG9\" \"CRPXY7\" \"FB5L3N\" \"87AQLF\" \"QCENKM\" \"MX4J7G\" \"BCJJKN\" ## [17] \"WKY2SZ\" \"QRZK48\" \"01QRQ4\" \"SCFSBF\" \"AFZKBS\" \"WI38KZ\" \"DH9WJQ\" \"BS3RLE\" ## [25] \"Y0TCYX\" \"30J3CQ\" \"MFKT9C\" ##  ## [[3]] ##  [1] \"FX9E4X\" \"B228Q6\" \"CMMUKU\" \"7B9CA6\" \"N4NV8B\" \"MH88T6\" \"I5CI33\" \"M9PVG5\" ##  [9] \"1SSCJC\" \"WNEAS6\" \"46ZHKN\" \"967Y3D\" \"2F6J3U\" \"E5Q33K\" \"C18V6I\" \"3YJIMV\" ## [17] \"N5QBWD\" \"AIHJ8Z\" \"1CZM30\" \"DI4AHD\" \"YTJ2UL\" \"SHG3RB\" \"AZ3L0D\" \"X694YR\" ## [25] \"1FAZ0K\" \"DRXMW4\" \"D4B0RM\" \"Z904TJ\" \"0XTZQ1\" \"GCBYDW\" \"FL170P\" \"50D77I\" ##  ## [[4]] ##  [1] \"Z25D52\" \"NK802Y\" \"IH1KPA\" \"PJ72W1\" \"Q8U9LB\" \"B134XZ\" \"RJ4JPC\" \"MKY9TK\" ##  [9] \"S7IWWA\" \"QW2Z3R\" \"D9P18Y\" \"5W621W\" \"3GECJJ\" \"S056D5\" \"SH3FB7\" \"HE0SCR\" ## [17] \"H2J6UA\" \"TYEWF1\" \"WTE53B\" \"GIIEUD\" \"D33J06\" \"PU7RSG\" \"3SKITJ\" \"6F9FB8\" ## [25] \"W6MDVK\" \"J3F6PD\" \"R5AYJK\" \"Q7U139\" \"7RA57Q\" \"5EDLL7\" \"RVHVTZ\" \"WJXIH9\" ## [33] \"PVY432\" ##  ## [[5]] ##  [1] \"YDRD81\" \"G58RGY\" \"5ERY5Z\" \"1SPLS8\" \"6KWVRI\" \"321LLB\" \"K3TNHP\" \"TEACA3\" ##  [9] \"2Z4YLY\" \"FJS7RQ\" \"9MG040\" \"JLFKV8\" \"N79QXB\" \"5EDIEE\" \"13B1QL\" \"QWKFBH\" ## [17] \"QCA36T\" \"WK89I9\" \"I8ABC7\" \"LYSLPP\" \"MB6NYQ\" \"1GF3GM\" \"DKIM6U\" \"99BMJW\" ## [25] \"KX0RJ3\" \"0HYZ23\" \"QQMBT1\" \"92UG4N\" \"GAS52W\" \"DPXEQE\" \"G25E3F\" \"PYPM1W\" ## [33] \"EMV4P6\" \"TXZUKC\" \"S5H1GC\" \"1QVS67\" \"CLSVU6\" \"LVYYNY\" \"5BPBUI\" ##  ## [[6]] ##  [1] \"XY2CK7\" \"F45799\" \"NN3GDQ\" \"KEA4QG\" \"LS184H\" \"9P0DES\" \"MPIQ4N\" \"B1WVCN\" ##  [9] \"W5WIRP\" \"3DTD2N\" \"5IAFMK\" \"DCJJYS\" \"PI4VHT\" \"0X4W26\" \"FG0SFA\" \"7ZNY75\" ## [17] \"G8MCV7\" \"ZQXZYB\" \"PBAFJF\" \"ZPS15A\" \"ILVQVB\" \"ZH3YG1\" \"Q17CG3\" \"W0GUKI\" ## [25] \"F7I2ED\" \"AR17R5\" \"XFWVVX\" \"1VP3UC\" \"0IIAEN\" \"ESUIAF\" ##  ## [[7]] ## [1] NA sapply(haremGrp$group, function(ids) {   ids[ids %in% trimmedPed$id[trimmedPed$sex == \"M\"]] }) ## [[1]] ## [1] \"S63QDN\" ##  ## [[2]] ## [1] \"CHJ9D2\" ##  ## [[3]] ## [1] \"FX9E4X\" ##  ## [[4]] ## [1] \"Z25D52\" ##  ## [[5]] ## [1] \"YDRD81\" ##  ## [[6]] ## [1] \"XY2CK7\" ##  ## [[7]] ## logical(0) lines <- sapply(haremGrp$group, function(ids) {   paste0(     \"Count: \", length(ids), \" Sex Ratio: \",     round(calculateSexRatio(ids, trimmedPed), 2)   ) }) for (line in lines) print(line) ## [1] \"Count: 29 Sex Ratio: 28\" ## [1] \"Count: 27 Sex Ratio: 26\" ## [1] \"Count: 32 Sex Ratio: 31\" ## [1] \"Count: 33 Sex Ratio: 32\" ## [1] \"Count: 39 Sex Ratio: 38\" ## [1] \"Count: 30 Sex Ratio: 29\" ## [1] \"Count: 1 Sex Ratio: Inf\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"controlling-sex-ratios","dir":"Articles","previous_headings":"Breeding Group Formation","what":"Controlling Sex Ratios","title":"Interactive Use of nprcgenekeepr","text":"following group assignments forming harem groups. done setting harem . can identify list males group following code. can also see number animals sex ratios created group. Examination table shows 184 females 239 included.","code":"sexRatioGrp <- groupAddAssign(   kmat = trimmedGeneticValue[[\"kinship\"]],   ped = trimmedPed,   candidates = candidates,   iter = 10L,   numGp = 6L,   sexRatio = 9.0 ) sexRatioGrp$group ## [[1]] ##  [1] \"SHG3RB\" \"8TV4MT\" \"QRZK48\" \"D9P18Y\" \"414N7M\" \"SH3FB7\" \"0XTZQ1\" \"3YJIMV\" ##  [9] \"BKWE4D\" \"83HQBN\" \"Z904TJ\" \"6KWVRI\" \"NN3GDQ\" \"KZM9RB\" \"BS3RLE\" \"5EDIEE\" ## [17] \"KEA4QG\" \"DRXMW4\" \"87AQLF\" \"2Z4YLY\" \"0X4W26\" \"ESUIAF\" \"1CIRC9\" \"WNEAS6\" ## [25] \"HLQ9SY\" \"1SPLS8\" \"PU7RSG\" \"S7IWWA\" \"S222R3\" \"5BPBUI\" \"WLMGS1\" \"J3F6PD\" ## [33] \"MPIQ4N\" \"WJXIH9\" \"G2GYST\" ##  ## [[2]] ##  [1] \"Y6DB6L\" \"XY2CK7\" \"1KJ2MG\" \"XEC0M5\" \"DHNQ1W\" \"KZY6PD\" \"5KWNMZ\" \"B228Q6\" ##  [9] \"5EDLL7\" \"Y0TCYX\" \"CRPXY7\" \"G8MCV7\" \"GIIEUD\" \"R6HV9A\" \"W6MDVK\" \"CS23RV\" ## [17] \"1SSCJC\" \"01QRQ4\" \"MB6NYQ\" \"1CZM30\" \"WKY2SZ\" \"VWC5ZH\" \"PBAFJF\" \"Q7U139\" ## [25] \"CFD12A\" \"MYUMMX\" ##  ## [[3]] ##  [1] \"XYRDKV\" \"5XVTVH\" \"QCA36T\" \"RVHVTZ\" \"3SKITJ\" \"WK89I9\" \"FG0SFA\" \"DI4AHD\" ##  [9] \"WTE53B\" \"XFWVVX\" \"C18V6I\" \"MH88T6\" \"321LLB\" \"YHHVC7\" \"TQEMY6\" \"Q17CG3\" ## [17] \"50D77I\" \"AFZKBS\" \"3DTD2N\" \"ZATMEE\" \"30J3CQ\" \"EMV4P6\" \"DPXEQE\" \"8JUUJ9\" ## [25] \"K7900I\" ##  ## [[4]] ##  [1] \"MKY9TK\" \"2F1IV1\" \"1QVS67\" \"MTCAIG\" \"1GF3GM\" \"YFCIHJ\" \"W0GUKI\" \"465ERA\" ##  [9] \"EX5K0S\" \"6F9FB8\" \"YTJ2UL\" \"PVY432\" \"D33J06\" \"IZDV8K\" \"99BMJW\" \"AZ3L0D\" ## [17] \"R5AYJK\" \"N5QBWD\" \"NK802Y\" \"N79QXB\" \"46ZHKN\" \"WI38KZ\" \"72LYDE\" \"0HYZ23\" ## [25] \"3MMZD4\" ##  ## [[5]] ##  [1] \"DH9WJQ\" \"XL658N\" \"QQMBT1\" \"X694YR\" \"AIHJ8Z\" \"7RA57Q\" \"LVYYNY\" \"0IIAEN\" ##  [9] \"1VP3UC\" \"Q8U9LB\" \"GCBYDW\" \"MX4J7G\" \"FL170P\" \"T38W6H\" \"PI4VHT\" \"S5H1GC\" ## [17] \"5ERY5Z\" \"JLFKV8\" \"ZQXZYB\" \"13B1QL\" \"7NE2UT\" \"GTLA8R\" \"PJ72W1\" \"DKIM6U\" ## [25] \"LN1DLY\" \"EZ2F8A\" \"G25E3F\" \"KX0RJ3\" \"7ZNY75\" \"LS184H\" \"9MG040\" \"ZH3YG1\" ## [33] \"N4NV8B\" \"B134XZ\" \"Z7NBA2\" ##  ## [[6]] ##  [1] \"38K2SR\" \"B2CKHA\" \"QCENKM\" \"AP1YLW\" \"CHK1ZX\" \"YLRNIK\" \"QWKFBH\" \"D4B0RM\" ##  [9] \"GAS52W\" \"TXZUKC\" \"G58RGY\" \"967Y3D\" \"CLSVU6\" \"7D09WH\" \"1FAZ0K\" \"ILVQVB\" ## [17] \"B1WVCN\" \"RJ4JPC\" \"T3QPW5\" \"S3EBGZ\" \"AR17R5\" \"LYSLPP\" \"F7I2ED\" \"FJS7RQ\" ## [25] \"5PW7WT\" \"FB5L3N\" \"HE0SCR\" \"H2J6UA\" \"BCJJKN\" \"K3TNHP\" \"S056D5\" ##  ## [[7]] ##   [1] \"5IAFMK\" \"6X6BG9\" \"DCJJYS\" \"GDXWJ1\" \"JSAP3H\" \"TR5L57\" \"XC304E\" \"1E8KD1\" ##   [9] \"5KFB90\" \"A6A1M1\" \"AEP5EG\" \"AW400C\" \"BW10CL\" \"CHJ9D2\" \"FTVE03\" \"IH1KPA\" ##  [17] \"IRFJ09\" \"KXHGRH\" \"LMJWTN\" \"M9PVG5\" \"Q9LWGX\" \"RNQU14\" \"SCFSBF\" \"TEACA3\" ##  [25] \"TYEWF1\" \"W5WIRP\" \"ZPS15A\" \"09LFE4\" \"2F6J3U\" \"3GECJJ\" \"3QHAFI\" \"55BPSE\" ##  [33] \"7B9CA6\" \"8IG767\" \"9FRCIE\" \"ER464J\" \"FFGPS4\" \"FG6L7S\" \"NHWTJ9\" \"P7RBPI\" ##  [41] \"TBCE78\" \"YI16QD\" \"4LHK19\" \"59NYZE\" \"5IYDXN\" \"6KLWVC\" \"80F2MI\" \"A98D7P\" ##  [49] \"AZ4D19\" \"BTTHAJ\" \"CHSCFG\" \"EEGLWY\" \"FX9E4X\" \"G91ZM6\" \"I5CI33\" \"I8ABC7\" ##  [57] \"J1R2EW\" \"LDND6J\" \"MFKT9C\" \"MQT080\" \"NSIC4I\" \"PHB6TE\" \"PYPM1W\" \"QRWYQZ\" ##  [65] \"QW2Z3R\" \"RY1AZM\" \"WHQLH5\" \"WQUN84\" \"XX0GYV\" \"YP910X\" \"0SGJ12\" \"0V4SAC\" ##  [73] \"0X1RZ9\" \"3YHBC1\" \"55VDSQ\" \"5W621W\" \"653J82\" \"6MEP2C\" \"76DIT4\" \"80KACX\" ##  [81] \"92UG4N\" \"9P0DES\" \"B2YJJP\" \"CMMUKU\" \"E3JP0C\" \"E5Q33K\" \"F45799\" \"FLIZQI\" ##  [89] \"GM371F\" \"MEUZ85\" \"PA9F3J\" \"SXSVEH\" \"TJN1AD\" \"WNKKW3\" \"XZH41H\" \"YDRD81\" ##  [97] \"Z25D52\" \"ZDRSG0\" \"3P9BX6\" \"AR5U44\" \"DGZLV3\" \"S63QDN\" \"ZW2X4N\" sapply(sexRatioGrp$group, function(ids) {   ids[ids %in% trimmedPed$id[trimmedPed$sex == \"M\"]] }) ## [[1]] ## [1] \"8TV4MT\" \"KZM9RB\" \"HLQ9SY\" \"G2GYST\" ##  ## [[2]] ## [1] \"XY2CK7\" \"R6HV9A\" \"CFD12A\" ##  ## [[3]] ## [1] \"5XVTVH\" \"YHHVC7\" \"K7900I\" ##  ## [[4]] ## [1] \"2F1IV1\" \"IZDV8K\" \"3MMZD4\" ##  ## [[5]] ## [1] \"XL658N\" \"T38W6H\" \"LN1DLY\" \"Z7NBA2\" ##  ## [[6]] ## [1] \"B2CKHA\" \"7D09WH\" \"5PW7WT\" ##  ## [[7]] ##  [1] \"GDXWJ1\" \"JSAP3H\" \"TR5L57\" \"XC304E\" \"1E8KD1\" \"5KFB90\" \"A6A1M1\" \"AEP5EG\" ##  [9] \"BW10CL\" \"CHJ9D2\" \"FTVE03\" \"IRFJ09\" \"KXHGRH\" \"LMJWTN\" \"Q9LWGX\" \"RNQU14\" ## [17] \"09LFE4\" \"3QHAFI\" \"55BPSE\" \"8IG767\" \"9FRCIE\" \"ER464J\" \"FFGPS4\" \"FG6L7S\" ## [25] \"NHWTJ9\" \"P7RBPI\" \"TBCE78\" \"YI16QD\" \"4LHK19\" \"59NYZE\" \"5IYDXN\" \"6KLWVC\" ## [33] \"80F2MI\" \"A98D7P\" \"AZ4D19\" \"BTTHAJ\" \"CHSCFG\" \"EEGLWY\" \"FX9E4X\" \"G91ZM6\" ## [41] \"J1R2EW\" \"LDND6J\" \"MQT080\" \"NSIC4I\" \"PHB6TE\" \"QRWYQZ\" \"RY1AZM\" \"WHQLH5\" ## [49] \"WQUN84\" \"XX0GYV\" \"YP910X\" \"0V4SAC\" \"0X1RZ9\" \"3YHBC1\" \"55VDSQ\" \"653J82\" ## [57] \"6MEP2C\" \"76DIT4\" \"80KACX\" \"B2YJJP\" \"E3JP0C\" \"FLIZQI\" \"GM371F\" \"MEUZ85\" ## [65] \"PA9F3J\" \"SXSVEH\" \"TJN1AD\" \"WNKKW3\" \"XZH41H\" \"YDRD81\" \"Z25D52\" \"ZDRSG0\" ## [73] \"3P9BX6\" \"DGZLV3\" \"S63QDN\" \"ZW2X4N\" lines <- sapply(sexRatioGrp$group, function(ids) {   paste0(     \"Count: \", length(ids), \" Sex Ratio: \",     round(calculateSexRatio(ids, trimmedPed), 2L)   ) }) for (line in lines) print(line) ## [1] \"Count: 35 Sex Ratio: 7.75\" ## [1] \"Count: 26 Sex Ratio: 7.67\" ## [1] \"Count: 25 Sex Ratio: 7.33\" ## [1] \"Count: 25 Sex Ratio: 7.33\" ## [1] \"Count: 35 Sex Ratio: 7.75\" ## [1] \"Count: 31 Sex Ratio: 9.33\" ## [1] \"Count: 103 Sex Ratio: 0.36\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"pedigree-errors","dir":"Articles","previous_headings":"","what":"Pedigree Errors","title":"Interactive Use of nprcgenekeepr","text":"stated earlier can see types errors detected qcStudbook looking names returned getEmptyErrorLst() shown . defined . going use small imaginary pedigree listed multiple errors discuss pedigree error detection reporting. First note birth dates ego_id o4 (2006-04-13) purported sire s2 (2006-06-19). Note also purported birth date d2 birth dates offspring. Obviously dates IDs may incorrect. pedigree. (discuss column names shortly.) try convert pedigree file standardized studbook format, going get error message creation file R sessions temporary directory lists records generated errors. contents lowParentAge.csv shown . Examination ages parents reveals issues reported. can remove errors changing birth dates o4 2006-04-13 2015-09-16 d2 2015-09-16 2006-04-13. Note changes made column names original pedOne pedigree pedigree (ped) get qcStudbook. chosen limit displayed pedigree selecting ego_id’s id’s pedOne ped respectively. However, preferred method creating standardized studbook format qcStudbook examine errors found correcting proceeding. done explicitly requesting aspects inconsistent studbook format identified setting reportChanges reportErrors . discuss newly identified errors moment, however, let’s look shortening report, often interested trivial changes column names made qcStudbook cases simply choose report changes column names shown setting reportChanges . illustration, going bring back original copy pedOne see suspicious parents reported summary function. first two errors mentioned particular interest. Currently qcStudbook automatically changes sex dams F (female) sires M (male) reportErrors set .","code":"names(getEmptyErrorLst()) ## [1] \"failedDatabaseConnection\" \"missingColumns\"           ## [3] \"invalidDateRows\"          \"suspiciousParents\"        ## [5] \"femaleSires\"              \"maleDams\"                 ## [7] \"sireAndDam\"               \"duplicateIds\"             ## [9] \"changedCols\" knitr::kable(nprcgenekeepr::pedOne) pedOne <- nprcgenekeepr::pedOne # put it in the local environment ped <- qcStudbook(pedOne, minParentAge = 0.0) ## Error in qcStudbook(pedOne, minParentAge = 0): Parents with low age at birth of offspring are listed in /tmp/RtmpUQ8Cah/lowParentAge.csv. pedOne$birth_date[pedOne$ego_id == \"o4\"] <- as.Date(\"2015-09-16\") pedOne$birth_date[pedOne$ego_id == \"d2\"] <- as.Date(\"2006-04-13\") ped <- qcStudbook(pedOne, minParentAge = 0.0) ped[ped$id %in% c(\"s2\", \"d2\", \"o3\", \"o4\"), ] ##   id sire  dam sex gen      birth exit  age recordStatus ## 2 d2 <NA> <NA>   F   0 2006-04-13 <NA> 19.3     original ## 4 s2 <NA> <NA>   M   0 2006-06-19 <NA> 19.1     original ## 7 o3   s2   d2   F   1 2012-04-11 <NA> 13.3     original ## 8 o4   s2   d2   M   1 2015-09-16 <NA>  9.9     original errorList <- qcStudbook(pedOne,   minParentAge = 0.0, reportChanges = TRUE,   reportErrors = TRUE ) summary(errorList) ## Error: The animal listed as a sire and also listed as a female is: s1. ## Error: The animal listed as a dam and also listed as a male is: d1. ## Change: The column where space was removed is: si re to sire. ## Change: The columns where underscore was removed are: ego_id, dam_id, and birth_date to egoid, damid, and birthdate. ## Change: The column changed from: egoid to id. ## Change: The column changed from: damid to dam. ## Change: The column changed from: birthdate to birth. ##  ## Please check and correct the pedigree file. ## pedOne <- nprcgenekeepr::pedOne errorList <- qcStudbook(pedOne,   minParentAge = 0L, reportChanges = FALSE,   reportErrors = TRUE ) options(width = 90L) summary(errorList) ## Error: The animal listed as a sire and also listed as a female is: s1. ## Error: The animal listed as a dam and also listed as a male is: d1. ##  ## Please check and correct the pedigree file. ##   ## Animal records where parent records are suspicous because of dates. ## One or more parents appear too young at time of birth. ##   dam sire id sex      birth recordStatus exit  sireBirth   damBirth sireAge damAge ## 2  d2   s1 o2   F 2009-03-17     original <NA> 2000-07-18 2015-09-16    8.66   -6.5 ## 3  d2   s2 o3   F 2012-04-11     original <NA> 2006-06-19 2015-09-16    5.81   -3.4 ## 4  d2   s2 o4   M 2006-04-13     original <NA> 2006-06-19 2015-09-16   -0.18   -9.4"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a2interactive.html","id":"genetic-loops","dir":"Articles","previous_headings":"","what":"Genetic Loops","title":"Interactive Use of nprcgenekeepr","text":"feature supported within Shiny application fully implemented. use findLoops function run following code select pedigree input file loop . continuing use example pedigree comes software Example_Pedigree.csv. can count many loops following code. can list first 10 sets ids, sires dams loops following line code: current date time 2025-07-25 03:18:22.1868. processing time document 14 seconds..","code":"exampleTree <- createPedTree(breederPed) exampleLoops <- findLoops(exampleTree) length(exampleLoops) ## [1] 3694 nLoops <- countLoops(exampleLoops, exampleTree) sum(unlist(nLoops[nLoops > 0L])) ## [1] 258 examplePedigree[unlist(exampleLoops), c(\"id\", \"sire\", \"dam\")][1L:10L, ] ##          id   sire    dam ## 2519 V49H3Y UFI88T 9T7Y2Z ## 2572 61FUGE UDQ5WC GL88CF ## 2695 LWJ3A5 KZM9RB GCBYDW ## 2722 RNQU14 H2RDE2 DKIM6U ## 2752 L9M1DC 3PU50K WFQENR ## 2755 Q8U9LB 3PU50K CLSVU6 ## 2905 FVJ14K UXC40T L5VC2M ## 2922 531HAC UMV4BE 5DIPZN ## 2924 85ESBB UQFY9C Q2RK1E ## 2941 0VLW56 6KPKH7 MMEHXV elapsed_time <- get_elapsed_time_str(start_time) sessionInfo() ## R version 4.5.1 (2025-06-13) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## Random number generation: ##  RNG:     Mersenne-Twister  ##  Normal:  Inversion  ##  Sample:  Rounding  ##   ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices datasets  utils     methods   base      ##  ## other attached packages: ## [1] nprcgenekeepr_1.0.8 knitr_1.50          ggplot2_3.5.2       stringi_1.8.7       ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.10          generics_0.1.4       anytime_0.3.12       renv_1.1.4           ##  [5] futile.options_1.0.1 lattice_0.22-7       digest_0.6.37        magrittr_2.0.3       ##  [9] timechange_0.3.0     evaluate_1.0.4       grid_4.5.1           RColorBrewer_1.1-3   ## [13] fastmap_1.2.0        cellranger_1.1.0     jsonlite_2.0.0       Matrix_1.7-3         ## [17] sessioninfo_1.2.3    backports_1.5.0      formatR_1.14         promises_1.3.3       ## [21] httr_1.4.7           scales_1.4.0         WriteXLS_6.8.0       textshaping_1.0.1    ## [25] jquerylib_0.1.4      cli_3.6.5            shiny_1.11.1         rlang_1.1.6          ## [29] futile.logger_1.4.3  plotrix_3.8-4        withr_3.0.2          cachem_1.1.0         ## [33] yaml_2.3.10          tools_4.5.1          checkmate_2.3.2      htmlTable_2.4.3      ## [37] dplyr_1.1.4          httpuv_1.6.16        lambda.r_1.2.4       vctrs_0.6.5          ## [41] Rlabkey_3.4.3        R6_2.6.1             mime_0.13            lubridate_1.9.4      ## [45] lifecycle_1.0.4      stringr_1.5.1        fs_1.6.6             htmlwidgets_1.6.4    ## [49] ragg_1.4.0           pkgconfig_2.0.3      desc_1.4.3           pkgdown_2.1.3        ## [53] pillar_1.11.0        bslib_0.9.0          later_1.4.2          gtable_0.3.6         ## [57] data.table_1.17.8    glue_1.8.0           Rcpp_1.1.0           systemfonts_1.2.3    ## [61] xfun_0.52            tibble_3.3.0         tidyselect_1.2.1     rstudioapi_0.17.1    ## [65] farver_2.1.2         xtable_1.8-4         htmltools_0.5.8.1    labeling_0.4.3       ## [69] rmarkdown_2.29       compiler_4.5.1       readxl_1.4.5"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Genetic Management Tools Manual","text":"goal nprcgenekeepr implement Genetic Tools Colony Management. initially conceived developed Shiny web application Oregon National Primate Research Center (ONPRC) facilitate analyses perform regularly. enhanced capability Shiny application expose functions can used either interactively R scripts. work supported part NIH grants P51 RR13986 Southwest National Primate Research Center P51 OD011092 Oregon National Primate Research Center. present, application supports 5 functions: Quality control studbooks contained text files Excel workbooks pedigrees within LabKey Electronic Health Records (EHR) Creation pedigrees lists animals using LabKey EHR integration Creation display age sex pyramid plot living animals within designated pedigree Generation Genetic Value Analysis Reports Creation potential breeding groups without proscribed sex ratios defined maximum kinships. information see: Practical Approach Designing Breeding Groups Maximize Genetic Diversity Large Colony Captive Rhesus Macaques (Macaca mulatto) Vinson, ; Raboin, MJ Journal American Association Laboratory Animal Science, 2015 Nov, Vol.54(6), pp.700-707 [Peer Reviewed Journal]","code":""},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"quality-control","dir":"Articles","previous_headings":"Summary of Major Functions","what":"Quality Control","title":"Genetic Management Tools Manual","text":"Studbooks maintained breeding colonies generally contain information varying quality. quality control functions toolkit check ensure animals listed parents line entries, parents appropriate sex listed, animals listed sire dam, duplicate entries removed, pedigree generation numbers added, dates valid dates. addition, exit dates added possible consistent information departure dates death dates. Current ages animals still alive added database connection provided via configuration file user read permission LabKey server demographic data EHR (Electronic Health Record) module. See LabKey documentation. Parents ages user selected threshold identified. minimum parent age years set user used ensure parent least age birth date offspring. minimum parent age defaults 2 years. check performed animals missing birth dates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"creation-of-pedigree-from-a-list-of-potential-breeders-and-labkey","dir":"Articles","previous_headings":"Summary of Major Functions","what":"Creation of Pedigree From a List of Potential Breeders and LabKey","title":"Genetic Management Tools Manual","text":"user can enter list focal animals CSV file used create pedigree containing direct relative (ancestors descendants) via labkey.selectRows function within Rlabkey package database connection provided via configuration file user read permission LabKey server demographic data EHR (Electronic Health Record) module. Two configuration files needed use database features nprcgenekeepr LabKey. first file named _netrc Microsoft Windows operating systems .netrc otherwise, allows user authenticate LabKey LabKey API fully described LabKey documentation second file named _nprcgenekeepr_config Microsoft Windows operating systems .nprcgenekeepr_config otherwise nprcgenekeepr configuration file image example configuration file included data object can loaded viewed following lines R code R console.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"display-of-an-age-by-sex-pyramid-plot","dir":"Articles","previous_headings":"Summary of Major Functions","what":"Display of an age by sex pyramid plot","title":"Genetic Management Tools Manual","text":"Adapted https://www.thoughtco.com/age-sex-pyramids--population-pyramids-1435272 20190603. Written Matt Rosenberg. Updated May 07, 2019. important demographic characteristic population age-sex structure. Age-sex pyramids (also known population pyramids) graphically display information improve understanding make comparison easy. population pyramid sometimes distinctive pyramid-like shape displaying growing population.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"how-to-read-the-age-sex-graph","dir":"Articles","previous_headings":"Summary of Major Functions > Display of an age by sex pyramid plot","what":"How to Read the Age-Sex Graph","title":"Genetic Management Tools Manual","text":"age-sex pyramid breaks population male female genders age ranges. Usually, ’ll find left side pyramid graphing male population right side pyramid displaying female population. Along horizontal axis (x-axis) population pyramid, graph displays population either total population age percentage population age. center pyramid starts zero population extends left males right females increasing size, proportion population. Along vertical axis (y-axis), age-sex pyramids display two-year age increments, birth bottom old age top.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"genetic-value-analysis-reports","dir":"Articles","previous_headings":"Summary of Major Functions","what":"Genetic Value Analysis Reports","title":"Genetic Management Tools Manual","text":"Genetic Value Analysis ranking scheme developed ONPRC indicate relative breeding value animals colony. scheme uses mean kinship animal indicate inter-related rest current breeding colony members. Genome uniqueness used provide indication whether animal likely possess alleles risk lost colony. scheme, animals low mean kinship high genome uniqueness ranked highly.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"breeding-group-formation","dir":"Articles","previous_headings":"Summary of Major Functions","what":"Breeding Group Formation","title":"Genetic Management Tools Manual","text":"One goals breeding group formation avoid potential mating closely related animals. Since behavioral concerns housing constraints also taken account group formation process, goal provide largest number animals possible list candidates can housed together without risk consanguineous mating. end, function uses information Genetic Value Analysis search largest combinations animals can produced list candidates. default options consider sex individuals forming groups, though likely consideration user selecting candidate group members. Optionally user may select form harem groups, considers sex individuals forming groups restricts number males one per group.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Genetic Management Tools Manual","text":"can install CRAN version nprcgenekeepr R console prompt : can install development version nprcgenekeepr GitHub R console prompt : missing dependencies automatically installed.","code":"install.packages(\"devtools\") devtools::install_github(file.path(\"rmsharp\", \"nprcgenekeepr\")) install.packages(\"devtools\") devtools::install_github(file.path(\"rmsharp\", \"nprcgenekeepr\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"running-shiny-application","dir":"Articles","previous_headings":"","what":"Running Shiny Application","title":"Genetic Management Tools Manual","text":"toolset available within nprcgenekeepr can used inside standard R scripts. However, originally designed used within Shiny application can started :","code":"library(nprcgenekeepr) # nolint: undesirable_function_linter runGeneKeepR()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Genetic Management Tools Manual","text":"Input tab starting point analyses. file delimited, regular text file header row specifying columns. tab provides information allowable columns input files, columns used quality control data. Quality control studbook data occurs automatically upon file upload. Presently, columns required specifying Ego ID, Sire ID, Dam ID, Sex. remaining columns listed optional, used present uploaded file. table tab describes optional columns used. Additionally, panel left tab provides options can used upload QC process, specifying field separator used uploaded file. quality control, flag added current, living population. flag generated based information columns provided fairly specific breeding population defined ONPRC. Two options specifying population interest can toggled panel, however. Normally, breeding colony restricted Indian-origin, SPF 4 animals. two restrictions can turned setting options panel. Additionally, population interest can specified directly either input file, entered Pedigree Browser tab.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"pedigree-browser","dir":"Articles","previous_headings":"","what":"Pedigree Browser","title":"Genetic Management Tools Manual","text":"Pedigree Browser tab allows user view input data, specify population examine, output cleaned studbook trimmed pedigree. Upon uploading studbook file, data goes quality control process described Input File Format tab. cleaned version displayed tab. default, entire uploaded studbook available viewing tab. first 10 rows automatically shown, range can adjusted using input boxes top. default setting showing first 10 rows due size full ONPRC studbook: loading 32,000 animals can cause application slow. tab also contains functionality trimming pedigree. checking provided box, studbook uploaded trimmed just ancestors currently specified population. remove lineages haven’t contributed focal group. stated , tab also allow user directly specify population examine. top half tab, input box specify focal set animals. population flag can reset adding desired animal IDs box. population flag set desired group animals, analyses relative group.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"genetic-value-analysis","dir":"Articles","previous_headings":"","what":"Genetic Value Analysis","title":"Genetic Management Tools Manual","text":"Genetic Value Analysis tab provides options needed producing genetic value analysis report. specifics generating genetic value analysis report described Genetic Value Analysis Breeding Group Description tab. analysis begun, generate genetic value analysis currently-specified population pedigree. population specified, entire pedigree go analysis. can problematic, function calculating pairwise kinship matrix handle large pedigrees. kinship calculation known handle pedigree files containing 6000 individuals. , however, handle whole ONPRC rhesus studbook (~24,000 animals). exact maximum pedigree size currently known need tested. Due problems, input studbook automatically trimmed ancestors currently-specified population genetic value analysis begun. genome uniqueness threshold input box allows user specify constitutes ‘unique’ allele gene-drop simulation. algorithm description later document provides -depth explanation genome uniqueness calculation uses information. default, gene-drop simulation underlying genome uniqueness calculation considers individual unique members current population inherited allele iteration gene-drop. can adjusted using drop-box allow four animals inherited allele still consider unique. report generated, can subset view specific group animals using text input box. currently-viewed subset full report can exported file .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"summary-statistics","dir":"Articles","previous_headings":"","what":"Summary Statistics","title":"Genetic Management Tools Manual","text":"tab provides descriptions population examined genetic value analysis run. tab reports number known founders, female founders, male founders, founder equivalents, founder genome equivalents first table, single row. second table row Mean Kinship row Genome Uniqueness. row Tukey five number summary, minimum, 1st quartile, mean, median, 3rd quartile, maximum. Lastly, tab displays histograms box plots distribution mean kinship coefficients, distribution mean kinship coefficient Z-scores, Distribution genome uniqueness values.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"breeding-group-formation-1","dir":"Articles","previous_headings":"","what":"Breeding Group Formation","title":"Genetic Management Tools Manual","text":"last major function R-package aid generating breeding groups avoid inter-animal relatedness. tab allows build number breeding groups specified list candidate animals. also option build group adding animals list candidates currently-existing group. top half tab, entry boxes menus adjust options analysis. default, analysis ignore relatedness animals distant second cousin level, pairwise relatedness involving animal 1 year age, relatedness females. options can adjusted analysis run, however. desire add animals existing group, IDs candidate animals can entered first text box (just new group generated). IDs current group members can added second text box. noted cause error provided candidate animals current group member IDs part population genetic value analysis run. kinship matrix produced analysis provides pairwise kinship values used group formation functions. simulation done, first group displayed automatically. group displayed can changed drop-menu. Whichever group currently displayed can downloaded export button.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"genetic-value-analysis-and-breeding-group-formation-description","dir":"Articles","previous_headings":"","what":"Genetic Value Analysis and Breeding Group Formation Description","title":"Genetic Management Tools Manual","text":"tab contains -depth descriptions Genetic Value Analysis created, breeding groups formed program.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"orip-reporting","dir":"Articles","previous_headings":"","what":"ORIP Reporting","title":"Genetic Management Tools Manual","text":"ORIP Reporting tab eventually contain information reporting Office Research Infrastructure Programs (ORIP). tab may end merged Summary Statistics tab contain number statistics, tables histograms. Alternatively, may contain subset information Summary Statistics tab presented formatted report can exported submitted ORIP. exact information needs submitted ORIP recordkeeping still discussion.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"algorithm-breeding-group-formation","dir":"Articles","previous_headings":"","what":"Algorithm: Breeding Group Formation","title":"Genetic Management Tools Manual","text":"group formation process accomplished using algorithm determining maximal independent set (MIS). graph theory, maximal independent set largest set vertices graph two share edge. breeding group formation, vertices animals, edges kinships need considered. given group animals pairwise kinships, potentially many maximal independent sets, depending animals included excluded final group. order effectively sample set MISs, use random selection animals repeat MIS generation numerous times. allows us sample number MISs choose one best fits selection criteria. purposes, want largest group can formed set animals, none concerning relatedness . algorithm requires several pieces information: candidate animals matrix pairwise kinships candidate animals number groups desired list candidate animals number simulations run. * equivalent number random MISs generate compare. Information inter-animal relationships () ignored.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"data-pre-processing","dir":"Articles","previous_headings":"Algorithm: Breeding Group Formation","what":"Data Pre-processing","title":"Genetic Management Tools Manual","text":"group formation algorithm begins generating MISs, data pre-processed remove animals pairwise kinships considered. Specifically: candidate animals provided checked, designated low-value genetic value analysis removed consideration. * behavior can toggled allow low-value animals formation process pairwise kinship data filtered kinship candidate animals. age threshold set, kinships involving animals threshold filtered . * allows algorithm ignore young animals, young animals typically go whatever social group dam . * default, ignore animals 1 year age Pairwise kinships specified level filtered . * default, ignore relatedness distant 2nd cousin Pairwise kinships females filtered * allows females matriline part group like wild. * behavior can toggled prevent relatedness females.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"random-maximum-independent-set-generation","dir":"Articles","previous_headings":"Algorithm: Breeding Group Formation","what":"Random Maximum Independent Set Generation","title":"Genetic Management Tools Manual","text":"animals relationships ignored removed dataset, algorithm begins using remaining animals kinship information generate potential groups. algorithm proceeds following steps: Generate N empty sets, N desired number groups created. candidate animals remaining: . Pick animal randomly set candidate animals ii. Choose group G randomly one N groups, assign iii. Remove animal consideration N groups iv. Remove animals related consideration group G Score groups generated . purposes, calculate average group size score new groups higher groups previously generated, save new groups. best groups encountered iterations.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"algorithm-genome-uniqueness","dir":"Articles","previous_headings":"","what":"Algorithm: Genome Uniqueness","title":"Genetic Management Tools Manual","text":"Genome uniqueness calculated use gene-drop simulation estimate frequently animal possess founder alleles present members focal population, present specified number fewer. gene-drop simulation used web application vectorized version shown figure . un-vectorized version, 5000 gene-drop simulations desired estimation process, population iterated 5000 times. Since iteration gene-drop independent, process can vectorized element vector represents 1 iteration gene-drop simulation. vectorized version, population iterated , regardless number simulations desired. drastically reduces amount time necessary program run.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"overview","dir":"Articles","previous_headings":"Algorithm: Genome Uniqueness","what":"Overview","title":"Genetic Management Tools Manual","text":"basic steps gene-drop : founder assigned two unique alleles animal, find genotypes parents, select one allele parent randomly. every animal assigned genotype mendelian inheritance tally number unique alleles possessed member focal population. case algorithm, allow ‘uniqueness’ threshold adjusted allele can considered unique possessed N fewer members focal population.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"vectorized-gene-drop-details","dir":"Articles","previous_headings":"Algorithm: Genome Uniqueness","what":"Vectorized Gene-Drop Details","title":"Genetic Management Tools Manual","text":"vectorized gene-drop simulation follows basic process described . difference instead dropping one allele time, repeating simulation N times, vectorized version drops N independent alleles one time. vectorized version, animal vector paternally inherited alleles vector maternally inherited alleles. offspring, random combination alleles produced dropped offspring process shown following figure: start simulation, founder assigned two unique founding alleles. N-element vectors created alleles, N desired number simulations. example , founder assigned unique founder alleles 1 & 2 5 simulations desired. time alleles need dropped parent offspring, unique transmission vector created representing whether allele passed offspring. vector generated contain random combination 0’s 1’s. animal’s paternally inherited alleles multiplied transmission vector, maternally inherited alleles multiplied compliment transmission vector. generate final set alleles received offspring, maternal paternal allele vectors added together. result vector alleles offspring received parent. allele vectors generated every animal pedigree, focal population can subset . Within population allele vectors, unique alleles can determined: position allele vectors (1:N) - Gather animal’s two alleles - number animals possessing allele equal , threshold, score allele unique (1) - Otherwise, score allele non-unique (0) every position animal’s two allele vector’s scored, sum scores animal divide total number alleles considered (2 * number simulations).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"software-issues","dir":"Articles","previous_headings":"","what":"Software Issues","title":"Genetic Management Tools Manual","text":"goal use current R software development practices open software environment. Users can see code github.com/rmsharp/nprcgenekeepr can submit suggestions bug reports issue tracker github.com/rmsharp/nprcgenekeepr/issues.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"cicd-pipeline-use","dir":"Articles","previous_headings":"Software Issues","what":"CICD Pipeline Use","title":"Genetic Management Tools Manual","text":"application associated website continuously integrated push online repository. often new features added stable complete, uncommon application run perform functions working . However, make sure build passing looking green R-CMD-check.yaml Passing badge top README file https://github.com/rmsharp/nprcgenekeepr/.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"debug-logging","dir":"Articles","previous_headings":"Software Issues","what":"Debug Logging","title":"Genetic Management Tools Manual","text":"logging system integrated package using package futile.logger. Note checkbox bottom side panel Input tab. Debug checkbox checked (checked default), application writes file named nprcgenekeepr.log users home directory. Currently, events occurring server.R file logged errors exposed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/a3manual.html","id":"code-coverage","dir":"Articles","previous_headings":"Software Issues","what":"Code Coverage","title":"Genetic Management Tools Manual","text":"Code coverage reports part automated build system running GitHub Actions. using testthat package unit tests. Currently code returning values access database file system coverage unit tests. Many 100 percent lines covered. However, unit tests exhaustive. practice add tests errors detected working code new unit test possibility discovered. 20241223 95.70 percent lines covered.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/simulatedKValues.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quick Example of Simulated Kinships with Partial Parentage","text":"vignette provides quick example estimate kinship coefficients using simulation. One simulation uses 100 iterations uses setup 1000 simulations illustrate type kinship coefficient estimate variance can expect simple pedigree exhibiting partial parentage members.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/simulatedKValues.html","id":"anticipation-of-further-uses-of-this-kinship-estimation-method","dir":"Articles","previous_headings":"Introduction","what":"Anticipation of further uses of this kinship estimation method","title":"Quick Example of Simulated Kinships with Partial Parentage","text":"Retention founder alleles primary driving force behind package utilities. example intentionally overly simplistic clearly illustrate one aspect methodology used realistic pedigrees. example, potential parents members example pedigree thus, definition, kinship coeficient 0.0 pedigree members. practice potential parents members pedigree potentially nonzero kinship coeficients pedigree members.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/simulatedKValues.html","id":"identification-of-potential-parents","dir":"Articles","previous_headings":"Introduction > Anticipation of further uses of this kinship estimation method","what":"Identification of potential parents","title":"Quick Example of Simulated Kinships with Partial Parentage","text":"tutorial assumes knowledge potential parents present methods identifying potential parents. Capabilities address resolution Issue #281 provide users ability fully automate identification potential parents. However, prior capability available, users can use methods identify potential parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/simulatedKValues.html","id":"creation-of-example-pedigreenot-realistic","dir":"Articles","previous_headings":"Introduction","what":"Creation of example pedigree2","title":"Quick Example of Simulated Kinships with Partial Parentage","text":"example based following simple pedigree setup. pedigree given , original animals identifiers single letters alphabet.: IDs unknown parents included lists. IDs one known parent, known parent included . See ID . Note also potential parents can either come pedigree augmented simulation outside pedigree. See , , , examples . Currently, want provide differential weights different potential parents, need directly modifying number times parent included list. Animals , , ","code":"knitr::opts_chunk$set(echo = TRUE) library(kableExtra) # nolint: undesirable_function_linter library(magrittr) # nolint: undesirable_function_linter library(nprcgenekeepr) # nolint: undesirable_function_linter library(stringi) # nolint: undesirable_function_linter  ped <- nprcgenekeepr::smallPed simParent_1 <- list( # nolint: object_name_linter   id = \"A\", # nolint: object_name_linter   sires = \"Q\",   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list( # nolint: object_name_linter   id = \"B\", # nolint: object_name_linter   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_3 <- list( # nolint: object_name_linter   id = \"E\", # nolint: object_name_linter   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_4 <- list( # nolint: object_name_linter   id = \"J\", # nolint: object_name_linter   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_5 <- list( # nolint: object_name_linter   id = \"K\", # nolint: object_name_linter   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"d1_2\") ) simParent_6 <- list( # nolint: object_name_linter   id = \"N\", # nolint: object_name_linter   sires = c(\"A\", \"C\", \"s1_2\"),   dams = c(\"d3_1\", \"B\") ) allSimParents <- list(   simParent_1, simParent_2, simParent_3,   simParent_4, simParent_5, simParent_6 )  extractKinship <- function(simKinships, id1, id2, simulation) {   ids <- dimnames(simKinships[[simulation]])[[1L]]   simKinships[[simulation]][     seq_along(ids)[ids == id1],     seq_along(ids)[ids == id2]   ] }  extractKValue <- function(kValue, id1, id2, simulation) {   kValue[kValue$id_1 == id1 & kValue$id_2 == id2, paste0(\"sim_\", simulation)] }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/articles/simulatedKValues.html","id":"small-example","dir":"Articles","previous_headings":"Introduction","what":"Small Example","title":"Quick Example of Simulated Kinships with Partial Parentage","text":"simulation. printing rows kinship values vary. running simulations, take time look included function descriptions see expecting arguments return. larger simulation much larger simulation Comparing values variation found various kinship values: Comparision estimated kinships simulations 10 (short) 1000 (long) Comparision estimated kinships simulations 100 (short) 1000 (long)","code":"?createSimKinships ?kinshipMatricesToKValues ?extractKValue # Only set this seed if you want to get the same simulation results each time. set.seed(1L) n <- 10L simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1L:n) ##  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  ##  [9] \"sim_9\"  \"sim_10\" counts <- countKinshipValues(kValues) counts$kinshipIds[1L:3L] ## NULL counts$kinshipValues[1L:3L] ## NULL counts$kinshipCounts[1L:3L] ## NULL stats_10 <- summarizeKinshipValues(counts) nrow(stats_10[stats_10$sd > 0.0, ]) ## [1] 94 kable(stats_10[stats_10$sd > 0.0, ], longtable = TRUE) %>%   kable_styling(     latex_options = c(\"striped\", \"repeat_header\"),     repeat_header_method = \"replace\",     repeat_header_text = \"\\\\textit{(continued)}\"   ) set.seed(1L) n <- 100L simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1L:10L) ##  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  ##  [9] \"sim_9\"  \"sim_10\" counts <- countKinshipValues(kValues) counts$kinshipIds[1L:3L] ## NULL counts$kinshipValues[1L:3L] ## NULL counts$kinshipCounts[1L:3L] ## NULL stats_100 <- summarizeKinshipValues(counts) nrow(stats_100[stats_100$sd > 0.0, ]) ## [1] 94 kable(stats_100[stats_100$sd > 0.0, ], longtable = TRUE) %>%   kable_styling(     latex_options = c(\"striped\", \"repeat_header\"),     repeat_header_method = \"replace\",     repeat_header_text = \"\\\\textit{(continued)}\"   ) set.seed(1L) n <- 1000L simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1L:10L) ##  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  ##  [9] \"sim_9\"  \"sim_10\" counts <- countKinshipValues(kValues) counts$kinshipIds[1L:3L] ## NULL counts$kinshipValues[1L:3L] ## NULL counts$kinshipCounts[1L:3L] ## NULL stats_1000 <- summarizeKinshipValues(counts) nrow(stats_1000[stats_1000$sd > 0.0, ]) ## [1] 94 kable(stats_1000[stats_1000$sd > 0.0, ], longtable = TRUE) %>%   kable_styling(     latex_options = c(\"striped\", \"repeat_header\"),     repeat_header_method = \"replace\",     repeat_header_text = \"\\\\textit{(continued)}\"   ) stats_short <- stats_10[stats_10$sd > 0.0, ] stats_long <- stats_1000[stats_1000$sd > 0.0, ]  if (any(stats_short$id_1 != stats_long$id_1) ||   any(stats_short$id_2 != stats_long$id_2)) {   cat(\"At least one row represents a different animal pair\") }  comprison <- data.frame(   id_1 = stats_short$id_1,   id_2 = stats_short$id_2,   meanKin_short = stats_short$mean,   meanKin_long = stats_long$mean,   meanKinDelta = abs(stats_short$mean - stats_long$mean),   sdKin_short = stats_short$sd,   sdKin_long = stats_long$sd,   sdKinDelta = abs(stats_short$sd - stats_long$sd) )  kable(comprison,   longtable = TRUE,   digits = c(0L, 0L, 4L, 4L, 4L, 4L, 4L, 4L),   caption = stri_c(     \"Comparision of estimated kinships between simulations \",     \"of 10 (short) and 1000 (long)\"   ) ) %>%   kable_styling(     latex_options = c(\"striped\", \"repeat_header\"),     repeat_header_method = \"replace\",     repeat_header_text = \"\\\\textit{(continued)}\",     font_size = 10L   ) stats_short <- stats_100[stats_100$sd > 0.0, ] stats_long <- stats_1000[stats_1000$sd > 0.0, ]  if (any(stats_short$id_1 != stats_long$id_1) ||   any(stats_short$id_2 != stats_long$id_2)) {   cat(\"At least one row represents a different animal pair\") }  comprison <- data.frame(   id_1 = stats_short$id_1,   id_2 = stats_short$id_2,   meanKin_short = stats_short$mean,   meanKin_long = stats_long$mean,   meanKinDelta = abs(stats_short$mean - stats_long$mean),   sdKin_short = stats_short$sd,   sdKin_long = stats_long$sd,   sdKinDelta = abs(stats_short$sd - stats_long$sd) )  kable(comprison,   longtable = TRUE,   digits = c(0L, 0L, 4L, 4L, 4L, 4L, 4L, 4L),   caption = stri_c(     \"Comparision of estimated kinships between simulations \",     \"of 100 (short) and 1000 (long)\"   ) ) %>%   kable_styling(     latex_options = c(\"striped\", \"repeat_header\"),     repeat_header_method = \"replace\",     repeat_header_text = \"\\\\textit{(continued)}\",     font_size = 10L   )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Raboin. Author. Terry Therneau. Author. Amanda Vinson. Author, data contributor. R. Mark Sharp. Author, maintainer, copyright holder, data contributor. Matthew Schultz. Author. Southwest National Primate Research Center NIH grant P51 RR13986. Funder. Oregon National Primate Research Center grant P51 OD011092. Funder.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raboin M, Therneau T, Vinson , Sharp R, Schultz M (2025). nprcgenekeepr: Genetic Tools Colony Management. R package version 1.0.8, https://rmsharp.github.io/nprcgenekeepr/.","code":"@Manual{,   title = {nprcgenekeepr: Genetic Tools for Colony Management},   author = {Michael Raboin and Terry Therneau and Amanda Vinson and R. Mark Sharp and Matthew Schultz},   year = {2025},   note = {R package version 1.0.8},   url = {https://rmsharp.github.io/nprcgenekeepr/}, }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"readme","dir":"","previous_headings":"","what":"Genetic Tools for Colony Management","title":"Genetic Tools for Colony Management","text":"R. Mark Sharp, Ph.D. 2025-04-21","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"nprcgenekeepr-","dir":"","previous_headings":"","what":"nprcgenekeepr","title":"Genetic Tools for Colony Management","text":"Version1.0.7 (2025-04-22)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Genetic Tools for Colony Management","text":"goal nprcgenekeepr implement Genetic Tools Colony Management. initially conceived developed Shiny web application Oregon National Primate Research Center (ONPRC) facilitate analyses perform regularly. enhanced capability Shiny application expose functions can used either interactively R scripts. work supported part NIH grants P51 RR13986 Southwest National Primate Research Center P51 OD011092 Oregon National Primate Research Center. present, application supports 5 functions: Quality control studbooks contained text files Excel workbooks pedigrees within LabKey Electronic Health Records (EHR) Creation pedigrees lists animals using LabKey EHR integration Creation display age sex pyramid plot living animals within designated pedigree Generation Genetic Value Analysis Reports Creation potential breeding groups without proscribed sex ratios defined maximum kinships. information see: Practical Approach Designing Breeding Groups Maximize Genetic Diversity Large Colony Captive Rhesus Macaques (Macaca mulatto) Vinson, ; Raboin, MJ Journal American Association Laboratory Animal Science, 2015 Nov, Vol.54(6), pp.700-707 [Peer Reviewed Journal]","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Genetic Tools for Colony Management","text":"can install CRAN version nprcgenekeepr R console prompt : can install development version nprcgenekeepr GitHub R console prompt : missing dependencies automatically installed.","code":"install.packages(\"nprcgenekeepr\") install.packages(\"devtools\") devtools::install_github(file.path(\"rmsharp\", \"nprcgenekeepr\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"online-documentation","dir":"","previous_headings":"","what":"Online Documentation","title":"Genetic Tools for Colony Management","text":"can find complete online documentation https://rmsharp.github.io/nprcgenekeepr/. top page three menus right Home icon: Reference, Articles, Changelog. Reference menu top page brings list documentation Data objects, Major Features Functions, Primary interactive functions exposed functions. Articles menu brings list vignettes, , except Development Plans, tutorials using package. Changelog brings copy NEWS file package, records major changes made version.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"running-shiny-application","dir":"","previous_headings":"","what":"Running Shiny Application","title":"Genetic Tools for Colony Management","text":"toolset available within nprcgenekeepr can used inside standard R scripts. However, originally designed used within Shiny application can started :","code":"library(nprcgenekeepr) runGeneKeepR()"},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"quality-control","dir":"","previous_headings":"Summary of Major Functions","what":"Quality Control","title":"Genetic Tools for Colony Management","text":"Studbooks maintained breeding colonies generally contain information varying quality. quality control functions toolkit check ensure animals listed parents line entries, parents appropriate sex listed, animals listed sire dam, duplicate entries removed, pedigree generation numbers added, dates valid dates. addition, exit dates added possible consistent information departure dates death dates. Current ages animals still alive added database connection provided via configuration file user read permission LabKey server demographic data EHR (Electronic Health Record) module. See LabKey documentation. Parents ages user selected threshold identified. minimum parent age years set user used ensure parent least age birth date offspring. minimum parent age defaults 2 years. check performed animals missing birth dates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"creation-of-pedigree-from-a-list-of-potential-breeders-and-labkey","dir":"","previous_headings":"Summary of Major Functions","what":"Creation of Pedigree From a List of Potential Breeders and LabKey","title":"Genetic Tools for Colony Management","text":"user can enter list focal animals CSV file used create pedigree containing direct relative (ancestors descendants) via labkey.selectRows function within Rlabkey package database connection provided via configuration file user read permission LabKey server demographic data EHR (Electronic Health Record) module. Two configuration files needed use database features nprcgenekeepr LabKey. first file named _netrc Microsoft Windows operating systems .netrc otherwise, allows user authenticate LabKey LabKey API fully described LabKey documentation second file named _nprcgenekeepr_config Microsoft Windows operating systems .nprcgenekeepr_config otherwise nprcgenekeepr configuration file image example configuration file included data object can loaded viewed following lines R code R console.","code":"data(\"exampleNprcgenekeeprConfig\") View(exampleNprcgenekeeprConfig)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"display-of-an-age-by-sex-pyramid-plot","dir":"","previous_headings":"Summary of Major Functions","what":"Display of an age by sex pyramid plot","title":"Genetic Tools for Colony Management","text":"Adapted https://www.thoughtco.com/age-sex-pyramids--population-pyramids-1435272 20190603. Written Matt Rosenberg. Updated May 07, 2019. important demographic characteristic population age-sex structure. Age-sex pyramids (also known population pyramids) graphically display information improve understanding make comparison easy. population pyramid sometimes distinctive pyramid-like shape displaying growing population.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"how-to-read-the-age-sex-graph","dir":"","previous_headings":"Summary of Major Functions > Display of an age by sex pyramid plot","what":"How to Read the Age-Sex Graph","title":"Genetic Tools for Colony Management","text":"age-sex pyramid breaks population male female genders age ranges. Usually, ’ll find left side pyramid graphing male population right side pyramid displaying female population. Along horizontal axis (x-axis) population pyramid, graph displays population either total population age percentage population age. center pyramid starts zero population extends left males right females increasing size, proportion population. Along vertical axis (y-axis), age-sex pyramids display two-year age increments, birth bottom old age top.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"genetic-value-analysis-reports","dir":"","previous_headings":"Summary of Major Functions","what":"Genetic Value Analysis Reports","title":"Genetic Tools for Colony Management","text":"Genetic Value Analysis ranking scheme developed ONPRC indicate relative breeding value animals colony. scheme uses mean kinship animal indicate inter-related rest current breeding colony members. Genome uniqueness used provide indication whether animal likely possess alleles risk lost colony. scheme, animals low mean kinship high genome uniqueness ranked highly.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/index.html","id":"breeding-group-formation","dir":"","previous_headings":"Summary of Major Functions","what":"Breeding Group Formation","title":"Genetic Tools for Colony Management","text":"One goals breeding group formation avoid potential mating closely related animals. Since behavioral concerns housing constraints also taken account group formation process, goal provide largest number animals possible list candidates can housed together without risk consanguineous mating. end, function uses information Genetic Value Analysis search largest combinations animals can produced list candidates. default options consider sex individuals forming groups, though likely consideration user selecting candidate group members. Optionally user may select form harem groups, considers sex individuals forming groups restricts number males one per group. information see: Practical Approach Designing Breeding Groups Maximize Genetic Diversity Large Colony Captive Rhesus Macaques (Macaca mulatto) Vinson, ; Raboin, MJ Journal American Association Laboratory Animal Science, 2015 Nov, Vol.54(6), pp.700-707 [Peer Reviewed Journal]","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"allows kin used setdiff relatives otherwise error occur kin[['animal_with_no_relative']] found. See following: groupAddAssign","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"","code":"addAnimalsWithNoRelative(kin, candidates)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"kin dataframe kinship values candidates character vector IDs animals available use group.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"dataframe kinships long form adding row animal without relative.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"","code":"\\code{available[[i]] <- setdiff(available[[i]], kin[[id]])}"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addAnimalsWithNoRelative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds an NA value for all animals without a relative — addAnimalsWithNoRelative","text":"","code":"library(nprcgenekeepr) qcPed <- nprcgenekeepr::qcPed ped <- qcStudbook(qcPed,   minParentAge = 2.0, reportChanges = FALSE,   reportErrors = FALSE ) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen, sparse = FALSE) currentGroups <- list(1L) currentGroups[[1]] <- examplePedigree$id[1:3] candidates <- examplePedigree$id[examplePedigree$status == \"ALIVE\"] threshold <- 0.015625 kin <- getAnimalsWithHighKinship(kmat, ped, threshold, currentGroups,   ignore = list(c(\"F\", \"F\")), minAge = 1.0 ) # Filtering out candidates related to current group members conflicts <- unique(c(   unlist(kin[unlist(currentGroups)]),   unlist(currentGroups) )) candidates <- setdiff(candidates, conflicts) kin <- addAnimalsWithNoRelative(kin, candidates) length(kin) # should be 259 #> [1] 591 kin[[\"0DAV0I\"]] # should have 34 IDs #>  [1] \"95U2JO\" \"F50D26\" \"HRBVOE\" \"HRQJQR\" \"RD6KMA\" \"168Q0A\" \"6IPOZK\" \"96W7N8\" #>  [9] \"AD0UE1\" \"DHCUI7\" \"G6P0W4\" \"KVPYE4\" \"NHE3Z8\" \"OTAC9O\" \"ZWBMTP\" \"4UTH8P\" #> [17] \"9FR6Q8\" \"H00H7D\" \"H0UP6R\" \"NPK1YN\" \"NY9FEC\" \"QR5CMP\" \"S8IEHH\" \"T5KNUX\" #> [25] \"ZLPSUH\" \"2YGWN0\" \"HP3E04\" \"MF8X1C\" \"RSROMX\" \"WMUJC5\" \"2IXJ2N\" \"CAST4W\" #> [33] \"JGPN6K\" \"ZC5SCR\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addBackSecondParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Add back single parents trimmed pedigree — addBackSecondParents","title":"Add back single parents trimmed pedigree — addBackSecondParents","text":"Uses ped dataframe, full complement parents uPed dataframe, uninformative parents removed add back single parents uPed dataframe one parent known. parents added back pedigree ID record NA sire dam added back ID.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addBackSecondParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add back single parents trimmed pedigree — addBackSecondParents","text":"","code":"addBackSecondParents(uPed, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addBackSecondParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add back single parents trimmed pedigree — addBackSecondParents","text":"uPed trimmed pedigree dataframe uninformative founders removed. ped trimmed pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addBackSecondParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add back single parents trimmed pedigree — addBackSecondParents","text":"dataframe pedigree single parents added.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addBackSecondParents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add back single parents trimmed pedigree — addBackSecondParents","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) probands <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- getProbandPedigree(probands, breederPed) nrow(ped) #> [1] 704 p <- removeUninformativeFounders(ped) nrow(p) #> [1] 509 p <- addBackSecondParents(p, ped) nrow(p) #> [1] 690"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addGenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Add genotype data to pedigree file — addGenotype","title":"Add genotype data to pedigree file — addGenotype","text":"Assumes genotype opened checkGenotypeFile","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addGenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add genotype data to pedigree file — addGenotype","text":"","code":"addGenotype(ped, genotype)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addGenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add genotype data to pedigree file — addGenotype","text":"ped pedigree dataframe. ped provided qcStudbook checked. genotype genotype dataframe. genotype provided checkGenotypeFile checked.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addGenotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add genotype data to pedigree file — addGenotype","text":"pedigree object genotype data added.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addGenotype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add genotype data to pedigree file — addGenotype","text":"","code":"library(nprcgenekeepr) rhesusPedigree <- nprcgenekeepr::rhesusPedigree rhesusGenotypes <- nprcgenekeepr::rhesusGenotypes pedWithGenotypes <- addGenotype(   ped = rhesusPedigree,   genotype = rhesusGenotypes )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addIdRecords.html","id":null,"dir":"Reference","previous_headings":"","what":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","title":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","text":"addIdRecords Adds Ego records added NAs parent IDs","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addIdRecords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","text":"","code":"addIdRecords(ids, fullPed, partialPed)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addIdRecords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","text":"ids character vector IDs added Ego records NAs parent IDs fullPed trimmed pedigree partialPed trimmed pedigree dataframe uninformative founders removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addIdRecords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","text":"Pedigree Ego records added NAs parent IDs","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addIdRecords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"addIdRecords Adds Ego records added having NAs for parent IDs — addIdRecords","text":"","code":"uPedOne <- data.frame(   id = c(\"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(\"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(\"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   stringsAsFactors = FALSE ) pedOne <- data.frame(   id = c(\"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(NA, \"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(NA, \"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   stringsAsFactors = FALSE ) pedOne[!pedOne$id %in% uPedOne$id, ] #>   id sire  dam sex #> 1 s1 <NA> <NA>   M newPed <- addIdRecords(ids = \"s1\", pedOne, uPedOne) pedOne[!pedOne$id %in% newPed$id, ] #> [1] id   sire dam  sex  #> <0 rows> (or 0-length row.names) newPed[newPed$id == \"s1\", ] #>        id   sire    dam    sex #>    <char> <char> <char> <char> #> 1:     s1   <NA>   <NA>      M"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Add parents — addParents","title":"Add parents — addParents","text":"Pedigree curation function Given pedigree, find IDs listed \"sire\" \"dam\" columns lack line entry generate one.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add parents — addParents","text":"","code":"addParents(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add parents — addParents","text":"ped datatable Pedigree. contains pedigree information including IDs listed candidates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add parents — addParents","text":"updated pedigree entries added necessary. Entries id sex specified; remaining columns filled NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add parents — addParents","text":"must run addUIds since IDs made used addParents","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addParents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add parents — addParents","text":"","code":"pedTwo <- data.frame(   id = c(\"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(NA, NA, NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(NA, NA, NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   stringsAsFactors = FALSE ) newPed <- addParents(pedTwo) newPed #>   id sire  dam sex recordStatus #> 1 d1 <NA> <NA>   F     original #> 2 s2 <NA> <NA>   M     original #> 3 d2 <NA> <NA>   F     original #> 4 o1   s1   d1   F     original #> 5 o2   s1   d2   F     original #> 6 o3   s2   d2   F     original #> 7 o4   s2   d2   M     original #> 8 s1 <NA> <NA>   M        added"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addSexAndAgeToGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","title":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","text":"Forms dataframe Id, Sex, current Age given list Ids pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addSexAndAgeToGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","text":"","code":"addSexAndAgeToGroup(ids, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addSexAndAgeToGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","text":"ids character vector animal Ids ped datatable Pedigree. contains pedigree information including IDs listed candidates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addSexAndAgeToGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","text":"Dataframe Id, Sex, Current Age","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addSexAndAgeToGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forms a dataframe with Id, Sex, and current Age given a list of Ids and a pedigree — addSexAndAgeToGroup","text":"","code":"library(nprcgenekeepr) data(\"qcBreeders\") data(\"qcPed\") df <- addSexAndAgeToGroup(ids = qcBreeders, ped = qcPed) head(df) #>           ids sex       age #> Q0RGP7 Q0RGP7   F 20.446270 #> C1ICXL C1ICXL   F  9.423682 #> J3D3N5 J3D3N5   M 24.495551 #> VFS0XB VFS0XB   M 19.490760 #> HP3E04 HP3E04   M 18.338125 #> 2KULR3 2KULR3   F 12.101300"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addUIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","title":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","text":"must run prior addParents since IDs made herein used addParents","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addUIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","text":"","code":"addUIds(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addUIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","text":"ped datatable Pedigree. contains pedigree information. fields sire dam required.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addUIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","text":"updated pedigree partial parentage removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/addUIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eliminates partial parentage situations by adding unique placeholder IDs for the unknown parent. — addUIds","text":"","code":"pedTwo <- data.frame(   id = c(\"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(NA, \"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(\"d0\", \"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   stringsAsFactors = FALSE ) newPed <- addUIds(pedTwo) newPed[newPed$id == \"s1\", ] #>   id  sire dam sex #> 1 s1 U0001  d0   M pedThree <-   data.frame(     id = c(\"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),     sire = c(\"s0\", \"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),     dam = c(NA, \"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),     sex = c(\"M\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),     stringsAsFactors = FALSE   ) newPed <- addUIds(pedThree) newPed[newPed$id == \"s1\", ] #>   id sire   dam sex #> 1 s1   s0 U0001   M"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the count of each allele in the provided vector. — alleleFreq","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"","code":"alleleFreq(alleles, ids = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"alleles integer vector alleles population ids character vector IDs indicating animal allele alleles belongs.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"data.frame columns allele freq. table allele counts within population.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"ids provided, function count unique alleles individual (homozygous alleles counted 1).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/alleleFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the count of each allele in the provided vector. — alleleFreq","text":"","code":"library(nprcgenekeepr) data(\"ped1Alleles\") ids <- ped1Alleles$id alleles <- ped1Alleles[, !(names(ped1Alleles) %in% c(\"id\", \"parent\"))] aF <- alleleFreq(alleles[[1]], ids = NULL) aF[aF$freq >= 10, ] #>     allele freq #> 230  20004   10 #> 238  20012   11"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/assignAlleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign parent alleles randomly — assignAlleles","title":"Assign parent alleles randomly — assignAlleles","text":"Assign parent alleles randomly","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/assignAlleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign parent alleles randomly — assignAlleles","text":"","code":"assignAlleles(alleles, parentType, parent, id, n)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/assignAlleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign parent alleles randomly — assignAlleles","text":"alleles list list alleles$alleles, list list containing alleles individual's sire dam assigned thus far alleles$counter counter used track lists ofalleles$alleles. parentType character vector length one value \"sire\" \"dam\". parent either ped[id, \"sire\"] ped[id, \"dam\"]. id character vector length one containing animal ID n integer indicating number iterations simulate. Default 5000.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/assignAlleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign parent alleles randomly — assignAlleles","text":"original list alleles passed function newly randomly assigned alleles id based dam sire genotypes.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/assignAlleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign parent alleles randomly — assignAlleles","text":"","code":"alleles <- list(alleles = list(), counter = 1) alleles <- assignAlleles(alleles,   parentType = \"sire\", parent = NA,   id = \"o1\", n = 4 ) alleles #> $alleles #> $alleles$o1 #> $alleles$o1$sire #> [1] 1 1 1 1 #>  #>  #>  #> $counter #> [1] 2 #>  alleles <- assignAlleles(alleles,   parentType = \"dam\", parent = NA,   id = \"o1\", n = 4 ) alleles #> $alleles #> $alleles$o1 #> $alleles$o1$sire #> [1] 1 1 1 1 #>  #> $alleles$o1$dam #> [1] 2 2 2 2 #>  #>  #>  #> $counter #> [1] 3 #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","title":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","text":"","code":"calcA(alleles, threshold = 1L, byID = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","text":"alleles matrix {id, parent, V1 ... Vn} providing alleles animal received simulation. first 2 columns provide animal ID parent allele came . Remaining columns provide alleles. threshold integer indicating maximum number copies allele can present population considered rare. Default 1. byID logical variable length 1 passed eventually used alleleFreq(), calculates count allele provided vector. byID TRUE ids provided, function count unique alleles individual (homozygous alleles counted 1).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","text":"matrix named rows indicating number unique alleles animal round simulation (indicated columns).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates a, the number of an individual's alleles that are rare in each simulation. — calcA","text":"","code":"library(nprcgenekeepr) rare <- calcA(nprcgenekeepr::ped1Alleles, threshold = 3, byID = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate animal ages. — calcAge","title":"Calculate animal ages. — calcAge","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate animal ages. — calcAge","text":"","code":"calcAge(birth, exit)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate animal ages. — calcAge","text":"birth Date vector birth dates exit Date vector exit dates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate animal ages. — calcAge","text":"numeric vector (NA allowed) indicating age decimal years \"birth\" \"exit\" current date \"exit\" NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate animal ages. — calcAge","text":"Given vectors birth exit dates, calculate individuals age. exit date provided, calculation based current date.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate animal ages. — calcAge","text":"","code":"library(nprcgenekeepr) qcPed <- nprcgenekeepr::qcPed originalAge <- qcPed$age ## ages calculated at time of data collection currentAge <- calcAge(qcPed$birth, qcPed$exit) ## assumes no changes in ## colony"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates founder Equivalents — calcFE","title":"Calculates founder Equivalents — calcFE","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates founder Equivalents — calcFE","text":"","code":"calcFE(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates founder Equivalents — calcFE","text":"ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates founder Equivalents — calcFE","text":"founder equivalents FE = 1 / sum(p ^ 2), p average number descendants r mean number founder alleles retained gene dropping experiment.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates founder Equivalents — calcFE","text":"assumed pedigree partial parentage","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates founder Equivalents — calcFE","text":"","code":"## Example from Analysis of Founder Representation in Pedigrees: Founder ## Equivalents and Founder Genome Equivalents. ## Zoo Biology 8:111-123, (1989) by Robert C. Lacy library(nprcgenekeepr) ped <- data.frame(   id = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"),   sire = c(NA, NA, \"A\", \"A\", NA, \"D\", \"D\"),   dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\"),   stringsAsFactors = FALSE ) ped[\"gen\"] <- findGeneration(ped$id, ped$sire, ped$dam) ped$population <- getGVPopulation(ped, NULL) pedFactors <- data.frame(   id = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"),   sire = c(NA, NA, \"A\", \"A\", NA, \"D\", \"D\"),   dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\"),   stringsAsFactors = TRUE ) pedFactors[\"gen\"] <- findGeneration(   pedFactors$id, pedFactors$sire,   pedFactors$dam ) pedFactors$population <- getGVPopulation(pedFactors, NULL) fe <- calcFE(ped) feFactors <- calcFE(pedFactors)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFEFG.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","title":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFEFG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","text":"","code":"calcFEFG(ped, alleles)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFEFG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","text":"ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population). assumed pedigree partial parentage alleles dataframe contains AlleleTable. table allele information produced geneDrop().","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFEFG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","text":"list containing founder equivalents, FE = 1 / sum(p ^ 2), founder genome equivalents, FG = 1 / sum( (p ^ 2) / r p average number descendants r mean number founder alleles retained gene dropping experiment.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFEFG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Founder Equivalents and Founder Genome Equivalents — calcFEFG","text":"","code":"data(lacy1989Ped) ## Example from Analysis of Founder Representation in Pedigrees: Founder ## Equivalents and Founder Genome Equivalents. ## Zoo Biology 8:111-123, (1989) by Robert C. Lacy  library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped alleles <- lacy1989PedAlleles pedFactors <- data.frame(   id = as.factor(ped$id),   sire = as.factor(ped$sire),   dam = as.factor(ped$dam),   gen = ped$gen,   population = ped$population,   stringsAsFactors = TRUE ) allelesFactors <- geneDrop(pedFactors$id, pedFactors$sire, pedFactors$dam,   pedFactors$gen,   genotype = NULL, n = 5000,   updateProgress = NULL ) feFg <- calcFEFG(ped, alleles) feFgFactors <- calcFEFG(pedFactors, allelesFactors)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFG.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Founder Genome Equivalents — calcFG","title":"Calculates Founder Genome Equivalents — calcFG","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Founder Genome Equivalents — calcFG","text":"","code":"calcFG(ped, alleles)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Founder Genome Equivalents — calcFG","text":"ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population). assumed pedigree partial parentage alleles dataframe contains AlleleTable. table allele information produced geneDrop().","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Founder Genome Equivalents — calcFG","text":"founder genome equivalents, FG = 1 / sum( (p ^ 2) / r p average number descendants r mean number founder alleles retained gene dropping experiment.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcFG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Founder Genome Equivalents — calcFG","text":"","code":"## Example from Analysis of Founder Representation in Pedigrees: Founder ## Equivalents and Founder Genome Equivalents. ## Zoo Biology 8:111-123, (1989) by Robert C. Lacy  library(nprcgenekeepr) ped <- data.frame(   id = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"),   sire = c(NA, NA, \"A\", \"A\", NA, \"D\", \"D\"),   dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\"),   stringsAsFactors = FALSE ) ped[\"gen\"] <- findGeneration(ped$id, ped$sire, ped$dam) ped$population <- getGVPopulation(ped, NULL) pedFactors <- data.frame(   id = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"),   sire = c(NA, NA, \"A\", \"A\", NA, \"D\", \"D\"),   dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\"),   stringsAsFactors = TRUE ) pedFactors[\"gen\"] <- findGeneration(   pedFactors$id, pedFactors$sire,   pedFactors$dam ) pedFactors$population <- getGVPopulation(pedFactors, NULL) alleles <- geneDrop(ped$id, ped$sire, ped$dam, ped$gen,   genotype = NULL,   n = 5000, updateProgress = NULL ) allelesFactors <- geneDrop(pedFactors$id, pedFactors$sire, pedFactors$dam,   pedFactors$gen,   genotype = NULL, n = 5000,   updateProgress = NULL ) fg <- calcFG(ped, alleles) fgFactors <- calcFG(pedFactors, allelesFactors)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"{Genome Uniqueness Functions}{}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"","code":"calcGU(alleles, threshold = 1L, byID = FALSE, pop = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"alleles dataframe containing AlleleTable. table allele information produced geneDrop(). AlleleTable contains information alleles ego inherited. contains following columns: {id} {— character vector IDs set animals.} {parent} {— factor levels sire dam.} {V1} {— Unnamed integer column representing allele 1.} {V2} {— Unnamed integer column representing allele 2.} {...} {— Unnamed integer columns representing alleles.} {Vn} {— Unnamed integer column representing nth column.} threshold integer indicating maximum number copies allele can present population considered rare. Default 1. byID logical variable length 1 passed eventually used alleleFreq(), calculates count allele provided vector. byID TRUE ids provided, function count unique alleles individual (homozygous alleles counted 1). pop character vector animal IDs consider population interest, otherwise animals considered. default NULL.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"Dataframe rows: id, col: gu single-column table genome uniqueness values percentages. Rownames set 'id' values part population.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"Part Genetic Value Analysis following functions calculate genome uniqueness according equation described Ballou & Lacy. noted, however function differs slightly distinguish founders non-founders calculating statistic. Ballou & Lacy describe genome uniqueness \"proportion simulations individual receives copy founder allele.\" interpreted meaning genome uniqueness calculated living, non-founder animals. Alleles possessed living founders considered calculating genome uniqueness. differing view , since living founder can still contribute population. function calculates genome uniqueness living animals considers alleles. ignore living founders alleles. results genome uniqueness , therefore differ slightly returned Pedscope. Pedscope calculates genome uniqueness non-founders ignores contribution founders population. cause Pedscope's genome uniqueness estimates possibly slightly higher non-founders function calculate. estimates genome uniqueness founders within population calculated function match \"founder genome uniqueness\" measure calculated Pedscope.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"Ballou JD, Lacy RC.  1995. Identifying genetically important individuals management genetic variation pedigreed populations, p 77-111. : Ballou JD, Gilpin M, Foose TJ, editors. Population management survival recovery. New York (NY): Columbia University Press.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcGU.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates genome uniqueness for each ID that is part of the population. — calcGU","text":"","code":"library(nprcgenekeepr) ped1Alleles <- nprcgenekeepr::ped1Alleles gu_1 <- calcGU(ped1Alleles, threshold = 1, byID = FALSE, pop = NULL) gu_2 <- calcGU(ped1Alleles, threshold = 3, byID = FALSE, pop = NULL) gu_3 <- calcGU(ped1Alleles,   threshold = 3, byID = FALSE,   pop = ped1Alleles$id[20:60] )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcRetention.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates Allelic Retention — calcRetention","title":"Calculates Allelic Retention — calcRetention","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcRetention.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates Allelic Retention — calcRetention","text":"","code":"calcRetention(ped, alleles)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcRetention.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates Allelic Retention — calcRetention","text":"ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population). assumed pedigree partial parentage alleles dataframe containing AlleleTable. table allele information produced geneDrop().","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcRetention.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates Allelic Retention — calcRetention","text":"vector mean number founder alleles retained gene dropping simulation.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calcRetention.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates Allelic Retention — calcRetention","text":"","code":"library(nprcgenekeepr) data(\"lacy1989Ped\") data(\"lacy1989PedAlleles\") ped <- lacy1989Ped alleles <- lacy1989PedAlleles retention <- calcRetention(ped, alleles)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calculateSexRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","title":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","text":"Males counted ped$sex value \"M\". Females counted ped$sex value \"M\". means animals ambiguous sex counted females.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calculateSexRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","text":"","code":"calculateSexRatio(ids, ped, additionalMales = 0L, additionalFemales = 0L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calculateSexRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","text":"ids character vector animal Ids ped datatable Pedigree. contains pedigree information including IDs listed candidates. additionalMales Integer value males add within group calculating ratio. Ignored calculated ratio 0 Inf. Default 0. additionalFemales Integer value females add within group calculating ratio. Ignored calculated ratio 0 Inf. Default 0.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calculateSexRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","text":"Numeric value sex ratio animals provided.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/calculateSexRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the sex ratio (number of non-males / number of males) given animal Ids and their pedigree — calculateSexRatio","text":"","code":"library(nprcgenekeepr) data(\"qcBreeders\") data(\"pedWithGenotype\") available <- c(   \"JGPN6K\", \"8KM1MP\", \"I9TQ0T\", \"Q0RGP7\", \"VFS0XB\", \"CQC133\",   \"2KULR3\", \"HOYW0S\", \"FHV13N\", \"OUM6QF\", \"6Z7MD9\", \"CFPEEU\",   \"HLI95R\", \"RI0O7F\", \"7M51X5\", \"DR5GXB\", \"170ZTZ\", \"C1ICXL\" ) nonMales <- c(   \"JGPN6K\", \"8KM1MP\", \"I9TQ0T\", \"Q0RGP7\", \"CQC133\",   \"2KULR3\", \"HOYW0S\", \"FHV13N\", \"OUM6QF\", \"6Z7MD9\", \"CFPEEU\",   \"HLI95R\", \"RI0O7F\", \"7M51X5\", \"DR5GXB\", \"170ZTZ\", \"C1ICXL\" ) male <- \"VFS0XB\" calculateSexRatio(ids = male, ped = pedWithGenotype) #> [1] 0 calculateSexRatio(ids = nonMales, ped = pedWithGenotype) #> [1] Inf calculateSexRatio(ids = available, ped = pedWithGenotype) #> [1] 17 calculateSexRatio(   ids = available, ped = pedWithGenotype,   additionalMales = 1L ) #> [1] 8.5 calculateSexRatio(   ids = available, ped = pedWithGenotype,   additionalFemales = 1L ) #> [1] 18 calculateSexRatio(   ids = available, ped = pedWithGenotype,   additionalMales = 1, additionalFemales = 1L ) #> [1] 9 calculateSexRatio(   ids = nonMales, ped = pedWithGenotype,   additionalMales = 1, additionalFemales = 0L ) #> [1] 17 calculateSexRatio(   ids = character(0), ped = pedWithGenotype,   additionalMales = 1, additionalFemales = 0L ) #> [1] 0"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkChangedColsLst.html","id":null,"dir":"Reference","previous_headings":"","what":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","title":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","text":"checkChangedColsLst examines list non-empty fields","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkChangedColsLst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","text":"","code":"checkChangedColsLst(changedCols)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkChangedColsLst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","text":"changedCols list fields type column change qcStudbook.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkChangedColsLst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","text":"Returns NULL fields empty else entire list returned.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkChangedColsLst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checkChangedColsLst examines list for non-empty fields — checkChangedColsLst","text":"","code":"library(nprcgenekeepr) library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union pedOne <- data.frame(   ego_id = c(     \"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\",     \"o4\"   ),   `si re` = c(NA, NA, NA, NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam_id = c(NA, NA, NA, NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"F\", \"M\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   birth_date = mdy(     paste0(       sample(1:12, 8, replace = TRUE), \"-\",       sample(1:28, 8, replace = TRUE), \"-\",       sample(seq(0, 15, by = 3), 8, replace = TRUE) +         2000     )   ),   stringsAsFactors = FALSE, check.names = FALSE )  errorLst <- qcStudbook(pedOne, reportErrors = TRUE, reportChanges = TRUE) checkChangedColsLst(errorLst$changedCols) #> [1] TRUE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkErrorLst.html","id":null,"dir":"Reference","previous_headings":"","what":"checkErrorLst examines list for non-empty fields — checkErrorLst","title":"checkErrorLst examines list for non-empty fields — checkErrorLst","text":"checkErrorLst examines list non-empty fields","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkErrorLst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkErrorLst examines list for non-empty fields — checkErrorLst","text":"","code":"checkErrorLst(errorLst)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkErrorLst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkErrorLst examines list for non-empty fields — checkErrorLst","text":"errorLst list fields type error detectable qcStudbook.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkErrorLst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkErrorLst examines list for non-empty fields — checkErrorLst","text":"Returns FALSE fields empty list NULL else entire list returned.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkErrorLst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checkErrorLst examines list for non-empty fields — checkErrorLst","text":"","code":"errorLst <- qcStudbook(nprcgenekeepr::pedFemaleSireMaleDam,   reportErrors = TRUE ) checkErrorLst(errorLst) #> [1] TRUE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkGenotypeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Check genotype file — checkGenotypeFile","title":"Check genotype file — checkGenotypeFile","text":"Checks ensure content structure appropriate genotype file. checks simply based expected columns legal domains.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkGenotypeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check genotype file — checkGenotypeFile","text":"","code":"checkGenotypeFile(genotype)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkGenotypeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check genotype file — checkGenotypeFile","text":"genotype dataframe genotype data","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkGenotypeFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check genotype file — checkGenotypeFile","text":"genotype file checked ensure column types number required present. returned genotype file first column name forced \"id\".","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkGenotypeFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check genotype file — checkGenotypeFile","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::qcPed ped <- ped[order(ped$id), ] genotype <- data.frame(   id = ped$id[50 + 1:20],   first_name = paste0(\"first_name\", 1:20),   second_name = paste0(\"second_name\", 1:20),   stringsAsFactors = FALSE )  ## checkGenotypeFile disallows dataframe with < 3 columns tryCatch(   {     checkGenotypeFile(genotype[, c(\"id\", \"first_name\")])   },   warning = function(w) {     cat(\"Warning produced\")   },   error = function(e) {     cat(\"Error produced\")   } ) #> Error produced"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkParentAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Check parent ages to be at least minParentAge — checkParentAge","title":"Check parent ages to be at least minParentAge — checkParentAge","text":"Ensure parents sufficiently older offspring","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkParentAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check parent ages to be at least minParentAge — checkParentAge","text":"","code":"checkParentAge(sb, minParentAge = 2L, reportErrors = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkParentAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check parent ages to be at least minParentAge — checkParentAge","text":"sb dataframe containing table pedigree demographic information. minParentAge numeric values set minimum age years animal offspring. Defaults 2 years. check performed animals missing birth dates. reportErrors logical value TRUE scan entire file make list errors found. errors returned list list sublist type error found.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkParentAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check parent ages to be at least minParentAge — checkParentAge","text":"dataframe containing rows animal one parent less minParentAge. contains columns original sb dataframe following added columns: {sireBirth} {sire's birth date} {sireAge} {age sire years date indicated birth.} {damBirth} {dam's birth date} damAge {age dam years date indicated birth.}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkParentAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check parent ages to be at least minParentAge — checkParentAge","text":"","code":"library(nprcgenekeepr) qcPed <- nprcgenekeepr::qcPed checkParentAge(qcPed, minParentAge = 2L) #>  [1] dam       sire      id        sex       gen       birth     exit      #>  [8] age       sireBirth damBirth  sireAge   damAge    #> <0 rows> (or 0-length row.names) checkParentAge(qcPed, minParentAge = 3L) #>  [1] dam       sire      id        sex       gen       birth     exit      #>  [8] age       sireBirth damBirth  sireAge   damAge    #> <0 rows> (or 0-length row.names) checkParentAge(qcPed, minParentAge = 5L) #>       dam   sire     id sex gen      birth       exit  age sireBirth   damBirth #> 63 EX98QB UAJJG4 L8Q55X   F   2 1993-09-23 2007-05-16 13.6      <NA> 1989-02-18 #>    sireAge damAge #> 63      NA   4.59 checkParentAge(qcPed, minParentAge = 6L) #>        dam   sire     id sex gen      birth       exit  age  sireBirth #> 63  EX98QB UAJJG4 L8Q55X   F   2 1993-09-23 2007-05-16 13.6       <NA> #> 90  L42X7I ULYO4W BA0JYM   F   2 2004-02-29       <NA> 15.3       <NA> #> 98  MRGPPA U7F4QJ JUMNN0   F   3 1993-12-31 2008-04-30 14.3       <NA> #> 102 O4Z4IB UYLDPW HFEQNK   F   2 1996-03-20 2017-02-04 20.9       <NA> #> 125 RY6OPR 549AEC 80EOVS   F   3 2005-12-10       <NA> 13.5 1998-09-27 #> 156 ZYTIYY UP4NEJ E5BLUE   F   1 1980-08-22 1998-11-18 18.2       <NA> #>       damBirth sireAge damAge #> 63  1989-02-18      NA   4.59 #> 90  1998-09-17      NA   5.45 #> 98  1988-03-19      NA   5.79 #> 102 1990-08-29      NA   5.56 #> 125 2000-02-29     7.2   5.78 #> 156 1974-12-21      NA   5.67 head(checkParentAge(qcPed, minParentAge = 10L)) #>       dam   sire     id sex gen      birth       exit  age  sireBirth #> 1  0DXI08 HRQJQR G6P0W4   F   1 1979-02-02 2000-04-15 21.2 1969-12-04 #> 2  0RV8OM QBLTI6 8IJUQO   F   3 1999-02-03 2017-04-27 18.2 1987-12-27 #> 11 3CQZ3E U0M96T MRGPPA   F   2 1988-03-19 2008-03-20 20.0       <NA> #> 12 3O7TMT 5EP5AL L6D4ZC   M   2 1988-06-25 2009-04-10 20.8 1976-09-30 #> 13 43TUN9 L6D4ZC AXDMJM   F   3 1999-11-09       <NA> 19.6 1988-06-25 #> 15 4WB10I 5EP5AL DO4NKS   M   2 1991-08-04 2013-02-08 21.5 1976-09-30 #>      damBirth sireAge damAge #> 1  1965-01-04    9.16  14.08 #> 2  1992-06-22   11.10   6.62 #> 11 1981-09-22      NA   6.49 #> 12 1981-09-15   11.73   6.78 #> 13 1990-07-14   11.37   9.32 #> 15 1982-03-30   14.84   9.35"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkRequiredCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Examines column names, cols for required column names — checkRequiredCols","title":"Examines column names, cols for required column names — checkRequiredCols","text":"Examines column names, cols required column names","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkRequiredCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examines column names, cols for required column names — checkRequiredCols","text":"","code":"checkRequiredCols(cols, reportErrors)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkRequiredCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examines column names, cols for required column names — checkRequiredCols","text":"cols character vector column names reportErrors logical value TRUE missing columns found errorLst object updated names missing columns returned FALSE missing columns found program stopped.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkRequiredCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examines column names, cols for required column names — checkRequiredCols","text":"NULL returned required columns present. See description reportErrors return values required columns missing.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/checkRequiredCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examines column names, cols for required column names — checkRequiredCols","text":"","code":"library(nprcgenekeepr) requiredCols <- getRequiredCols() cols <-   paste0(     \"id,sire,siretype,dam,damtype,sex,numberofparentsknown,birth,\",     \"arrivalatcenter,death,departure,status,ancestry,fromcenter?,\",     \"origin\"   ) all(requiredCols %in% checkRequiredCols(cols, reportErrors = TRUE)) #> [1] TRUE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseAlleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","title":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","text":"Combines two vectors alleles randomly selecting one allele position.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseAlleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","text":"","code":"chooseAlleles(a1, a2)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseAlleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","text":"a1 integer vector first allele individual a2 integer vector second allele individual a1 a2 equal length vectors alleles one individual","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseAlleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","text":"integer vector result sampling a1 a2 according Mendelian inheritance.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseAlleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combines two vectors of alleles by randomly selecting one allele or the other at each position. — chooseAlleles","text":"","code":"chooseAlleles(0L:4L, 5L:9L) #> [1] 0 6 2 8 4"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose date based on earlier flag. — chooseDate","title":"Choose date based on earlier flag. — chooseDate","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose date based on earlier flag. — chooseDate","text":"","code":"chooseDate(d1, d2, earlier = TRUE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose date based on earlier flag. — chooseDate","text":"d1 Date vector first two dates compare. d2 Date vector second two dates compare. earlier logical variable TRUE earlier two dates returned, otherwise later returned. Default TRUE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose date based on earlier flag. — chooseDate","text":"Date vector chosen dates NA neither provided","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose date based on earlier flag. — chooseDate","text":"Given two dates, one selected returned based whether occurred earlier later . NAs ignored possible.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/chooseDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose date based on earlier flag. — chooseDate","text":"","code":"library(nprcgenekeepr) someDates <- lubridate::mdy(paste0(   sample(1:12, 2, replace = TRUE), \"-\",   sample(1:28, 2, replace = TRUE), \"-\",   sample(seq(0, 15, by = 3), 2,     replace = TRUE   ) + 2000 )) someDates #> [1] \"2009-06-14\" \"2000-02-12\" chooseDate(someDates[1], someDates[2], earlier = TRUE) #> [1] \"2000-02-12\" chooseDate(someDates[1], someDates[2], earlier = FALSE) #> [1] \"2009-06-14\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertAncestry.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the ancestry information to a standardized code — convertAncestry","title":"Converts the ancestry information to a standardized code — convertAncestry","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertAncestry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the ancestry information to a standardized code — convertAncestry","text":"","code":"convertAncestry(ancestry)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertAncestry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the ancestry information to a standardized code — convertAncestry","text":"ancestry character vector NA free-form text providing information geographic population origin.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertAncestry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the ancestry information to a standardized code — convertAncestry","text":"factor vector standardized designators specifying animal Chinese rhesus, Indian rhesus, Chinese-Indian hybrid rhesus, Japanese macaque. Levels: CHINESE, INDIAN, HYBRID, JAPANESE, , UNKNOWN.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertAncestry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the ancestry information to a standardized code — convertAncestry","text":"","code":"original <- c(\"china\", \"india\", \"hybridized\", NA, \"human\", \"gorilla\") convertAncestry(original) #> [1] CHINESE INDIAN  HYBRID  UNKNOWN OTHER   OTHER   #> Levels: CHINESE INDIAN HYBRID JAPANESE OTHER UNKNOWN"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts date columns formatted as characters to be of type datetime — convertDate","title":"Converts date columns formatted as characters to be of type datetime — convertDate","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts date columns formatted as characters to be of type datetime — convertDate","text":"","code":"convertDate(ped, timeOrigin = as.Date(\"1970-01-01\"), reportErrors = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts date columns formatted as characters to be of type datetime — convertDate","text":"ped dataframe pedigree information may contain birth, death, departure, exit dates. fields optional, used present.(optional fields: birth, death, departure, exit). timeOrigin date object used .Date set origin. reportErrors logical value TRUE scan entire file make list errors found. errors returned list list sublist type error found.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts date columns formatted as characters to be of type datetime — convertDate","text":"dataframe updated table date columns converted character data type Date data type. Values conform format %Y%m%d set NA. NA values left NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts date columns formatted as characters to be of type datetime — convertDate","text":"","code":"library(lubridate) set_seed(10) someBirthDates <- paste0(   sample(seq(0, 15, by = 3), 10,     replace = TRUE   ) + 2000, \"-\",   sample(1:12, 10, replace = TRUE), \"-\",   sample(1:28, 10, replace = TRUE) ) someBadBirthDates <- paste0(   sample(1:12, 10, replace = TRUE), \"-\",   sample(1:28, 10, replace = TRUE), \"-\",   sample(seq(0, 15, by = 3), 10,     replace = TRUE   ) + 2000 ) someDeathDates <- sample(someBirthDates, length(someBirthDates),   replace = FALSE ) someDepartureDates <- sample(someBirthDates, length(someBirthDates),   replace = FALSE ) ped1 <- data.frame(   birth = someBadBirthDates, death = someDeathDates,   departure = someDepartureDates ) someDates <- ymd(someBirthDates) ped2 <- data.frame(   birth = someDates, death = someDeathDates,   departure = someDepartureDates ) ped3 <- data.frame(   birth = someBirthDates, death = someDeathDates,   departure = someDepartureDates ) someNADeathDates <- someDeathDates someNADeathDates[c(1, 3, 5)] <- \"\" someNABirthDates <- someDates someNABirthDates[c(2, 4, 6)] <- NA ped4 <- data.frame(   birth = someNABirthDates, death = someNADeathDates,   departure = someDepartureDates )  ## convertDate identifies bad dates result <- tryCatch(   {     convertDate(ped1)   },   warning = function(w) {     print(\"Warning in date\")   },   error = function(e) {     print(\"Error in date\")   } ) #> [1] \"Error in date\"  ## convertDate with error flag returns error list and not an error convertDate(ped1, reportErrors = TRUE) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"  ## convertDate recognizes good dates all(is.Date(convertDate(ped2)$birth)) #> [1] TRUE all(is.Date(convertDate(ped3)$birth)) #> [1] TRUE  ## convertDate handles NA and empty character string values correctly convertDate(ped4) #>         birth      death  departure #> 1  2009-08-25       <NA> 2009-08-25 #> 2        <NA> 2003-07-18 2000-05-12 #> 3  2006-02-22       <NA> 2003-06-20 #> 4        <NA> 2006-02-22 2012-08-10 #> 5  2000-05-12       <NA> 2006-11-10 #> 6        <NA> 2003-04-07 2006-02-22 #> 7  2003-01-24 2003-01-24 2003-07-18 #> 8  2003-04-07 2009-05-22 2009-05-22 #> 9  2009-05-22 2006-11-10 2003-04-07 #> 10 2006-11-10 2000-05-12 2003-01-24"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertFromCenter.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts the fromCenter information to a standardized code — convertFromCenter","title":"Converts the fromCenter information to a standardized code — convertFromCenter","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertFromCenter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts the fromCenter information to a standardized code — convertFromCenter","text":"","code":"convertFromCenter(fromCenter)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertFromCenter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts the fromCenter information to a standardized code — convertFromCenter","text":"fromCenter character logical vector NA indicating whether animal center.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertFromCenter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts the fromCenter information to a standardized code — convertFromCenter","text":"logical vector specifying TRUE animal center otherwise FALSE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertFromCenter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts the fromCenter information to a standardized code — convertFromCenter","text":"","code":"original <- c(   \"y\", \"yes\", \"Y\", \"Yes\", \"YES\", \"n\", \"N\", \"No\", \"NO\", \"no\",   \"t\", \"T\", \"True\", \"true\", \"TRUE\", \"f\", \"F\", \"false\", \"False\",   \"FALSE\" ) convertFromCenter(original) #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertRelationships.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","title":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","text":"Part Relations","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertRelationships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","text":"","code":"convertRelationships(kmat, ped, ids = NULL, updateProgress = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertRelationships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","text":"kmat numeric matrix pairwise kinship coefficients. Rows columns named IDs. ped pedigree information datatable format required colnames id, sire, dam. ids character vector IDs NULL analysis restricted. provided, relationships IDs converted relationships. updateProgress function NULL. function defined, called iteration update shiny::Progress object.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertRelationships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","text":"dataframe columns id1, id2, kinship, relation. long-form table pairwise kinships, relationship categories included pair.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertRelationships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts pairwise kinship values to a relationship category descriptor. — convertRelationships","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen, sparse = FALSE) ids <- c(\"A\", \"B\", \"D\", \"E\", \"F\", \"G\", \"I\", \"J\", \"L\", \"M\", \"O\", \"P\") relIds <- convertRelationships(kmat, ped, ids) rel <- convertRelationships(kmat, ped, updateProgress = function() {}) head(rel) #>   id1 id2 kinship               relation #> 1   A   A   0.500                   Self #> 2   A   B   0.000            No Relation #> 3   A   C   0.250       Parent-Offspring #> 4   A   D   0.250       Parent-Offspring #> 5   A   E   0.000            No Relation #> 6   A   F   0.125 Grandparent-Grandchild ped <- nprcgenekeepr::qcPed bkmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen,   sparse = FALSE ) relBIds <- convertRelationships(bkmat, ped, c(\"4LFS70\", \"DD1U77\")) relBIds #>      id1    id2 kinship relation #> 1 4LFS70 4LFS70 0.50000     Self #> 2 4LFS70 DD1U77 0.03125    Other #> 4 DD1U77 DD1U77 0.50000     Self"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"","code":"convertSexCodes(sex, ignoreHerm = TRUE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"sex factor levels: \"M\", \"F\", \"U\". Sex specifier individual. ignoreHerm logical flag indicating hermaphrodites treated unknown sex (\"U\"), default TRUE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"vector factors representing standardized sex codes transformation non-standard codes.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"Standard sex codes {F} {– replacing \"FEMALE\" \"2\"} {M} {– replacing \"MALE\" \"1\"} {H} {– replacing \"HERMAPHRODITE\" \"4\", ignore.herm == FALSE} {U} {– replacing \"HERMAPHRODITE\" \"4\", ignore.herm == TRUE} {U} {– replacing \"UNKNOWN\" \"3\"}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertSexCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts sex indicator for an individual to a standardized codes. — convertSexCodes","text":"","code":"library(nprcgenekeepr) original <- c(   \"m\", \"male\", \"1\", \"MALE\", \"M\", \"F\", \"f\", \"female\",   \"FemAle\", \"U\", \"Unknown\", \"H\", \"hermaphrodite\",   \"U\", \"Unknown\", \"3\", \"4\" ) sexCodes <- convertSexCodes(original) sexCodes #>  [1] M M M M M F F F F U U U U U U U U #> Levels: F M H U"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertStatusCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts status indicators to a Standardized code — convertStatusCodes","title":"Converts status indicators to a Standardized code — convertStatusCodes","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertStatusCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts status indicators to a Standardized code — convertStatusCodes","text":"","code":"convertStatusCodes(status)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertStatusCodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts status indicators to a Standardized code — convertStatusCodes","text":"status character vector NA. Flag indicating individual's status alive, dead, sold, etc.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertStatusCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts status indicators to a Standardized code — convertStatusCodes","text":"factor vector standardized status codes levels: ALIVE, DECEASED, SHIPPED, UNKNOWN.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/convertStatusCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts status indicators to a Standardized code — convertStatusCodes","text":"","code":"library(nprcgenekeepr) original <- c(   \"A\", \"alive\", \"Alive\", \"1\", \"S\", \"Sale\", \"sold\", \"shipped\",   \"D\", \"d\", \"dead\", \"died\", \"deceased\", \"2\",   \"shiped\", \"3\", \"U\", \"4\", \"unknown\", NA,   \"Unknown\", \"H\", \"hermaphrodite\", \"U\", \"Unknown\", \"4\" ) convertStatusCodes(original) #>  [1] ALIVE    ALIVE    ALIVE    ALIVE    SHIPPED  SHIPPED  SHIPPED  SHIPPED  #>  [9] DECEASED DECEASED DECEASED DECEASED DECEASED DECEASED SHIPPED  SHIPPED  #> [17] UNKNOWN  UNKNOWN  UNKNOWN  UNKNOWN  UNKNOWN  <NA>     <NA>     UNKNOWN  #> [25] UNKNOWN  UNKNOWN  #> Levels: ALIVE DECEASED SHIPPED UNKNOWN"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/correctParentSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets sex for animals listed as either a sire or dam. — correctParentSex","title":"Sets sex for animals listed as either a sire or dam. — correctParentSex","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/correctParentSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets sex for animals listed as either a sire or dam. — correctParentSex","text":"","code":"correctParentSex(id, sire, dam, sex, recordStatus, reportErrors = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/correctParentSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets sex for animals listed as either a sire or dam. — correctParentSex","text":"id character vector unique identifier individual sire character vector unique identifier individual's father (NA unknown). dam character vector unique identifier individual's mother (NA unknown). sex factor levels: \"M\", \"F\", \"U\". Sex specifier individual. recordStatus character vector value \"added\" \"original\", indicates whether animal added original animal. reportErrors logical value TRUE scan entire file make list errors found. errors returned list list sublist type error found.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/correctParentSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets sex for animals listed as either a sire or dam. — correctParentSex","text":"factor levels: \"M\", \"F\", \"H\", \"U\" representing sex codes ids provided","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/correctParentSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets sex for animals listed as either a sire or dam. — correctParentSex","text":"","code":"library(nprcgenekeepr) pedOne <- data.frame(   id = c(\"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(NA, \"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(NA, \"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"F\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   recordStatus = rep(\"original\", 8),   stringsAsFactors = FALSE ) pedTwo <- data.frame(   id = c(\"s1\", \"d1\", \"s2\", \"d2\", \"o1\", \"o2\", \"o3\", \"o4\"),   sire = c(NA, \"s0\", \"s4\", NA, \"s1\", \"s1\", \"s2\", \"s2\"),   dam = c(\"d0\", \"d0\", \"d4\", NA, \"d1\", \"d2\", \"d2\", \"d2\"),   sex = c(\"M\", \"M\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\"),   recordStatus = rep(\"original\", 8),   stringsAsFactors = FALSE ) pedOneCorrected <- pedOne pedOneCorrected$sex <- correctParentSex(   pedOne$id, pedOne$sire, pedOne$dam,   pedOne$sex, pedOne$recordStatus ) pedOne[pedOne$sex != pedOneCorrected$sex, ] #>   id sire  dam sex recordStatus #> 1 s1 <NA> <NA>   F     original pedOneCorrected[pedOne$sex != pedOneCorrected$sex, ] #>   id sire  dam sex recordStatus #> 1 s1 <NA> <NA>   M     original  pedTwoCorrected <- pedTwo pedTwoCorrected$sex <- correctParentSex(   pedTwo$id, pedTwo$sire, pedTwo$dam,   pedTwo$sex, pedOne$recordStatus ) pedTwo[pedTwo$sex != pedTwoCorrected$sex, ] #>   id sire dam sex recordStatus #> 2 d1   s0  d0   M     original pedTwoCorrected[pedTwo$sex != pedTwoCorrected$sex, ] #>   id sire dam sex recordStatus #> 2 d1   s0  d0   F     original"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":null,"dir":"Reference","previous_headings":"","what":"Count first-order relatives. — countFirstOrder","title":"Count first-order relatives. — countFirstOrder","text":"Part Relations","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count first-order relatives. — countFirstOrder","text":"","code":"countFirstOrder(ped, ids = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count first-order relatives. — countFirstOrder","text":"ped : Pedigree Standardized pedigree information table. ids character vector IDs NULL IDs analysis restricted. First-order relationships tallied listed IDs consider relationships within subset. NULL, analysis include IDs pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count first-order relatives. — countFirstOrder","text":"dataframe column id, parents, offspring, siblings, total. table first-order relationship counts, broken indicate number parents, offspring, siblings part subset consideration.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count first-order relatives. — countFirstOrder","text":"Tallies number first-order relatives member provided pedigree. 'ids' provided, analysis restricted specified subset.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countFirstOrder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count first-order relatives. — countFirstOrder","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped ids <- c(\"B\", \"D\", \"E\", \"F\", \"G\") countIds <- countFirstOrder(ped, ids) countIds #>   id parents offspring siblings total #> 1  B       0         1        0     1 #> 2  D       1         2        0     3 #> 3  E       0         2        0     2 #> 4  F       2         0        1     3 #> 5  G       2         0        1     3 count <- countFirstOrder(ped, NULL) count #>   id parents offspring siblings total #> 1  A       0         2        0     2 #> 2  B       0         2        0     2 #> 3  C       2         0        1     3 #> 4  D       2         2        1     5 #> 5  E       0         2        0     2 #> 6  F       2         0        1     3 #> 7  G       2         0        1     3"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countKinshipValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","title":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","text":"Counts number occurrences kinship value seen pair individuals series simulated pedigrees.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countKinshipValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","text":"","code":"countKinshipValues(kinshipValues, accummulatedKValueCounts = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countKinshipValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","text":"kinshipValues matrix kinship values simulated pedigrees row represents pair individuals pedigree column represents vector kinship values generated simulated pedigree. accummulatedKValueCounts list object structure returned function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countKinshipValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","text":"list three lists named kIds (kinship IDs), kValues (kinship values), kCounts (kinship counts).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countKinshipValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the number of occurrences of each kinship value seen for a pair of individuals in a series of simulated pedigrees. — countKinshipValues","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_4 <- list(   id = \"J\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_5 <- list(   id = \"K\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_6 <- list(   id = \"N\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) allSimParents <- list(   simParent_1, simParent_2, simParent_3,   simParent_4, simParent_5, simParent_6 )  extractKinship <- function(simKinships, id1, id2, simulation) {   ids <- dimnames(simKinships[[simulation]])[[1]]   simKinships[[simulation]][     seq_along(ids)[ids == id1],     seq_along(ids)[ids == id2]   ] }  extractKValue <- function(kValue, id1, id2, simulation) {   kValue[     kValue$id_1 == id1 & kValue$id_2 == id2,     paste0(\"sim_\", simulation)   ] }  n <- 10 simKinships <- createSimKinships(ped, allSimParents,   pop = ped$id, n = n ) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1:n) #>  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  #>  [9] \"sim_9\"  \"sim_10\" counts <- countKinshipValues(kValues) n <- 10 simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1:n) #>  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  #>  [9] \"sim_9\"  \"sim_10\" accummulatedCounts <- countKinshipValues(kValues, counts)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of loops in a pedigree tree. — countLoops","title":"Count the number of loops in a pedigree tree. — countLoops","text":"Part Pedigree Sampling PedigreeSampling.R 2016-01-28","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of loops in a pedigree tree. — countLoops","text":"","code":"countLoops(loops, ptree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of loops in a pedigree tree. — countLoops","text":"loops named list logical values named element named id ptree. value list element set TRUE id loop pedigree. Loops occur animal's sire dam common ancestor. ptree list lists forming pedigree tree constructed createPedTree(ped) ped standard pedigree dataframe.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of loops in a pedigree tree. — countLoops","text":"list indexed ID pedigree tree (ptree) containing number loops individual.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the number of loops in a pedigree tree. — countLoops","text":"Contains functions build pedigrees sub-samples genotyped individuals. goal sampling reduce number inbreeding loops resulting pedigree, thus, reduce amount time required perform calculations SIMWALK2 similar programs. Uses loops data structure list ancestors individual calculate number loops individual.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/countLoops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of loops in a pedigree tree. — countLoops","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree exampleTree <- createPedTree(examplePedigree) exampleLoops <- findLoops(exampleTree) ## You can count how many animals are in loops with the following code. length(exampleLoops[exampleLoops == TRUE]) #> [1] 145 ## You can count how many loops you have with the following code. nLoops <- countLoops(exampleLoops, exampleTree) sum(unlist(nLoops[nLoops > 0])) #> [1] 258 ## You can list the first 10 sets of ids, sires and dams in loops with ## the following line of code: examplePedigree[exampleLoops == TRUE, c(\"id\", \"sire\", \"dam\")][1:10, ] #>          id   sire    dam #> 2367 MRC4BF 7ZEGLB L1VRM7 #> 2369 SZ05LQ 7ZEGLB 4H5RS1 #> 2705 6FDURN B2CKHA L1VRM7 #> 2725 ZQFCR5 7ZEGLB DCJJYS #> 2744 BWM2Z2 B2CKHA 4Y8JHT #> 2747 FAPEMV 7ZEGLB 2SIP77 #> 2765 EZ2F8A 7ZEGLB DCJJYS #> 2775 X4UZJS B2CKHA L1VRM7 #> 2956 L9SI7Z TYNVJP C1K9WN #> 2969 3SKITJ 3PU50K G5SZDC"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createExampleFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a folder with CSV files containing example pedigrees and ID lists used to demonstrate the package. — createExampleFiles","title":"Creates a folder with CSV files containing example pedigrees and ID lists used to demonstrate the package. — createExampleFiles","text":"Creates folder named ~/tmp/ExamplePedigrees already exist. proceeds write example pedigree CSV file named based name example pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createExampleFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a folder with CSV files containing example pedigrees and ID lists used to demonstrate the package. — createExampleFiles","text":"","code":"createExampleFiles()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createExampleFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a folder with CSV files containing example pedigrees and ID lists used to demonstrate the package. — createExampleFiles","text":"vector names files written.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createExampleFiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a folder with CSV files containing example pedigrees and ID lists used to demonstrate the package. — createExampleFiles","text":"","code":"library(nprcgenekeepr) files <- createExampleFiles() #> Example pedigree files examplePedigree, focalAnimals, lacy1989Ped, pedDuplicateIds, pedFemaleSireMaleDam, pedGood, pedInvalidDates, pedMissingBirth, pedOne, pedSameMaleIsSireAndDam, pedSix, pedWithGenotype, qcBreeders, qcPed, and smallPed will be created in /tmp/RtmpIof9fB/ExamplePedigrees."},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pedigree tree (PedTree). — createPedTree","title":"Create a pedigree tree (PedTree). — createPedTree","text":"PedTree list containing sire dam information individual.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pedigree tree (PedTree). — createPedTree","text":"","code":"createPedTree(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pedigree tree (PedTree). — createPedTree","text":"ped dataframe pedigree demographic information potentially containing columns indicating birth death dates individual. table may also contain dates sale (departure). Optional columns birth, death, departure.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pedigree tree (PedTree). — createPedTree","text":"list named lists forming pedigree tree (PedTree ptree). sublist represents ID pedigree contains sire ID dam ID named elements.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pedigree tree (PedTree). — createPedTree","text":"Part Pedigree Sampling PedigreeSampling.R 2016-01-28 Contains functions build pedigrees sub-samples genotyped individuals. goal sampling reduce number inbreeding loops resulting pedigree, thus, reduce amount time required perform calculations SIMWALK2 similar programs. function uses id, sire, dam columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createPedTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pedigree tree (PedTree). — createPedTree","text":"","code":"library(nprcgenekeepr) exampleTree <- createPedTree(nprcgenekeepr::examplePedigree) exampleLoops <- findLoops(exampleTree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createSimKinships.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","title":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","text":"createSimKinships uses makeSimPed ped object allSimParents object create set kinship matrices used forming Monte Carlo estimates kinship values.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createSimKinships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","text":"","code":"createSimKinships(ped, allSimParents, pop = NULL, n = 10L, verbose = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createSimKinships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","text":"ped pedigree information data.frame format allSimParents list made lists internal list offspring ID, id, vector representative sires (sires), vector representative dams (dams). pop Character vector animal IDs consider population interest. allows provide pedigree ped animals want use simulation defining pop subset interest. default NULL. n integer value number simulated pedigrees generate. verbose logical vector length one indicates whether print animal missing sire dam.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createSimKinships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","text":"list n lists internal list containing kinship matrix simulated pedigrees possible parents animals unknown parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/createSimKinships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a list object of kinship matrices from simulated pedigrees of possible parents for animals with unknown parents — createSimKinships","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s2_1\", \"s2_2\", \"s2_3\"),   dams = c(\"d2_1\", \"d2_2\", \"d2_3\", \"d2_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"s3_1\", \"s3_2\", \"s3_3\"),   dams = c(\"d3_1\", \"d3_2\", \"d3_3\", \"d3_4\") ) allSimParents <- list(simParent_1, simParent_2, simParent_3) pop <- LETTERS[1:7] simKinships <- createSimKinships(ped, allSimParents, pop, n = 10)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/create_wkbk.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an Excel workbook with worksheets. — create_wkbk","title":"Creates an Excel workbook with worksheets. — create_wkbk","text":"Creates Excel workbook worksheets.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/create_wkbk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an Excel workbook with worksheets. — create_wkbk","text":"","code":"create_wkbk(file, df_list, sheetnames, replace = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/create_wkbk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an Excel workbook with worksheets. — create_wkbk","text":"file filename workbook created df_list list data frames added worksheets workbook sheetnames character vector worksheet names replace Specifies file replaced already exist (default FALSE).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/create_wkbk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an Excel workbook with worksheets. — create_wkbk","text":"TRUE Excel file successfully created. FALSE errors occurred.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/create_wkbk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an Excel workbook with worksheets. — create_wkbk","text":"","code":"library(nprcgenekeepr)  make_df_list <- function(size) {   df_list <- list(size)   if (size <= 0) {     return(df_list)   }   for (i in seq_len(size)) {     n <- sample(2:10, 2, replace = TRUE)     df <- data.frame(matrix(data = rnorm(n[1] * n[2]), ncol = n[1]))     df_list[[i]] <- df   }   names(df_list) <- paste0(\"A\", seq_len(size))   df_list } df_list <- make_df_list(3) sheetnames <- names(df_list) if (any(file.exists(file.path(tempdir(), \"example_excel_wkbk.xlsx\")))) {   file.remove(file.path(tempdir(), \"example_excel_wkbk.xlsx\"))   create_wkbk(     file = file.path(tempdir(), \"example_excel_wkbk.xlsx\"),     df_list = df_list,     sheetnames = sheetnames,     replace = FALSE   ) } if (any(file.exists(file.path(tempdir(), \"example_excel_wkbk.xlsx\")))) {   file.remove(file.path(tempdir(), \"example_excel_wkbk.xlsx\")) }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/cumulateSimKinships.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","title":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","text":"cumulateSimKinships creates named list length 4 generated first element mean simulated kinships, second element standard deviation simulated kinships third element minimum value kinships, forth element maximum value kinships.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/cumulateSimKinships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","text":"","code":"cumulateSimKinships(ped, allSimParents, pop = NULL, n = 10L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/cumulateSimKinships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","text":"ped pedigree information data.frame format allSimParents list made lists internal list offspring ID id, vector representative sires (sires), vector representative dams(dams). pop Character vector animal IDs consider population interest. default NULL. n integer value number simulated pedigrees generate.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/cumulateSimKinships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","text":"List object containing meanKinship, sdKinship, minKinship, maxKinship.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/cumulateSimKinships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a list object containing kinship summary statistics using the list object from createSimKinships. — cumulateSimKinships","text":"","code":"ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s2_1\", \"s2_2\", \"s2_3\"),   dams = c(\"d2_1\", \"d2_2\", \"d2_3\", \"d2_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"s3_1\", \"s3_2\", \"s3_3\"),   dams = c(\"d3_1\", \"d3_2\", \"d3_3\", \"d3_4\") ) allSimParents <- list(simParent_1, simParent_2, simParent_3) pop <- LETTERS[1:7] simKinships <- createSimKinships(ped, allSimParents, pop, n = 10)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/dataframe2string.html","id":null,"dir":"Reference","previous_headings":"","what":"dataframe2string converts a data.frame object to a character vector — dataframe2string","title":"dataframe2string converts a data.frame object to a character vector — dataframe2string","text":"Adapted print.data.frame","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/dataframe2string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataframe2string converts a data.frame object to a character vector — dataframe2string","text":"","code":"dataframe2string(object, ..., digits = NULL, addRowNames = TRUE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/dataframe2string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dataframe2string converts a data.frame object to a character vector — dataframe2string","text":"object dataframe ... optional arguments print plot methods. digits minimum number significant digits used: see print.default. addRowNames logical (character vector), indicating whether () row names printed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/dataframe2string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dataframe2string converts a data.frame object to a character vector — dataframe2string","text":"character vector representation data.frame provided function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/dataframe2string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dataframe2string converts a data.frame object to a character vector — dataframe2string","text":"","code":"library(nprcgenekeepr) dataframe2string(nprcgenekeepr::pedOne) #> [1] \" ego_idsi redam_idsexbirth_date\\n1  s1   NA    NA   F 2000-07-18\\n2  d1   NA    NA   M 2003-04-13\\n3  s2   NA    NA   M 2006-06-19\\n4  d2   NA    NA   F 2015-09-16\\n5  o1   s1    d1   F 2015-02-04\\n6  o2   s1    d2   F 2009-03-17\\n7  o3   s2    d2   F 2012-04-11\\n8  o4   s2    d2   M 2006-04-13\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/exampleNprcgenekeeprConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"exampleNprcgenekeeprConfig is a loadable version of the example configuration file example_nprcgenekeepr_config — exampleNprcgenekeeprConfig","title":"exampleNprcgenekeeprConfig is a loadable version of the example configuration file example_nprcgenekeepr_config — exampleNprcgenekeeprConfig","text":"contains working version nprcgenekeepr configuration file created SNPRC. Users LabKey's EHR can adapt systems put home directory. Instructions embedded comments within file.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/exampleNprcgenekeeprConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exampleNprcgenekeeprConfig is a loadable version of the example configuration file example_nprcgenekeepr_config — exampleNprcgenekeeprConfig","text":"","code":"exampleNprcgenekeeprConfig"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/exampleNprcgenekeeprConfig.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"exampleNprcgenekeeprConfig is a loadable version of the example configuration file example_nprcgenekeepr_config — exampleNprcgenekeeprConfig","text":"object class character length 34.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/exampleNprcgenekeeprConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exampleNprcgenekeeprConfig is a loadable version of the example configuration file example_nprcgenekeepr_config — exampleNprcgenekeeprConfig","text":"","code":"library(nprcgenekeepr) data(\"exampleNprcgenekeeprConfig\") head(exampleNprcgenekeeprConfig) #> [1] \"# The formatting in this example file is intentionally sloppy to illustrate\"  #> [2] \"# the esssential features and to point out what has no effect.\"               #> [3] \"# Lines beginning with \\\"#\\\" are ignored.\"                                    #> [4] \"# Empty lines are ignored\"                                                    #> [5] \"#\"                                                                            #> [6] \"# It is critical to have the term being defined immediately before an equals\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/examplePedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"examplePedigree is a pedigree object created by qcStudbook — examplePedigree","title":"examplePedigree is a pedigree object created by qcStudbook — examplePedigree","text":"Represents pedigree ExamplePedigree.csv. id – character column animal IDs sire – male parent animal indicated id column. Unknown sires indicated NA dam – female parent animal indicated id column.Unknown dams indicated NA sex – factor levels: \"M\", \"F\", \"U\". Sex specifier individual. gen – generation number (integers beginning 0 founder generation) animal indicated id column. birth – Date vector birth dates exit – Date vector exit dates age – numerical vector age years ancestry – character vector NA free-form text providing information geographic population origin. origin – character vector NA (optional) indicates name facility individual imported local. status – character vector NA. Flag indicating individual's status alive, dead, sold, etc. Transformed factor {levels: ALIVE, DECEASED, SHIPPED, UNKNOWN}. Vector standardized status codes possible values ALIVE, DECEASED, SHIPPED, UNKNOWN recordStats – character vector value \"added\" \"original\".","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/examplePedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"examplePedigree is a pedigree object created by qcStudbook — examplePedigree","text":"","code":"examplePedigree"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/examplePedigree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"examplePedigree is a pedigree object created by qcStudbook — examplePedigree","text":"object class data.frame 3694 rows 12 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/examplePedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"examplePedigree is a pedigree object created by qcStudbook — examplePedigree","text":"","code":"library(nprcgenekeepr) data(\"examplePedigree\") exampleTree <- createPedTree(examplePedigree) exampleLoops <- findLoops(exampleTree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fillGroupMembersWithSexRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","title":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","text":"sex ratio ratio females males.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fillGroupMembersWithSexRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","text":"","code":"fillGroupMembersWithSexRatio(   candidates,   groupMembers,   grpNum,   kin,   ped,   minAge,   numGp,   sexRatio )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fillGroupMembersWithSexRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","text":"candidates character vector IDs animals available use group. groupMembers list initialized ready receive groups desired sex ratios created within function grpNum list numGp long member integer vector 1:numGp. kin list animals animals related threshold value. ped dataframe Pedigree. contains pedigree information including IDs listed candidates. minAge integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year. numGp integer value indicating number groups formed list IDs. Default 1. sexRatio numeric value indicating ratio females males x 0.5 20 increments 0.5.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fillGroupMembersWithSexRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","text":"list containing one character vector animal IDs sex ratio group close possible ratio specified sexRatio.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fillGroupMembersWithSexRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forms breeding group(s) with an effort to match a specified sex ratio — fillGroupMembersWithSexRatio","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree examplePedigree <- examplePedigree[1:300, ] # Comment out for full example ped <- qcStudbook(examplePedigree,   minParentAge = 2L, reportChanges = FALSE,   reportErrors = FALSE )  kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen, sparse = FALSE) currentGroups <- list(1) currentGroups[[1]] <- examplePedigree$id[1L:3L] candidates <- examplePedigree$id[examplePedigree$status == \"ALIVE\"] threshold <- 0.015625 kin <- getAnimalsWithHighKinship(kmat, ped, threshold, currentGroups,   ignore = list(c(\"F\", \"F\")), minAge = 1L ) # Filtering out candidates related to current group members conflicts <- unique(c(   unlist(kin[unlist(currentGroups)]),   unlist(currentGroups) )) candidates <- setdiff(candidates, conflicts)  kin <- addAnimalsWithNoRelative(kin, candidates)  ignore <- NULL minAge <- 1.0 numGp <- 1L harem <- FALSE sexRatio <- 0.0 withKin <- FALSE groupMembers <- nprcgenekeepr::makeGroupMembers(numGp,   currentGroups,   candidates,   ped,   harem = harem,   minAge = minAge ) groupMembersStart <- groupMembers grpNum <- nprcgenekeepr::makeGrpNum(numGp)  groupMembers <- fillGroupMembersWithSexRatio(   candidates, groupMembers, grpNum, kin, ped, minAge, numGp,   sexRatio = 1.0 )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterKinMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","title":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","text":"Filters kinship matrix include egos listed 'ids'","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterKinMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","text":"","code":"filterKinMatrix(ids, kmat)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterKinMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","text":"ids character vector containing IDs interest. kinship matrix reduced include rows columns. kmat numeric matrix pairwise kinship coefficients. Rows columns named IDs.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterKinMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","text":"numeric matrix reduced kinship matrix named rows columns (row col names 'ids').","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterKinMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a kinship matrix to include only the egos listed in 'ids' — filterKinMatrix","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::qcPed ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen,   sparse = FALSE ) ids <- ped$id[c(189, 192, 194, 195)] ncol(kmat) #> [1] 280 nrow(kmat) #> [1] 280 kmatFiltered <- filterKinMatrix(ids, kmat) ncol(kmatFiltered) #> [1] 4 nrow(kmatFiltered) #> [1] 4"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","title":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","text":"Part Group Formation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","text":"","code":"filterPairs(kin, ped, ignore = list(c(\"F\", \"F\")))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","text":"kin dataframe columns id1, id2, kinship. kinship data reformatted matrix, long-format table. ped Dataframe pedigree information including IDs listed candidates. ignore list containing zero character vectors length 2 indicating sex pairs ignored regard kinship. Defaults list(c(\"F\", \"F\")).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","text":"dataframe representing filtered long-format kinship table.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters kinship values from a long-format kinship table based on the sexes of the two animals involved. — filterPairs","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen) kin <- kinMatrix2LongForm(kmat, removeDups = FALSE) threshold <- 0.1 kin <- filterThreshold(kin, threshold = threshold) ped$sex <- c(\"M\", \"F\", \"M\", \"M\", \"F\", \"F\", \"M\") kinNull <- filterPairs(kin, ped, ignore = NULL) kinMM <- filterPairs(kin, ped, ignore = list(c(\"M\", \"M\"))) ped #>   id sire  dam gen population sex #> 1  A <NA> <NA>   0       TRUE   M #> 2  B <NA> <NA>   0       TRUE   F #> 3  C    A    B   1       TRUE   M #> 4  D    A    B   1       TRUE   M #> 5  E <NA> <NA>   0       TRUE   F #> 6  F    D    E   2       TRUE   F #> 7  G    D    E   2       TRUE   M kin[kin$id1 == \"C\", ] #>    id1 id2 kinship #> 11   C   A   0.250 #> 12   C   B   0.250 #> 13   C   C   0.500 #> 14   C   D   0.250 #> 15   C   F   0.125 #> 16   C   G   0.125 kinMM[kinMM$id1 == \"C\", ] #>   id1 id2 kinship #> 7   C   B   0.250 #> 8   C   F   0.125"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a genetic value report down to only the specified animals — filterReport","title":"Filters a genetic value report down to only the specified animals — filterReport","text":"Filters genetic value report specified animals","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a genetic value report down to only the specified animals — filterReport","text":"","code":"filterReport(ids, rpt)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a genetic value report down to only the specified animals — filterReport","text":"ids character vector animal IDs rpt dataframe required colnames id, gu, zScores, import, totalOffspring, data.frame results genetic value analysis.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters a genetic value report down to only the specified animals — filterReport","text":"copy report specific specified animals.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a genetic value report down to only the specified animals — filterReport","text":"","code":"library(nprcgenekeepr) rpt <- nprcgenekeepr::pedWithGenotypeReport$report rpt1 <- filterReport(c(\"GHH9LB\", \"BD41WW\"), rpt)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterThreshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","title":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","text":"Part Group Formation Filters kinship values less specified threshold long-format table kinship values.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterThreshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","text":"","code":"filterThreshold(kin, threshold = 0.015625)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterThreshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","text":"kin dataframe columns id1, id2, kinship. kinship data reformatted matrix, long-format table. threshold numeric value representing minimum kinship level considered group formation. Pairwise kinship level ignored.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterThreshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","text":"kinship matrix kinship relationships threshold value removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/filterThreshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters kinship to remove rows with kinship values less than the specified threshold — filterThreshold","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen) kin <- kinMatrix2LongForm(kmat, removeDups = FALSE) kinFiltered_0.3 <- filterThreshold(kin, threshold = 0.3) kinFiltered_0.1 <- filterThreshold(kin, threshold = 0.1)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/finalRpt.html","id":null,"dir":"Reference","previous_headings":"","what":"finalRpt is a list object created from the list object rpt prepared by reportGV. It is created inside orderReport. This version is at the state just prior to calling rankSubjects inside orderReport. — finalRpt","title":"finalRpt is a list object created from the list object rpt prepared by reportGV. It is created inside orderReport. This version is at the state just prior to calling rankSubjects inside orderReport. — finalRpt","text":"finalRpt list object created list object rpt prepared reportGV. created inside orderReport. version state just prior calling rankSubjects inside orderReport.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/finalRpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"finalRpt is a list object created from the list object rpt prepared by reportGV. It is created inside orderReport. This version is at the state just prior to calling rankSubjects inside orderReport. — finalRpt","text":"","code":"finalRpt"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/finalRpt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"finalRpt is a list object created from the list object rpt prepared by reportGV. It is created inside orderReport. This version is at the state just prior to calling rankSubjects inside orderReport. — finalRpt","text":"object class list length 3.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/finalRpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"finalRpt is a list object created from the list object rpt prepared by reportGV. It is created inside orderReport. This version is at the state just prior to calling rankSubjects inside orderReport. — finalRpt","text":"","code":"library(nprcgenekeepr) data(\"finalRpt\") finalRpt <- rankSubjects(finalRpt)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findGeneration.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the generation number for each id. — findGeneration","title":"Determines the generation number for each id. — findGeneration","text":"loops entire pedigree one generation time. finds zeroth generation first loop. first time loop sire dam parents. means animals without sire without dam assigned generation 0 become first parental generation. second time loop finds animals sire dam least one parent vector parents defined first time . ids assigned parents previous loop given incremented generation number.Subsequent trips loop repeat done second time animals can added nextGen vector.work pedigree parent IDs ego IDs.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findGeneration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the generation number for each id. — findGeneration","text":"","code":"findGeneration(id, sire, dam)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findGeneration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the generation number for each id. — findGeneration","text":"id character vector unique identifier individual sire character vector unique identifier individual's father (NA unknown). dam character vector unique identifier individual's mother (NA unknown).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findGeneration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the generation number for each id. — findGeneration","text":"integer vector indication generation numbers id, starting 0 individuals lacking IDs parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findGeneration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the generation number for each id. — findGeneration","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped[, c(\"id\", \"sire\", \"dam\")] ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) ped #>   id sire  dam gen #> 1  A <NA> <NA>   0 #> 2  B <NA> <NA>   0 #> 3  C    A    B   1 #> 4  D    A    B   1 #> 5  E <NA> <NA>   0 #> 6  F    D    E   2 #> 7  G    D    E   2"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":null,"dir":"Reference","previous_headings":"","what":"Find loops in a pedigree tree — findLoops","title":"Find loops in a pedigree tree — findLoops","text":"Part Pedigree Sampling PedigreeSampling.R 2016-01-28","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find loops in a pedigree tree — findLoops","text":"","code":"findLoops(ptree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find loops in a pedigree tree — findLoops","text":"ptree list lists forming pedigree tree constructed createPedTree(ped) ped standard pedigree dataframe.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find loops in a pedigree tree — findLoops","text":"named list logical values named element named id ptree. value list element set TRUE id loop pedigree. Loops occur animal's sire dam common ancestor.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find loops in a pedigree tree — findLoops","text":"Contains functions build pedigrees sub-samples genotyped individuals. goal sampling reduce number inbreeding loops resulting pedigree, thus, reduce amount time required perform calculations SIMWALK2 similar programs.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findLoops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find loops in a pedigree tree — findLoops","text":"","code":"data(\"examplePedigree\") exampleTree <- createPedTree(examplePedigree) exampleLoops <- findLoops(exampleTree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findOffspring.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","title":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findOffspring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","text":"","code":"findOffspring(probands, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findOffspring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","text":"probands character vector egos offspring counted returned. ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population). requires complete pedigree information.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findOffspring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","text":"named vector containing offspring counts animal probands. Rownames set IDs probands.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findOffspring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds the number of total offspring for each animal in the provided pedigree. — findOffspring","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) probands <- ped$id[ped$population] totalOffspring <- findOffspring(probands, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findPedigreeNumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the generation number for each id. — findPedigreeNumber","title":"Determines the generation number for each id. — findPedigreeNumber","text":"One Pedigree Curation functions","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findPedigreeNumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the generation number for each id. — findPedigreeNumber","text":"","code":"findPedigreeNumber(id, sire, dam)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findPedigreeNumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the generation number for each id. — findPedigreeNumber","text":"id character vector unique identifier individual sire character vector unique identifier individual's father (NA unknown). dam character vector unique identifier individual's mother (NA unknown).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findPedigreeNumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the generation number for each id. — findPedigreeNumber","text":"Integer vector indicating generation numbers id, starting 0 individuals lacking IDs parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/findPedigreeNumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the generation number for each id. — findPedigreeNumber","text":"","code":"library(nprcgenekeepr) library(stringi) ped <- nprcgenekeepr::lacy1989Ped ped$gen <- NULL ped$population <- NULL ped2 <- ped ped2$id <- stri_c(ped$id, \"2\") ped2$sire <- stri_c(ped$sire, \"2\") ped2$dam <- stri_c(ped$dam, \"2\") ped3 <- ped ped3$id <- stri_c(ped$id, \"3\") ped3$sire <- stri_c(ped$sire, \"3\") ped3$dam <- stri_c(ped$dam, \"3\") ped <- rbind(ped, ped2) ped <- rbind(ped, ped3) ped$pedigree <- findPedigreeNumber(ped$id, ped$sire, ped$dam) ped$pedigree #>  [1] 1 1 1 1 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fixColumnNames.html","id":null,"dir":"Reference","previous_headings":"","what":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","title":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","text":"fixColumnNames changes original column names standardized names.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fixColumnNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","text":"","code":"fixColumnNames(orgCols, errorLst)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fixColumnNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","text":"orgCols character vector ordered list column names found pedigree file. errorLst list object places store various column name changes.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fixColumnNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","text":"list object newColNames errorLst record changes made.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/fixColumnNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fixColumnNames changes original column names and into standardized names. — fixColumnNames","text":"","code":"library(nprcgenekeepr) fixColumnNames(c(\"Sire_ID\", \"EGO\", \"DAM\", \"Id\", \"birth_date\"),   errorLst = getEmptyErrorLst() ) #> $newColNames #> [1] \"sire\"  \"id\"    \"dam\"   \"id\"    \"birth\" #>  #> $errorLst #> $failedDatabaseConnection #> character(0) #>  #> $missingColumns #> character(0) #>  #> $invalidDateRows #> character(0) #>  #> $suspiciousParents #> data frame with 0 columns and 0 rows #>  #> $femaleSires #> character(0) #>  #> $maleDams #> character(0) #>  #> $sireAndDam #> character(0) #>  #> $duplicateIds #> character(0) #>  #> $changedCols #> $changedCols$caseChange #> [1] \"Sire_ID, EGO, DAM, and Id to sire_id, ego, dam, and id\" #>  #> $changedCols$spaceRemoved #> character(0) #>  #> $changedCols$periodRemoved #> character(0) #>  #> $changedCols$underScoreRemoved #> [1] \"sire_id and birth_date to sireid and birthdate\" #>  #> $changedCols$egoToId #> [1] \"ego to id\" #>  #> $changedCols$egoidToId #> character(0) #>  #> $changedCols$sireIdToSire #> [1] \"sireid to sire\" #>  #> $changedCols$damIdToDam #> character(0) #>  #> $changedCols$birthdateToBirth #> [1] \"birthdate to birth\" #>  #> $changedCols$deathdateToDeath #> character(0) #>  #> $changedCols$recordstatusToRecordStatus #> character(0) #>  #> $changedCols$fromcenterToFromCenter #> character(0) #>  #> $changedCols$geographicoriginToGeographicOrigin #> character(0) #>  #>  #> attr(,\"class\") #> [1] \"list\"             \"nprcgenekeeprErr\" #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/focalAnimals.html","id":null,"dir":"Reference","previous_headings":"","what":"focalAnimals is a dataframe with one column (id) containing the of animal Ids from the examplePedigree pedigree. — focalAnimals","title":"focalAnimals is a dataframe with one column (id) containing the of animal Ids from the examplePedigree pedigree. — focalAnimals","text":"can used illustrate identification population interest shown example .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/focalAnimals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"focalAnimals is a dataframe with one column (id) containing the of animal Ids from the examplePedigree pedigree. — focalAnimals","text":"","code":"focalAnimals"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/focalAnimals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"focalAnimals is a dataframe with one column (id) containing the of animal Ids from the examplePedigree pedigree. — focalAnimals","text":"object class data.frame 327 rows 1 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/focalAnimals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"focalAnimals is a dataframe with one column (id) containing the of animal Ids from the examplePedigree pedigree. — focalAnimals","text":"","code":"library(nprcgenekeepr) data(\"focalAnimals\") data(\"examplePedigree\") any(names(examplePedigree) == \"population\") #> [1] FALSE nrow(examplePedigree) #> [1] 3694 examplePedigree <- setPopulation(   ped = examplePedigree,   ids = focalAnimals$id ) any(names(examplePedigree) == \"population\") #> [1] TRUE nrow(examplePedigree) #> [1] 3694 nrow(examplePedigree[examplePedigree$population, ]) #> [1] 327"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene drop simulation based on the provided pedigree information — geneDrop","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"","code":"geneDrop(   ids,   sires,   dams,   gen,   genotype = NULL,   n = 5000L,   updateProgress = NULL )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"ids character vector IDs set animals. sires character vector IDS sires set animals. NA used missing sires. dams character vector IDS dams set animals. NA used missing dams. gen integer vector indicating generation number animal. genotype dataframe containing known genotypes. three columns:  id, first, second. second third columns contain integers indicating observed genotypes. n integer indicating number iterations simulate. Default 5000. updateProgress function NULL. function defined, called iteration update shiny::Progress object.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"data.frame id, parent, V1 ... Vn data.frame providing maternal paternal alleles animal iteration. first two columns provide animal's ID whether allele came sire dam. followed n columns indicating allele iteration.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"gene dropping method Pedigree analysis computer simulation Jean W MacCluer, John L Vandeberg, Oliver Ryder (1986) doi:10.1002/zoo.1430050209 used genetic value calculations. Currently means handling knowing one haplotype. easy add another column handle situations one allele observed known homozygous heterozygous. new fourth column frequency homozygosity used gene dropping algorithm. genotypes using indirection (integer instead character) indicate genes manipulation character strings found take 20-35 times longer perform. Adding additional columns genotype significantly affect time require. Thus, convenient add corresponding haplotype names dataframe using first_name second_name.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/geneDrop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene drop simulation based on the provided pedigree information — geneDrop","text":"","code":"## We usually defined `n` to be >= 5000 library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped allelesNew <- geneDrop(ped$id, ped$sire, ped$dam, ped$gen,   genotype = NULL, n = 50, updateProgress = NULL ) genotype <- data.frame(   id = ped$id,   first_allele = c(     NA, NA, \"A001_B001\", \"A001_B002\",     NA, \"A001_B002\", \"A001_B001\"   ),   second_allele = c(     NA, NA, \"A010_B001\", \"A001_B001\",     NA, NA, NA   ),   stringsAsFactors = FALSE ) pedWithGenotype <- addGenotype(ped, genotype) pedGenotype <- getGVGenotype(pedWithGenotype) allelesNewGen <- geneDrop(ped$id, ped$sire, ped$dam, ped$gen,   genotype = pedGenotype,   n = 5, updateProgress = NULL )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"Part Pedigree Sampling PedigreeSampling.R 2016-01-28","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"","code":"getAncestors(id, ptree)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"id character vector length 1 ID interest ptree list lists forming pedigree tree constructed createPedTree(ped) ped standard pedigree dataframe.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"character vector ancestors individual ID.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"Contains functions build pedigrees sub-samples genotyped individuals. goal sampling reduce number inbreeding loops resulting pedigree, thus, reduce amount time required perform calculations SIMWALK2 similar programs.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAncestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively create a character vector of ancestors for an individual ID. — getAncestors","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::qcPed ped <- qcStudbook(ped, minParentAge = 0) pedTree <- createPedTree(ped) pedLoops <- findLoops(pedTree) ids <- names(pedTree) allAncestors <- list()  for (i in seq_along(ids)) {   id <- ids[[i]]   anc <- getAncestors(id, pedTree)   allAncestors[[id]] <- anc } head(allAncestors) #> $`0DXI08` #> character(0) #>  #> $`0RZ5LL` #> character(0) #>  #> $`1B71NB` #> character(0) #>  #> $`2FU86J` #> character(0) #>  #> $`2HEFGM` #> character(0) #>  #> $`4LFS70` #> character(0) #>  countOfAncestors <- unlist(lapply(allAncestors, length)) idsWithMostAncestors <-   names(allAncestors)[countOfAncestors == max(countOfAncestors)] allAncestors[idsWithMostAncestors] #> $HLI95R #>  [1] \"WMUJC5\" \"H00H7D\" \"ZWBMTP\" \"HRBVOE\" \"RD6KMA\" \"K7QBLH\" \"UL1ZA5\" \"VHXHVH\" #>  [9] \"NY9FEC\" \"ZWBMTP\" \"HRBVOE\" \"RD6KMA\" \"TINMGJ\" \"UKKA3A\" \"6MXDVM\" \"AXDMJM\" #> [17] \"L6D4ZC\" \"5EP5AL\" \"HB9B30\" \"I31V3S\" \"3O7TMT\" \"WORLYK\" \"FHY041\" \"43TUN9\" #> [25] \"5EP5AL\" \"HB9B30\" \"I31V3S\" \"8G72QV\" #>  #> $I9TQ0T #>  [1] \"CN4GMN\" \"QBLTI6\" \"F0YSEE\" \"SA1ZC1\" \"ZXJQQ5\" \"6MIRJI\" \"UKK94T\" \"596J7E\" #>  [9] \"82IE3M\" \"F0YSEE\" \"SA1ZC1\" \"ZXJQQ5\" \"JNWPY2\" \"MQB1AE\" \"ZXJQQ5\" \"BNMWNZ\" #> [17] \"DZ3B9K\" \"CQMWGX\" \"N2XF08\" \"P9GZ32\" \"HKOSVZ\" \"ZQ0DRX\" \"RX08B3\" \"N2XF08\" #> [25] \"P9GZ32\" \"HKOSVZ\" \"1B71NB\" \"BRLQFI\" #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAnimalsWithHighKinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","title":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","text":"Forms list animal Ids animals related ","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAnimalsWithHighKinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","text":"","code":"getAnimalsWithHighKinship(kmat, ped, threshold, currentGroups, ignore, minAge)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAnimalsWithHighKinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","text":"kmat numeric matrix pairwise kinship values. Rows columns named animal IDs. ped dataframe Pedigree. contains pedigree information including IDs listed candidates. threshold numeric value indicating minimum kinship level considered group formation. Pairwise kinship level ignored. currentGroups list character vectors IDs animals currently assigned group. Defaults character(0) assuming groups existent. ignore list character vectors representing sex combinations ignored. provided, vectors list specify pairwise kinship ignored certain sexes. Default ignore pairwise kinship females. minAge integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAnimalsWithHighKinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","text":"list named character vectors name animal Id character vectors made animals sharing kinship value greater equal threshold value.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getAnimalsWithHighKinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forms a list of animal Ids and animals related to them — getAnimalsWithHighKinship","text":"","code":"qcPed <- nprcgenekeepr::qcPed ped <- qcStudbook(qcPed,   minParentAge = 2L, reportChanges = FALSE,   reportErrors = FALSE ) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen, sparse = FALSE) currentGroups <- list(1L) currentGroups[[1L]] <- examplePedigree$id[1L:3L] candidates <- examplePedigree$id[examplePedigree$status == \"ALIVE\"] threshold <- 0.015625 kin <- getAnimalsWithHighKinship(kmat, ped, threshold, currentGroups,   ignore = list(c(\"F\", \"F\")), minAge = 1.0 ) length(kin) # should be 259 #> [1] 259 kin[[\"0DAV0I\"]] # should have 34 IDs #>  [1] \"95U2JO\" \"F50D26\" \"HRBVOE\" \"HRQJQR\" \"RD6KMA\" \"168Q0A\" \"6IPOZK\" \"96W7N8\" #>  [9] \"AD0UE1\" \"DHCUI7\" \"G6P0W4\" \"KVPYE4\" \"NHE3Z8\" \"OTAC9O\" \"ZWBMTP\" \"4UTH8P\" #> [17] \"9FR6Q8\" \"H00H7D\" \"H0UP6R\" \"NPK1YN\" \"NY9FEC\" \"QR5CMP\" \"S8IEHH\" \"T5KNUX\" #> [25] \"ZLPSUH\" \"2YGWN0\" \"HP3E04\" \"MF8X1C\" \"RSROMX\" \"WMUJC5\" \"2IXJ2N\" \"CAST4W\" #> [33] \"JGPN6K\" \"ZC5SCR\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getChangedColsTab.html","id":null,"dir":"Reference","previous_headings":"","what":"getChangedColsTab skeleton of list of errors — getChangedColsTab","title":"getChangedColsTab skeleton of list of errors — getChangedColsTab","text":"getChangedColsTab skeleton list errors","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getChangedColsTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getChangedColsTab skeleton of list of errors — getChangedColsTab","text":"","code":"getChangedColsTab(errorLst, pedigreeFileName)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getChangedColsTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getChangedColsTab skeleton of list of errors — getChangedColsTab","text":"errorLst list errors changes made qcStudbook pedigreeFileName name file provided user Input tab","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getChangedColsTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getChangedColsTab skeleton of list of errors — getChangedColsTab","text":"HTML formatted error list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getConfigFileName.html","id":null,"dir":"Reference","previous_headings":"","what":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","title":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","text":"getConfigFileName returns configuration file name appropriate system.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getConfigFileName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","text":"","code":"getConfigFileName(sysInfo)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getConfigFileName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","text":"sysInfo object returned Sys.info()","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getConfigFileName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","text":"Character vector expected configuration file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getConfigFileName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getConfigFileName returns the configuration file name appropriate for the system. — getConfigFileName","text":"","code":"library(nprcgenekeepr) sysInfo <- Sys.info() config <- getConfigFileName(sysInfo)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getCurrentAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Age in years using the provided birthdate. — getCurrentAge","title":"Age in years using the provided birthdate. — getCurrentAge","text":"Assumes current date calculating age.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getCurrentAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age in years using the provided birthdate. — getCurrentAge","text":"","code":"getCurrentAge(birth)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getCurrentAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age in years using the provided birthdate. — getCurrentAge","text":"birth birth date(s)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getCurrentAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age in years using the provided birthdate. — getCurrentAge","text":"Age years using provided birthdate.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getCurrentAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age in years using the provided birthdate. — getCurrentAge","text":"","code":"library(nprcgenekeepr) age <- getCurrentAge(birth = as.Date(\"06/02/2000\", format = \"%m/%d/%Y\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"Finds date errors columns defined convertDate dates converts date strings Date objects.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"","code":"getDateErrorsAndConvertDatesInPed(sb, errorLst)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"sb dataframe containing table pedigree demographic information. errorLst object placeholders error types found pedigree file qcStudbook functions calls.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"list pedigree, sb, errorLst invalid date rows (errorLst$invalidDateRows)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"errors prevent calculation exit dates, calculated added pedigree otherwise pedigree updated.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDateErrorsAndConvertDatesInPed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts columns of dates in text form to Date object columns — getDateErrorsAndConvertDatesInPed","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::pedInvalidDates ped #>   id sire  dam sex      birth #> 1 s1 <NA> <NA>   M 2000-07-18 #> 2 d1 <NA> <NA>   F 2003-04-13 #> 3 s2 <NA> <NA>   M  205-06-19 #> 4 d2 <NA> <NA>   F 2002-16-22 #> 5 o1   s1   d1   F 2015-02-04 #> 6 o2   s1   d2   F 2009-03-17 #> 7 o3   s2   d2   F 2012-04-11 #> 8 o4   s2   d2   M 2008-04-13 errorLst <- getEmptyErrorLst() colNamesAndErrors <- fixColumnNames(names(ped), errorLst) names(ped) <- colNamesAndErrors$newColNames pedAndErrors <- getDateErrorsAndConvertDatesInPed(ped, errorLst) pedAndErrors$sb #>   id sire  dam sex      birth exit #> 1 s1 <NA> <NA>   M 2000-07-18 <NA> #> 2 d1 <NA> <NA>   F 2003-04-13 <NA> #> 3 s2 <NA> <NA>   M       <NA> <NA> #> 4 d2 <NA> <NA>   F       <NA> <NA> #> 5 o1   s1   d1   F 2015-02-04 <NA> #> 6 o2   s1   d2   F 2009-03-17 <NA> #> 7 o3   s2   d2   F 2012-04-11 <NA> #> 8 o4   s2   d2   M 2008-04-13 <NA> pedAndErrors$errorLst #> $failedDatabaseConnection #> character(0) #>  #> $missingColumns #> character(0) #>  #> $invalidDateRows #> [1] \"3\" \"4\" #>  #> $suspiciousParents #> data frame with 0 columns and 0 rows #>  #> $femaleSires #> character(0) #>  #> $maleDams #> character(0) #>  #> $sireAndDam #> character(0) #>  #> $duplicateIds #> character(0) #>  #> $changedCols #> $changedCols$caseChange #> character(0) #>  #> $changedCols$spaceRemoved #> character(0) #>  #> $changedCols$periodRemoved #> character(0) #>  #> $changedCols$underScoreRemoved #> character(0) #>  #> $changedCols$egoToId #> character(0) #>  #> $changedCols$egoidToId #> character(0) #>  #> $changedCols$sireIdToSire #> character(0) #>  #> $changedCols$damIdToDam #> character(0) #>  #> $changedCols$birthdateToBirth #> character(0) #>  #> $changedCols$deathdateToDeath #> character(0) #>  #> $changedCols$recordstatusToRecordStatus #> character(0) #>  #> $changedCols$fromcenterToFromCenter #> character(0) #>  #> $changedCols$geographicoriginToGeographicOrigin #> character(0) #>  #>  #> attr(,\"class\") #> [1] \"list\"             \"nprcgenekeeprErr\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDatedFilename.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a character vector with an file name having the date prepended. — getDatedFilename","title":"Returns a character vector with an file name having the date prepended. — getDatedFilename","text":"Returns character vector file name date prepended.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDatedFilename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a character vector with an file name having the date prepended. — getDatedFilename","text":"","code":"getDatedFilename(filename)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDatedFilename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a character vector with an file name having the date prepended. — getDatedFilename","text":"filename character vector name use file name","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDatedFilename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a character vector with an file name having the date prepended. — getDatedFilename","text":"character string file name prepended date time YYYY-MM-DD_hh_mm_ss_basename format.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDatedFilename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a character vector with an file name having the date prepended. — getDatedFilename","text":"","code":"library(nprcgenekeepr) getDatedFilename(\"testName\") #> [1] \"2025-07-25_03_17_45.863042_testName\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get demographic data — getDemographics","title":"Get demographic data — getDemographics","text":"thin wrapper around labkey.selectRows().","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get demographic data — getDemographics","text":"","code":"getDemographics(colSelect = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get demographic data — getDemographics","text":"colSelect (optional) vector comma separated strings specifying columns dataset view import","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get demographic data — getDemographics","text":"data.frame containing LabKey demographic data columns specified single parameter provided.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get demographic data — getDemographics","text":"","code":"# \\donttest{ ## Needs a connection to a LabKey server library(nprcgenekeepr) siteInfo <- getSiteInfo() #> Warning: The nprcgenekeepr configuration file is missing. #> It is required when the LabKey API is to be used. #> The file should be named: /home/runner/.nprcgenekeepr_config. colSet <- siteInfo$lkPedColumns source <- \" generated by getDemographics: \" pedSourceDf <- tryCatch(getDemographics(colSelect = colSet),   warning = function(wCond) {     cat(paste0(\"Warning\", source, wCond),       name = \"nprcgenekeepr\"     )     return(NULL)   },   error = function(eCond) {     cat(paste0(\"Error\", source, eCond),       name = \"nprcgenekeepr\"     )     return(NULL)   } ) #> Warning generated by getDemographics: simpleWarning in getSiteInfo(): The nprcgenekeepr configuration file is missing. #> It is required when the LabKey API is to be used. #> The file should be named: /home/runner/.nprcgenekeepr_config. #>  #>  nprcgenekeepr # }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getEmptyErrorLst.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a empty errorLst object — getEmptyErrorLst","title":"Creates a empty errorLst object — getEmptyErrorLst","text":"Creates empty errorLst object","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getEmptyErrorLst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a empty errorLst object — getEmptyErrorLst","text":"","code":"getEmptyErrorLst()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getEmptyErrorLst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a empty errorLst object — getEmptyErrorLst","text":"errorLst object placeholders error types found pedigree file qcStudbook.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getEmptyErrorLst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a empty errorLst object — getEmptyErrorLst","text":"","code":"library(nprcgenekeepr) getEmptyErrorLst() #> $failedDatabaseConnection #> character(0) #>  #> $missingColumns #> character(0) #>  #> $invalidDateRows #> character(0) #>  #> $suspiciousParents #> data frame with 0 columns and 0 rows #>  #> $femaleSires #> character(0) #>  #> $maleDams #> character(0) #>  #> $sireAndDam #> character(0) #>  #> $duplicateIds #> character(0) #>  #> $changedCols #> $changedCols$caseChange #> character(0) #>  #> $changedCols$spaceRemoved #> character(0) #>  #> $changedCols$periodRemoved #> character(0) #>  #> $changedCols$underScoreRemoved #> character(0) #>  #> $changedCols$egoToId #> character(0) #>  #> $changedCols$egoidToId #> character(0) #>  #> $changedCols$sireIdToSire #> character(0) #>  #> $changedCols$damIdToDam #> character(0) #>  #> $changedCols$birthdateToBirth #> character(0) #>  #> $changedCols$deathdateToDeath #> character(0) #>  #> $changedCols$recordstatusToRecordStatus #> character(0) #>  #> $changedCols$fromcenterToFromCenter #> character(0) #>  #> $changedCols$geographicoriginToGeographicOrigin #> character(0) #>  #>  #> attr(,\"class\") #> [1] \"list\"             \"nprcgenekeeprErr\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getErrorTab.html","id":null,"dir":"Reference","previous_headings":"","what":"getErrorTab skeleton of list of errors — getErrorTab","title":"getErrorTab skeleton of list of errors — getErrorTab","text":"getErrorTab skeleton list errors","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getErrorTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getErrorTab skeleton of list of errors — getErrorTab","text":"","code":"getErrorTab(errorLst, pedigreeFileName)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getErrorTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getErrorTab skeleton of list of errors — getErrorTab","text":"errorLst list errors changes made qcStudbook pedigreeFileName name file provided user Input tab","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getErrorTab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getErrorTab skeleton of list of errors — getErrorTab","text":"HTML formatted error list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getFocalAnimalPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pedigree based on list of focal animals — getFocalAnimalPed","title":"Get pedigree based on list of focal animals — getFocalAnimalPed","text":"Get pedigree based list focal animals","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getFocalAnimalPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pedigree based on list of focal animals — getFocalAnimalPed","text":"","code":"getFocalAnimalPed(fileName, sep = \",\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getFocalAnimalPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pedigree based on list of focal animals — getFocalAnimalPed","text":"fileName character vector temporary file path. sep column separator CSV file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getFocalAnimalPed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pedigree based on list of focal animals — getFocalAnimalPed","text":"pedigree file compatible others package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getFocalAnimalPed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pedigree based on list of focal animals — getFocalAnimalPed","text":"","code":"library(nprcgenekeepr) siteInfo <- getSiteInfo(FALSE) source <- \" generated by getFocalAnimalPed: \" tryCatch(getFocalAnimalPed(fileName = \"breeding file.csv\"),   warning = function(wCond) {     cat(paste0(\"Warning\", source, wCond),       name = \"nprcgenekeepr\"     )     return(NULL)   },   error = function(eCond) {     cat(paste0(\"Error\", source, eCond),       name = \"nprcgenekeepr\"     )     return(NULL)   } ) #> Warning generated by getFocalAnimalPed: simpleWarning in file(file, \"rt\"): cannot open file 'breeding file.csv': No such file or directory #>  nprcgenekeepr #> NULL"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVGenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","title":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","text":"Extracts genotype data available otherwise NULL returned.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVGenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","text":"","code":"getGVGenotype(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVGenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","text":"ped pedigree information datatable format","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVGenotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","text":"data.frame columns id, first, second extracted pedigree object (data.frame) containing genotypic data. pedigree object contain genotypic data NULL returned.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVGenotype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Genetic Value Genotype data structure for reportGV function. — getGVGenotype","text":"","code":"## We usually defined `n` to be >= 5000 library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped allelesNew <- geneDrop(ped$id, ped$sire, ped$dam, ped$gen,   genotype = NULL, n = 50, updateProgress = NULL ) genotype <- data.frame(   id = ped$id,   first_allele = c(     NA, NA, \"A001_B001\", \"A001_B002\",     NA, \"A001_B002\", \"A001_B001\"   ),   second_allele = c(     NA, NA, \"A010_B001\", \"A001_B001\",     NA, NA, NA   ),   stringsAsFactors = FALSE ) pedWithGenotype <- addGenotype(ped, genotype) pedGenotype <- getGVGenotype(pedWithGenotype) allelesNewGen <- geneDrop(ped$id, ped$sire, ped$dam, ped$gen,   genotype = pedGenotype,   n = 5, updateProgress = NULL )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVPopulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","title":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","text":"user limited population interest defining pop, information incorporated via ped$population column.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVPopulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","text":"","code":"getGVPopulation(ped, pop)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVPopulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","text":"ped pedigree information datatable format pop character vector animal IDs consider population interest. default NULL.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVPopulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","text":"logical vector corresponding IDs vector animal IDs provided function pop.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGVPopulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the population of interest for the Genetic Value analysis. — getGVPopulation","text":"","code":"## Example from Analysis of Founder Representation in Pedigrees: Founder ## Equivalents and Founder Genome Equivalents. ## Zoo Biology 8:111-123, (1989) by Robert C. Lacy library(nprcgenekeepr) ped <- data.frame(   id = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"),   sire = c(NA, NA, \"A\", \"A\", NA, \"D\", \"D\"),   dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\"),   stringsAsFactors = FALSE ) ped[\"gen\"] <- findGeneration(ped$id, ped$sire, ped$dam) ped$population <- getGVPopulation(ped, NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genotypes from file — getGenotypes","title":"Get genotypes from file — getGenotypes","text":"Get genotypes file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genotypes from file — getGenotypes","text":"","code":"getGenotypes(fileName, sep = \",\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGenotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genotypes from file — getGenotypes","text":"fileName character vector temporary file path. sep column separator CSV file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGenotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genotypes from file — getGenotypes","text":"genotype file compatible others package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getGenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genotypes from file — getGenotypes","text":"","code":"library(nprcgenekeepr) pedCsv <- getGenotypes(fileName = system.file(\"testdata\", \"qcPed.csv\",   package = \"nprcgenekeepr\" ))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIdsWithOneParent.html","id":null,"dir":"Reference","previous_headings":"","what":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","title":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","text":"getIdsWithOneParent extracts IDs animals pedigree without either sire dam","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIdsWithOneParent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","text":"","code":"getIdsWithOneParent(uPed)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIdsWithOneParent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","text":"uPed trimmed pedigree dataframe uninformative founders removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIdsWithOneParent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","text":"Character vector single parents","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIdsWithOneParent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getIdsWithOneParent extracts IDs of animals pedigree without either a sire or a dam — getIdsWithOneParent","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) probands <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- getProbandPedigree(probands, breederPed) nrow(ped) #> [1] 704 p <- removeUninformativeFounders(ped) nrow(p) #> [1] 509 p <- addBackSecondParents(p, ped) nrow(p) #> [1] 690"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIncludeColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","title":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","text":"Part Genetic Value Functions","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIncludeColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","text":"","code":"getIncludeColumns()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIncludeColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","text":"Superset columns can pedigree file.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIncludeColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","text":"Replaces INCLUDE.COLUMNS data statement.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getIncludeColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the superset of columns that can be in a pedigree file. — getIncludeColumns","text":"","code":"getIncludeColumns() #>  [1] \"id\"          \"sex\"         \"age\"         \"birth\"       \"exit\"        #>  [6] \"population\"  \"condition\"   \"origin\"      \"first_name\"  \"second_name\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectAncestors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the direct ancestors of selected animals — getLkDirectAncestors","title":"Get the direct ancestors of selected animals — getLkDirectAncestors","text":"Gets direct ancestors labkey study schema demographics table.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectAncestors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the direct ancestors of selected animals — getLkDirectAncestors","text":"","code":"getLkDirectAncestors(ids)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectAncestors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the direct ancestors of selected animals — getLkDirectAncestors","text":"ids character vector Ids.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectAncestors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the direct ancestors of selected animals — getLkDirectAncestors","text":"data.frame pedigree structure direct ancestors Ids provided.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectAncestors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the direct ancestors of selected animals — getLkDirectAncestors","text":"","code":"# \\donttest{ # Requires LabKey connection library(nprcgenekeepr) ## Have to a vector of focal animals focalAnimals <- c(\"1X2701\", \"1X0101\") suppressWarnings(getLkDirectAncestors(ids = focalAnimals)) #> NULL # }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectRelatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the direct ancestors of selected animals — getLkDirectRelatives","title":"Get the direct ancestors of selected animals — getLkDirectRelatives","text":"Gets direct ancestors labkey study schema demographics table.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectRelatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the direct ancestors of selected animals — getLkDirectRelatives","text":"","code":"getLkDirectRelatives(ids, unrelatedParents = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectRelatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the direct ancestors of selected animals — getLkDirectRelatives","text":"ids character vector Ids. unrelatedParents logical vector FALSE unrelated parents offspring get record ego; TRUE place holder record parent (sire, dam) IDs set NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectRelatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the direct ancestors of selected animals — getLkDirectRelatives","text":"data.frame pedigree structure direct ancestors Ids provided.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLkDirectRelatives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the direct ancestors of selected animals — getLkDirectRelatives","text":"","code":"# \\donttest{ # Requires LabKey connection library(nprcgenekeepr) ## Have to a vector of focal animals focalAnimals <- c(\"1X2701\", \"1X0101\") suppressWarnings(getLkDirectRelatives(ids = focalAnimals)) #> NULL # }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLogo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Logo file name — getLogo","title":"Get Logo file name — getLogo","text":"Get Logo file name","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLogo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Logo file name — getLogo","text":"","code":"getLogo()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLogo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Logo file name — getLogo","text":"character vector length one name logo file used Input tab. warning returned configuration file found.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getLogo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Logo file name — getLogo","text":"","code":"result <- tryCatch(   {     getLogo()   },   warning = function(w) {     print(paste0(       \"Warning in getLogo: \", w, \". File is to be \",       suppressWarnings(getLogo())$file     ))   },   error = function(e) {     print(paste0(\"Error in in getLogo: \", e))   } ) #> [1] \"Warning in getLogo: simpleWarning in getSiteInfo(): The nprcgenekeepr configuration file is missing.\\nIt is required when the LabKey API is to be used.\\nThe file should be named: /home/runner/.nprcgenekeepr_config.\\n\\n. File is to be ../nprcgenekeepr_2_color_logo.jpg\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getOffspring.html","id":null,"dir":"Reference","previous_headings":"","what":"Get offspring to corresponding animal IDs provided — getOffspring","title":"Get offspring to corresponding animal IDs provided — getOffspring","text":"Get offspring corresponding animal IDs provided","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getOffspring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get offspring to corresponding animal IDs provided — getOffspring","text":"","code":"getOffspring(pedSourceDf, ids)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getOffspring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get offspring to corresponding animal IDs provided — getOffspring","text":"pedSourceDf dataframe pedigree structure least columns id, sire, dam. ids character vector animal IDs","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getOffspring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get offspring to corresponding animal IDs provided — getOffspring","text":"character vector containing ancestor IDs IDs provided second argument ids. ancestors combined duplicates removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getOffspring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get offspring to corresponding animal IDs provided — getOffspring","text":"","code":"library(nprcgenekeepr) pedOne <- nprcgenekeepr::pedOne names(pedOne) <- c(\"id\", \"sire\", \"dam\", \"sex\", \"birth\") getOffspring(pedOne, c(\"s1\", \"d2\")) #> [1] \"o1\" \"o2\" \"o3\" \"o4\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getParents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parents to corresponding animal IDs provided — getParents","title":"Get parents to corresponding animal IDs provided — getParents","text":"Get parents corresponding animal IDs provided","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parents to corresponding animal IDs provided — getParents","text":"","code":"getParents(pedSourceDf, ids)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parents to corresponding animal IDs provided — getParents","text":"pedSourceDf dataframe pedigree structure least columns id, sire, dam. ids character vector animal IDs","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parents to corresponding animal IDs provided — getParents","text":"character vector IDs parents provided ID list.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getParents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parents to corresponding animal IDs provided — getParents","text":"","code":"library(nprcgenekeepr) pedOne <- nprcgenekeepr::pedOne names(pedOne) <- c(\"id\", \"sire\", \"dam\", \"sex\", \"birth\") getParents(pedOne, c(\"o1\", \"d4\")) #> [1] \"s1\" \"d1\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedDirectRelatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","title":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","text":"Gets direct ancestors labkey study schema demographics table.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedDirectRelatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","text":"","code":"getPedDirectRelatives(ids, ped, unrelatedParents = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedDirectRelatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","text":"ids character vector Ids. ped pedigree dataframe object used source pedigree information. unrelatedParents logical vector FALSE unrelated parents offspring get record ego; TRUE place holder record parent (sire, dam) IDs set NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedDirectRelatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","text":"data.frame pedigree structure direct ancestors Ids provided.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedDirectRelatives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the direct ancestors of selected animals from supplied pedigree. — getPedDirectRelatives","text":"","code":"library(nprcgenekeepr) ## Have to a vector of focal animals focalAnimals <- c(\"1X2701\", \"1X0101\") suppressWarnings(getLkDirectRelatives(ids = focalAnimals)) #> NULL"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedMaxAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","title":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","text":"Get maximum age live animals pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedMaxAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","text":"","code":"getPedMaxAge(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedMaxAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","text":"ped dataframe pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedMaxAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","text":"Numeric value representing maximum age animals pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedMaxAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the maximum age of live animals in the pedigree. — getPedMaxAge","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree ped <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) getPedMaxAge(ped) #> [1] 38.4"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get pedigree from file — getPedigree","title":"Get pedigree from file — getPedigree","text":"Get pedigree file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get pedigree from file — getPedigree","text":"","code":"getPedigree(fileName, sep = \",\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get pedigree from file — getPedigree","text":"fileName character vector temporary file path. sep column separator CSV file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get pedigree from file — getPedigree","text":"pedigree file compatible others package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get pedigree from file — getPedigree","text":"","code":"library(nprcgenekeepr) ped <- getPedigree(fileName = system.file(\"testdata\", \"qcPed.csv\",   package = \"nprcgenekeepr\" ))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPossibleCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get possible column names for a studbook. — getPossibleCols","title":"Get possible column names for a studbook. — getPossibleCols","text":"Pedigree curation function","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPossibleCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get possible column names for a studbook. — getPossibleCols","text":"","code":"getPossibleCols()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPossibleCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get possible column names for a studbook. — getPossibleCols","text":"character vector possible columns can studbook. possible columns follows: id – character vector unique identifier individual sire – character vector unique identifier individual's father (NA unknown). dam – character vector unique identifier individual's mother (NA unknown). sex – factor (levels: \"M\", \"F\", \"U\") Sex specifier individual gen – integer vector generation number individual birth – Date N (optional) individual's birth date exit – Date NA (optional) individual's exit date (death, departure applicable) ancestry – character vector NA (optional) indicates geographic population individual belongs. age – numeric NA (optional) indicating individual's current age age exit. population – optional logical argument indicating whether id part extant population. origin – character vector NA (optional) indicates name facility individual imported . NA indicates individual imported. status – optional factor indicating status individual levels ALIVE, DEAD, SHIPPED. condition –  character vector NA (optional) indicates restricted status animal. \"Nonrestricted\" animals generally assumed naive. spf – character vector NA (optional) indicating specific pathogen-free status individual. vasxOvx – character vector indicating vasectomy/ovariectomy status animal NA indicates intact animal values indicate surgical alteration. pedNum – integer vector indicating generation numbers id, starting 0 individuals lacking IDs parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPossibleCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get possible column names for a studbook. — getPossibleCols","text":"","code":"library(nprcgenekeepr) getPossibleCols() #>  [1] \"id\"           \"sire\"         \"dam\"          \"sex\"          \"gen\"          #>  [6] \"birth\"        \"exit\"         \"death\"        \"age\"          \"ancestry\"     #> [11] \"population\"   \"origin\"       \"status\"       \"condition\"    \"departure\"    #> [16] \"spf\"          \"vasxOvx\"      \"pedNum\"       \"first\"        \"second\"       #> [21] \"first_name\"   \"second_name\"  \"recordStatus\""},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the lists of portential parents for all individuals born in the colony with one or two unknown parents. — getPotentialParents","text":"","code":"getPotentialParents(ped, minParentAge, maxGestationalPeriod)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the lists of portential parents for all individuals born in the colony with one or two unknown parents. — getPotentialParents","text":"ped pedigree information data.frame format. Pedigree (req. fields: id, sire, dam, gen, population). requires complete pedigree information. minParentAge numeric values set minimum age years animal offspring. Defaults 2 years. check performed animals missing birth dates. maxGestationalPeriod integer value describing days conception birth. used prevent removal sires exit colony date conception birth. Need decide come .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the lists of portential parents for all individuals born in the colony with one or two unknown parents. — getPotentialParents","text":"list list internal list made animal id (id), vector possible sires (sire) vector possible dams (dam). id must defined vectors sire dam can empty.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialSires.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides list of potential sires — getPotentialSires","title":"Provides list of potential sires — getPotentialSires","text":"Provides list potential sires Provides list potential sires","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialSires.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides list of potential sires — getPotentialSires","text":"","code":"getPotentialSires(ids, ped, minAge = 1L)  getPotentialSires(ids, ped, minAge = 1L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialSires.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides list of potential sires — getPotentialSires","text":"ids character vector IDs animals ped dataframe Pedigree. contains pedigree information including IDs listed candidates. minAge integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialSires.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides list of potential sires — getPotentialSires","text":"character vector potential sire Ids character vector potential sire Ids","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPotentialSires.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides list of potential sires — getPotentialSires","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::pedWithGenotype ids <- nprcgenekeepr::qcBreeders getPotentialSires(ids, ped, minAge = 1L) #> [1] \"J3D3N5\" \"VFS0XB\" \"HP3E04\" library(nprcgenekeepr) ped <- nprcgenekeepr::pedWithGenotype ids <- nprcgenekeepr::qcBreeders getPotentialSires(ids, ped, minAge = 1) #> [1] \"J3D3N5\" \"VFS0XB\" \"HP3E04\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getProbandPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","title":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","text":"Filters pedigree ancestors provided group, removing unnecessary individuals studbook. version builds pedigree back time starting group probands. include ancestors probands, even ones might uninformative.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getProbandPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","text":"","code":"getProbandPedigree(probands, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getProbandPedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","text":"probands character vector list animals whose ancestors included final pedigree. ped datatable Pedigree. contains pedigree information. fields sire dam required.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getProbandPedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","text":"reduced pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getProbandPedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets pedigree to ancestors of provided group leaving uninformative ancestors. — getProbandPedigree","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::pedWithGenotype ids <- nprcgenekeepr::qcBreeders sires <- getPotentialSires(ids, ped, minAge = 1) head(getProbandPedigree(probands = sires, ped = ped)) #>         id sire  dam sex gen      birth       exit  age first second first_name #> 91  6EJ6RI <NA> <NA>   F   0 1964-12-02 1989-09-04 24.8    NA     NA       <NA> #> 92  F50D26 <NA> <NA>   F   0 1969-01-21 1992-05-11 23.3    NA     NA       <NA> #> 95  0RZ5LL <NA> <NA>   M   0 1971-01-05 1978-12-28  8.0    NA     NA       <NA> #> 102 RD6KMA <NA> <NA>   F   0 1968-12-13 1992-04-15 23.3 10003  20003     first3 #> 103 HRBVOE <NA> <NA>   M   0 1970-12-04 1993-05-01 22.4 10004  20004     first4 #> 107 ZSDDUI <NA> <NA>   F   0 1969-12-10 2001-03-16 31.3 10008  20008     first8 #>     second_name #> 91         <NA> #> 92         <NA> #> 95         <NA> #> 102     second3 #> 103     second4 #> 107     second8"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the age distribution for the pedigree — getPyramidAgeDist","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"Forms dataframe columns id, birth, sex, age animals status Alive pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"","code":"getPyramidAgeDist(ped = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"ped dataframe pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"pedigree status column added, describes animal ALIVE DECEASED age column added, animal's age years NA calculated. exit column values remapped valid dates NA.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"lubridate package used way modern Gregorian calendar constructed, straightforward arithmetic method produces person’s age, stated according common usage — common usage meaning person’s age always integer increases exactly birthday.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidAgeDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the age distribution for the pedigree — getPyramidAgeDist","text":"","code":"library(nprcgenekeepr) ped <- getPyramidAgeDist()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","title":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","text":"pedigree provided must following columns: sex age. needs augmented allow pedigrees structures provided nprcgenekeepr package.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","text":"","code":"getPyramidPlot(ped = NULL)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","text":"ped dataframe pedigree data.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","text":"return value par(\"mar\") function called.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getPyramidPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a pyramid plot of the pedigree provided. — getPyramidPlot","text":"","code":"library(nprcgenekeepr) data(qcPed) getPyramidPlot(qcPed)  #> 15 15  #> [1] 5.1 4.1 4.1 2.1"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getRequiredCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get required column names for a studbook. — getRequiredCols","title":"Get required column names for a studbook. — getRequiredCols","text":"Pedigree curation function","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getRequiredCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get required column names for a studbook. — getRequiredCols","text":"","code":"getRequiredCols()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getRequiredCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get required column names for a studbook. — getRequiredCols","text":"character vector required columns can studbook. required columns follows: {id} {– character vector unique identifier individual} {sire} {– character vector unique identifier individual's father (NA unknown).} {dam} {– character vector unique identifier individual's mother (NA unknown).} {sex} {– factor {levels: \"M\", \"F\", \"U\"} Sex specifier individual} {birth} {– Date NA (optional) individual's birth date}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getRequiredCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get required column names for a studbook. — getRequiredCols","text":"","code":"library(nprcgenekeepr) getRequiredCols() #> [1] \"id\"    \"sire\"  \"dam\"   \"sex\"   \"birth\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getSiteInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get site information — getSiteInfo","title":"Get site information — getSiteInfo","text":"Get site information","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getSiteInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get site information — getSiteInfo","text":"","code":"getSiteInfo(expectConfigFile = TRUE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getSiteInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get site information — getSiteInfo","text":"expectConfigFile logical parameter set FALSE, configuration looked . Default value TRUE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getSiteInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get site information — getSiteInfo","text":"list site specific information used application. Currently returns following character strings named list. {center}{One \"SNPRC\" \"ONPRC\"} {baseUrl}{center \"SNPRC\", baseUrl one \"https://boomer.txbiomed.local:8080/labkey\" \"https://vger.txbiomed.local:8080/labkey\". allow testing, center \"ONPRC\" baseUrl \"https://boomer.txbiomed.local:8080/labkey\".} {schemaName}{center \"SNPRC\", schemaName \"study\". center \"ONPRC\", schemaName \"study\"} {folderPath} {center \"SNPRC\", folderPath \"/SNPRC\". center \"ONPRC\", folderPath \"/ONPRC\"} {queryName} {\"demographics\"}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getSiteInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get site information — getSiteInfo","text":"","code":"library(nprcgenekeepr) ## default sends warning if configuration file is missing suppressWarnings(getSiteInfo()) #> $center #> [1] \"ONPRC\" #>  #> $baseUrl #> [1] \"https://primeuat.ohsu.edu\" #>  #> $schemaName #> [1] \"study\" #>  #> $folderPath #> [1] \"/ONPRC/EHR\" #>  #> $queryName #> [1] \"demographics\" #>  #> $lkPedColumns #> [1] \"Id\"              \"gender\"          \"birth\"           \"death\"           #> [5] \"lastDayAtCenter\" \"Id/parents/dam\"  \"Id/parents/sire\" #>  #> $mapPedColumns #> [1] \"id\"    \"sex\"   \"birth\" \"death\" \"exit\"  \"dam\"   \"sire\"  #>  #> $sysname #> [1] \"Linux\" #>  #> $release #> [1] \"6.11.0-1018-azure\" #>  #> $version #> [1] \"#18~24.04.1-Ubuntu SMP Sat Jun 28 04:46:03 UTC 2025\" #>  #> $nodename #> [1] \"pkrvmpptgkbjq6m\" #>  #> $machine #> [1] \"x86_64\" #>  #> $login #> [1] \"unknown\" #>  #> $user #> [1] \"runner\" #>  #> $effective_user #> [1] \"runner\" #>  #> $homeDir #> [1] \"/home/runner\" #>  #> $configFile #> [1] \"/home/runner/.nprcgenekeepr_config\" #>  getSiteInfo(expectConfigFile = FALSE) #> $center #> [1] \"ONPRC\" #>  #> $baseUrl #> [1] \"https://primeuat.ohsu.edu\" #>  #> $schemaName #> [1] \"study\" #>  #> $folderPath #> [1] \"/ONPRC/EHR\" #>  #> $queryName #> [1] \"demographics\" #>  #> $lkPedColumns #> [1] \"Id\"              \"gender\"          \"birth\"           \"death\"           #> [5] \"lastDayAtCenter\" \"Id/parents/dam\"  \"Id/parents/sire\" #>  #> $mapPedColumns #> [1] \"id\"    \"sex\"   \"birth\" \"death\" \"exit\"  \"dam\"   \"sire\"  #>  #> $sysname #> [1] \"Linux\" #>  #> $release #> [1] \"6.11.0-1018-azure\" #>  #> $version #> [1] \"#18~24.04.1-Ubuntu SMP Sat Jun 28 04:46:03 UTC 2025\" #>  #> $nodename #> [1] \"pkrvmpptgkbjq6m\" #>  #> $machine #> [1] \"x86_64\" #>  #> $login #> [1] \"unknown\" #>  #> $user #> [1] \"runner\" #>  #> $effective_user #> [1] \"runner\" #>  #> $homeDir #> [1] \"/home/runner\" #>  #> $configFile #> [1] \"/home/runner/.nprcgenekeepr_config\" #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getTokenList.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets tokens from character vector of lines — getTokenList","title":"Gets tokens from character vector of lines — getTokenList","text":"Gets tokens character vector lines","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getTokenList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets tokens from character vector of lines — getTokenList","text":"","code":"getTokenList(lines)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getTokenList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets tokens from character vector of lines — getTokenList","text":"lines character vector text configuration file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getTokenList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets tokens from character vector of lines — getTokenList","text":"First right left space trimmed token first character vector element.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getTokenList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets tokens from character vector of lines — getTokenList","text":"","code":"lines <- c(   \"center = \\\"SNPRC\\\"\",   \" baseUrl = \\\"https://boomer.txbiomed.local:8080/labkey\\\"\",   \" schemaName = \\\"study\\\"\", \" folderPath = \\\"/SNPRC\\\"\",   \" queryName = \\\"demographics\\\"\",   \"lkPedColumns = (\\\"Id\\\", \\\"gender\\\", \\\"birth\\\", \\\"death\\\",\",   \"              \\\"lastDayAtCenter\\\", \\\"dam\\\", \\\"sire\\\")\",   \"mapPedColumns = (\\\"id\\\", \\\"sex\\\", \\\"birth\\\", \\\"death\\\", \",   \"  \\\"exit\\\", \\\"dam\\\", \\\"sire\\\")\" ) lkVec <- c(   \"Id\", \"gender\", \"birth\", \"death\",   \"lastDayAtCenter\", \"dam\", \"sire\" ) mapVec <- c(\"id\", \"sex\", \"birth\", \"death\", \"exit\", \"dam\", \"sire\") tokenList <- getTokenList(lines) params <- tokenList$param tokenVectors <- tokenList$tokenVec"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"getVersion Get the version number of nprcgenekeepr — getVersion","title":"getVersion Get the version number of nprcgenekeepr — getVersion","text":"getVersion Get version number nprcgenekeepr","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getVersion Get the version number of nprcgenekeepr — getVersion","text":"","code":"getVersion(date = TRUE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getVersion Get the version number of nprcgenekeepr — getVersion","text":"date logical value TRUE (default) date YYYYMMDD format within parentheses appended.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getVersion Get the version number of nprcgenekeepr — getVersion","text":"Current Version","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/getVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getVersion Get the version number of nprcgenekeepr — getVersion","text":"","code":"library(nprcgenekeepr) getVersion() #> [1] \"1.0.8 (2025-07-25)\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_and_or_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","title":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","text":"Returns one element character string correct punctuation list made elements character vector argument.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_and_or_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","text":"","code":"get_and_or_list(c_vector, conjunction = \"and\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_and_or_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","text":"c_vector Character vector containing list words put list. conjunction conjunction used connector. usually ' ' `' default.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_and_or_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","text":"character vector length one containing single correctly punctuated character string list element first arguments vector commas two elements last two elements joined selected conjunction.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_and_or_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a one element character string with correct punctuation for a list made up of the elements of the character vector argument. — get_and_or_list","text":"","code":"get_and_or_list(c(\"Bob\", \"John\")) # \"Bob and John\" #> [1] \"Bob and John\" get_and_or_list(c(\"Bob\", \"John\"), \"or\") # \"Bob or John\" #> [1] \"Bob or John\" get_and_or_list(c(\"Bob\", \"John\", \"Sam\", \"Bill\"), \"or\") #> [1] \"Bob, John, Sam, or Bill\" # \"Bob, John, Sam, or Bill\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_elapsed_time_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the elapsed time since start_time. — get_elapsed_time_str","title":"Returns the elapsed time since start_time. — get_elapsed_time_str","text":"Taken github.com/rmsharp/rmsutilityr","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_elapsed_time_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the elapsed time since start_time. — get_elapsed_time_str","text":"","code":"get_elapsed_time_str(start_time)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_elapsed_time_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the elapsed time since start_time. — get_elapsed_time_str","text":"start_time POSIXct time object","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_elapsed_time_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the elapsed time since start_time. — get_elapsed_time_str","text":"character vector describing passage time hours, minutes, seconds.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/get_elapsed_time_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the elapsed time since start_time. — get_elapsed_time_str","text":"","code":"start_time <- proc.time() ## do something elapsed_time <- get_elapsed_time_str(start_time)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":null,"dir":"Reference","previous_headings":"","what":"Add animals to an existing breeding group or forms groups: — groupAddAssign","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"groupAddAssign finds largest group can formed adding unrelated animals set candidate IDs existing group, new group formed set candidate IDs 1 group desired, finds set groups largest average size.function implements maximal independent set (MIS) algorithm find groups unrelated animals. set animals may many different MISs varying sizes, finding largest require traversing possible combinations animals. Since time consuming, algorithm produces random sample possible MISs, selects . size random sample determined specified number iterations.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"","code":"groupAddAssign(   candidates,   kmat,   ped,   currentGroups = list(character(0L)),   threshold = 0.015625,   ignore = list(c(\"F\", \"F\")),   minAge = 1,   iter = 1000L,   numGp = 1L,   harem = FALSE,   sexRatio = 0,   withKin = FALSE,   updateProgress = NULL )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"candidates Character vector IDs animals available use forming groups. animals may present currentGroups included within candidates. kmat Numeric matrix pairwise kinship values. Rows columns named animal IDs. ped Dataframe Pedigree. contains pedigree information including IDs listed candidates. currentGroups List character vectors IDs animals currently assigned groups. Defaults list character(0) sublist element (one group formed) assuming groups prepopulated. threshold Numeric value indicating minimum kinship level considered group formation. Pairwise kinship level ignored. default value 0.015625. ignore List character vectors representing sex combinations ignored. provided, vectors list specify pairwise kinship ignored certain sexes. Default ignore pairwise kinship females. minAge Integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year. iter Integer indicating number times perform random group formation process. Default value 1000 iterations. numGp Integer value indicating number groups formed list IDs. Default 1. harem Logical variable set TRUE, formed groups single male least minAge old. sexRatio Numeric value indicating ratio females males x 0.5 20 increments 0.5. withKin Logical variable set TRUE, kinship matrix group returned along group score. Defaults return kinship matrix. maintains compatibility earlier versions. updateProgress Function NULL. function defined, called iteration update shiny::Progress object.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"list list items group, score optionally groupKin. list item group contains list best group(s) produced simulation. list item score provides score associated group(s). list item groupKin contains subset kinship matrix specific group formed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"Part Group Formation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/groupAddAssign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add animals to an existing breeding group or forms groups: — groupAddAssign","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) probands <- ped$id[ped$population] ped <- trimPedigree(probands, ped,   removeUninformative = FALSE,   addBackParents = FALSE ) geneticValue <- reportGV(ped,   guIter = 50, # should be >= 1000   guThresh = 3,   byID = TRUE,   updateProgress = NULL ) trimmedGeneticValue <- reportGV(trimmedPed,   guIter = 50, # should be >= 1000   guThresh = 3,   byID = TRUE,   updateProgress = NULL ) candidates <- trimmedPed$id[trimmedPed$birth < as.Date(\"2013-01-01\") &   !is.na(trimmedPed$birth) &   is.na(trimmedPed$exit)] haremGrp <- groupAddAssign(   kmat = trimmedGeneticValue[[\"kinship\"]],   ped = trimmedPed,   candidates = candidates,   iter = 10, # should be >= 1000   numGp = 6,   harem = TRUE ) haremGrp$group #> [[1]] #>  [1] \"XX0GYV\" \"YFCIHJ\" \"5EDLL7\" \"ZQXZYB\" \"NK802Y\" \"LVYYNY\" \"1SPLS8\" \"QCA36T\" #>  [9] \"RVHVTZ\" \"7ZNY75\" \"I5CI33\" \"1KJ2MG\" \"2Z4YLY\" \"TEACA3\" \"S3EBGZ\" \"5IAFMK\" #> [17] \"9MG040\" \"967Y3D\" \"50D77I\" \"D4B0RM\" \"5KWNMZ\" \"BCJJKN\" \"3YJIMV\" \"NN3GDQ\" #> [25] \"FB5L3N\" \"N79QXB\" \"LS184H\" \"1SSCJC\" \"CS23RV\" \"K3TNHP\" #>  #> [[2]] #>  [1] \"BTTHAJ\" \"PYPM1W\" \"S222R3\" \"WK89I9\" \"DRXMW4\" \"465ERA\" \"JLFKV8\" \"WLMGS1\" #>  [9] \"PVY432\" \"9P0DES\" \"30J3CQ\" \"QRZK48\" \"0XTZQ1\" \"3GECJJ\" \"DPXEQE\" \"EMV4P6\" #> [17] \"Q7U139\" \"DHNQ1W\" \"WNEAS6\" \"13B1QL\" \"5ERY5Z\" \"0HYZ23\" \"S7IWWA\" \"AIHJ8Z\" #> [25] \"B1WVCN\" \"DCJJYS\" \"N5QBWD\" \"7NE2UT\" \"AZ3L0D\" \"414N7M\" \"GAS52W\" \"W0GUKI\" #>  #> [[3]] #>  [1] \"S63QDN\" \"SHG3RB\" \"GCBYDW\" \"S056D5\" \"XYRDKV\" \"QCENKM\" \"3DTD2N\" \"XFWVVX\" #>  [9] \"YLRNIK\" \"MH88T6\" \"0IIAEN\" \"G8MCV7\" \"5W621W\" \"X694YR\" \"GTLA8R\" \"46ZHKN\" #> [17] \"B134XZ\" \"H2J6UA\" \"J3F6PD\" \"MKY9TK\" \"Q17CG3\" \"TXZUKC\" \"AFZKBS\" \"C18V6I\" #> [25] \"FL170P\" \"1GF3GM\" \"R5AYJK\" \"3SKITJ\" \"MX4J7G\" \"1QVS67\" \"PJ72W1\" \"GIIEUD\" #> [33] \"SH3FB7\" #>  #> [[4]] #>  [1] \"EEGLWY\" \"WJXIH9\" \"5BPBUI\" \"Y6DB6L\" \"ZH3YG1\" \"G58RGY\" \"PBAFJF\" \"Q8U9LB\" #>  [9] \"QQMBT1\" \"WTE53B\" \"BS3RLE\" \"W5WIRP\" \"321LLB\" \"KEA4QG\" \"LYSLPP\" \"D9P18Y\" #> [17] \"S5H1GC\" \"CLSVU6\" \"DKIM6U\" \"IH1KPA\" \"E5Q33K\" \"83HQBN\" \"F7I2ED\" \"AR17R5\" #> [25] \"F45799\" \"99BMJW\" \"W6MDVK\" \"87AQLF\" \"MTCAIG\" \"RJ4JPC\" \"N4NV8B\" \"Z904TJ\" #>  #> [[5]] #>  [1] \"GDXWJ1\" \"I8ABC7\" \"G25E3F\" \"DH9WJQ\" \"CRPXY7\" \"CMMUKU\" \"AP1YLW\" \"PI4VHT\" #>  [9] \"WKY2SZ\" \"TQEMY6\" \"0SGJ12\" \"HE0SCR\" \"7RA57Q\" \"1CIRC9\" \"7B9CA6\" \"FJS7RQ\" #> [17] \"QW2Z3R\" \"YTJ2UL\" \"Y0TCYX\" \"AW400C\" \"ESUIAF\" \"WI38KZ\" \"2F6J3U\" \"XEC0M5\" #> [25] \"QWKFBH\" \"6X6BG9\" \"DI4AHD\" \"B228Q6\" \"SCFSBF\" #>  #> [[6]] #>  [1] \"MEUZ85\" \"ILVQVB\" \"CHK1ZX\" \"ZATMEE\" \"MYUMMX\" \"BKWE4D\" \"ZPS15A\" \"72LYDE\" #>  [9] \"KZY6PD\" \"MFKT9C\" \"92UG4N\" \"1FAZ0K\" \"D33J06\" \"38K2SR\" \"5EDIEE\" \"T3QPW5\" #> [17] \"PU7RSG\" \"M9PVG5\" \"0X4W26\" \"01QRQ4\" \"8JUUJ9\" \"EZ2F8A\" \"EX5K0S\" \"1CZM30\" #> [25] \"1VP3UC\" \"6KWVRI\" \"FG0SFA\" \"TYEWF1\" \"MB6NYQ\" \"6F9FB8\" \"VWC5ZH\" \"AR5U44\" #> [33] \"KX0RJ3\" \"MPIQ4N\" #>  #> [[7]] #> [1] NA #>  sexRatioGrp <- groupAddAssign(   kmat = trimmedGeneticValue[[\"kinship\"]],   ped = trimmedPed,   candidates = candidates,   iter = 10L, # should be >= 1000L   numGp = 6L,   sexRatio = 9.0 ) sexRatioGrp$group #> [[1]] #>  [1] \"D33J06\" \"ZDRSG0\" \"IH1KPA\" \"MYUMMX\" \"WKY2SZ\" \"ZH3YG1\" \"RJ4JPC\" \"RVHVTZ\" #>  [9] \"NK802Y\" \"YFCIHJ\" \"QRZK48\" \"JLFKV8\" \"FJS7RQ\" \"YDRD81\" \"99BMJW\" \"AFZKBS\" #> [17] \"GAS52W\" \"9P0DES\" \"XEC0M5\" \"92UG4N\" \"CHK1ZX\" \"PJ72W1\" \"0SGJ12\" \"TEACA3\" #> [25] \"K7900I\" #>  #> [[2]] #>  [1] \"DH9WJQ\" \"3YHBC1\" \"CRPXY7\" \"T3QPW5\" \"D9P18Y\" \"TXZUKC\" \"WK89I9\" \"5EDIEE\" #>  [9] \"R5AYJK\" \"YTJ2UL\" \"5KWNMZ\" \"YLRNIK\" \"K3TNHP\" \"NHWTJ9\" \"ESUIAF\" \"G58RGY\" #> [17] \"7RA57Q\" \"MB6NYQ\" \"5IAFMK\" \"B228Q6\" \"CLSVU6\" \"46ZHKN\" \"BS3RLE\" \"Q17CG3\" #> [25] \"A98D7P\" \"KEA4QG\" \"TQEMY6\" #>  #> [[3]] #>  [1] \"1SSCJC\" \"Z7NBA2\" \"5BPBUI\" \"LYSLPP\" \"MX4J7G\" \"MTCAIG\" \"KX0RJ3\" \"50D77I\" #>  [9] \"AR5U44\" \"1KJ2MG\" \"1FAZ0K\" \"6X6BG9\" \"N5QBWD\" \"R6HV9A\" \"LS184H\" \"MFKT9C\" #> [17] \"2Z4YLY\" \"KZY6PD\" \"6F9FB8\" \"GCBYDW\" \"5ERY5Z\" \"MPIQ4N\" \"01QRQ4\" \"CS23RV\" #> [25] \"JSAP3H\" \"S222R3\" \"M9PVG5\" #>  #> [[4]] #>  [1] \"HE0SCR\" \"B2YJJP\" \"C18V6I\" \"I5CI33\" \"321LLB\" \"N79QXB\" \"NN3GDQ\" \"G8MCV7\" #>  [9] \"G25E3F\" \"WTE53B\" \"8JUUJ9\" \"B134XZ\" \"Q7U139\" \"A6A1M1\" \"FG0SFA\" \"ILVQVB\" #> [17] \"F7I2ED\" \"414N7M\" \"PU7RSG\" \"1QVS67\" \"X694YR\" \"PBAFJF\" \"E5Q33K\" \"AR17R5\" #> [25] \"IZDV8K\" #>  #> [[5]] #>  [1] \"DI4AHD\" \"XY2CK7\" \"3GECJJ\" \"3SKITJ\" \"DPXEQE\" \"F45799\" \"WLMGS1\" \"QQMBT1\" #>  [9] \"7B9CA6\" \"83HQBN\" \"1SPLS8\" \"ZATMEE\" \"9MG040\" \"LMJWTN\" \"QWKFBH\" \"VWC5ZH\" #> [17] \"FL170P\" \"MKY9TK\" \"Y6DB6L\" \"BKWE4D\" \"LVYYNY\" \"DCJJYS\" \"TYEWF1\" \"S3EBGZ\" #> [25] \"Z25D52\" \"WNEAS6\" \"D4B0RM\" \"AW400C\" \"EZ2F8A\" \"GIIEUD\" \"S056D5\" \"13B1QL\" #> [33] \"SHG3RB\" \"Y0TCYX\" \"3MMZD4\" #>  #> [[6]] #>  [1] \"FB5L3N\" \"5KFB90\" \"WI38KZ\" \"6KWVRI\" \"1CIRC9\" \"38K2SR\" \"SH3FB7\" \"H2J6UA\" #>  [9] \"MH88T6\" \"0X4W26\" \"PVY432\" \"SCFSBF\" \"QCENKM\" \"KZM9RB\" \"30J3CQ\" \"B1WVCN\" #> [17] \"3YJIMV\" \"AP1YLW\" \"1GF3GM\" \"PI4VHT\" \"Q8U9LB\" \"XYRDKV\" \"72LYDE\" \"7NE2UT\" #> [25] \"G2GYST\" #>  #> [[7]] #>   [1] \"HLQ9SY\" \"XFWVVX\" \"B2CKHA\" \"BCJJKN\" \"DKIM6U\" \"GDXWJ1\" \"TR5L57\" \"XC304E\" #>   [9] \"1E8KD1\" \"5PW7WT\" \"AEP5EG\" \"BW10CL\" \"CFD12A\" \"CHJ9D2\" \"EMV4P6\" \"FTVE03\" #>  [17] \"IRFJ09\" \"J3F6PD\" \"KXHGRH\" \"N4NV8B\" \"Q9LWGX\" \"RNQU14\" \"W5WIRP\" \"ZPS15A\" #>  [25] \"09LFE4\" \"1CZM30\" \"2F6J3U\" \"3DTD2N\" \"3QHAFI\" \"55BPSE\" \"5XVTVH\" \"8IG767\" #>  [33] \"9FRCIE\" \"ER464J\" \"FFGPS4\" \"FG6L7S\" \"GTLA8R\" \"P7RBPI\" \"S5H1GC\" \"TBCE78\" #>  [41] \"YI16QD\" \"0HYZ23\" \"1VP3UC\" \"2F1IV1\" \"4LHK19\" \"59NYZE\" \"5EDLL7\" \"5IYDXN\" #>  [49] \"6KLWVC\" \"80F2MI\" \"8TV4MT\" \"AZ4D19\" \"BTTHAJ\" \"CHSCFG\" \"DHNQ1W\" \"DRXMW4\" #>  [57] \"EEGLWY\" \"FX9E4X\" \"G91ZM6\" \"I8ABC7\" \"J1R2EW\" \"LDND6J\" \"LN1DLY\" \"MQT080\" #>  [65] \"NSIC4I\" \"PHB6TE\" \"PYPM1W\" \"QRWYQZ\" \"QW2Z3R\" \"RY1AZM\" \"W6MDVK\" \"WHQLH5\" #>  [73] \"WQUN84\" \"XL658N\" \"XX0GYV\" \"YHHVC7\" \"YP910X\" \"Z904TJ\" \"ZQXZYB\" \"0IIAEN\" #>  [81] \"0V4SAC\" \"0X1RZ9\" \"0XTZQ1\" \"465ERA\" \"55VDSQ\" \"5W621W\" \"653J82\" \"6MEP2C\" #>  [89] \"76DIT4\" \"7ZNY75\" \"80KACX\" \"87AQLF\" \"967Y3D\" \"AIHJ8Z\" \"AZ3L0D\" \"CMMUKU\" #>  [97] \"E3JP0C\" \"EX5K0S\" \"FLIZQI\" \"GM371F\" \"MEUZ85\" \"PA9F3J\" \"QCA36T\" \"S7IWWA\" #> [105] \"SXSVEH\" \"T38W6H\" \"TJN1AD\" \"W0GUKI\" \"WJXIH9\" \"WNKKW3\" \"XZH41H\" \"3P9BX6\" #> [113] \"7D09WH\" \"DGZLV3\" \"S63QDN\" \"ZW2X4N\" #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasBothParents.html","id":null,"dir":"Reference","previous_headings":"","what":"hasBothParents checks to see if both parents are identified. — hasBothParents","title":"hasBothParents checks to see if both parents are identified. — hasBothParents","text":"hasBothParents checks see parents identified.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasBothParents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hasBothParents checks to see if both parents are identified. — hasBothParents","text":"","code":"hasBothParents(id, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasBothParents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hasBothParents checks to see if both parents are identified. — hasBothParents","text":"id character vector IDs examine parents ped pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasBothParents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hasBothParents checks to see if both parents are identified. — hasBothParents","text":"TRUE ID sire dam identified ped.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasBothParents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hasBothParents checks to see if both parents are identified. — hasBothParents","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::pedOne names(ped) <- c(\"id\", \"sire\", \"dam\", \"sex\", \"birth\") hasBothParents(\"o2\", ped) #> [1] TRUE ped$sire[ped$id == \"o2\"] <- NA hasBothParents(\"o2\", ped) #> [1] FALSE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasGenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for genotype data in dataframe — hasGenotype","title":"Check for genotype data in dataframe — hasGenotype","text":"Checks ensure content structure appropriate genotype data dataframe ready geneDrop function already mapped integers placed columns named first second. checks simply based expected columns legal domains.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasGenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for genotype data in dataframe — hasGenotype","text":"","code":"hasGenotype(genotype)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasGenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for genotype data in dataframe — hasGenotype","text":"genotype dataframe genotype data","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasGenotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for genotype data in dataframe — hasGenotype","text":"logical value representing whether data.frame passed contains genotypic data can used. Non-standard column names accepted assessment.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/hasGenotype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for genotype data in dataframe — hasGenotype","text":"","code":"library(nprcgenekeepr) rhesusPedigree <- nprcgenekeepr::rhesusPedigree rhesusGenotypes <- nprcgenekeepr::rhesusGenotypes pedWithGenotypes <- addGenotype(   ped = rhesusPedigree,   genotype = rhesusGenotypes ) hasGenotype(pedWithGenotypes) #> [1] TRUE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/headerDisplayNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert internal column names to display or header names. — headerDisplayNames","title":"Convert internal column names to display or header names. — headerDisplayNames","text":"Converts column names Pedigree Genetic value Report something descriptive.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/headerDisplayNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert internal column names to display or header names. — headerDisplayNames","text":"","code":"headerDisplayNames(headers)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/headerDisplayNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert internal column names to display or header names. — headerDisplayNames","text":"headers character vector column (header) names","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/headerDisplayNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert internal column names to display or header names. — headerDisplayNames","text":"Updated list column names","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/headerDisplayNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert internal column names to display or header names. — headerDisplayNames","text":"","code":"library(nprcgenekeepr) headerDisplayNames(headers = c(\"id\", \"sire\", \"dam\", \"sex\", \"birth\", \"age\")) #> [1] \"Ego ID\"         \"Sire ID\"        \"Dam ID\"         \"Sex\"            #> [5] \"Birth Date\"     \"Age (in years)\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/is_valid_date_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if the string is a valid date. — is_valid_date_str","title":"Returns TRUE if the string is a valid date. — is_valid_date_str","text":"Taken github.com/rmsharp/rmsutilityr","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/is_valid_date_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if the string is a valid date. — is_valid_date_str","text":"","code":"is_valid_date_str(   date_str,   format = \"%d-%m-%Y %H:%M:%S\",   optional = FALSE )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/is_valid_date_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if the string is a valid date. — is_valid_date_str","text":"date_str character vector 0 dates format character vector length one date format optional parameter .Date. Logical value indicating return NA (instead signaling error) format guessing succeed. Defaults FALSE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/is_valid_date_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if the string is a valid date. — is_valid_date_str","text":"logical value NA indicating whether provided character vector represented valid date string.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/is_valid_date_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if the string is a valid date. — is_valid_date_str","text":"","code":"is_valid_date_str(c(   \"13-21-1995\", \"20-13-98\", \"5-28-1014\",   \"1-21-15\", \"2-13-2098\", \"25-28-2014\" ), format = \"%m-%d-%y\") #> [1] FALSE FALSE  TRUE  TRUE  TRUE FALSE"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinMatrix2LongForm.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","title":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","text":"Part Group Formation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinMatrix2LongForm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","text":"","code":"kinMatrix2LongForm(kinMatrix, removeDups = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinMatrix2LongForm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","text":"kinMatrix numerical matrix pairwise kinship values. row column names correspond animal IDs. removeDups logical value indication whether reverse-order ID pairs filtered ? (.e., \"ID1 ID2 kin_val\" \"ID2 ID1 kin_val\" collapsed single entry removeDups = TRUE)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinMatrix2LongForm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","text":"dataframe columns id1, id2, kinship. kinship data reformatted matrix, long-format table.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinMatrix2LongForm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformats a kinship matrix into a long-format table. — kinMatrix2LongForm","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen) reformattedKmat <- kinMatrix2LongForm(kmat, removeDups = FALSE) nrow(reformattedKmat) #> [1] 49 reformattedNoDupsKmat <- kinMatrix2LongForm(kmat, removeDups = TRUE) nrow(reformattedNoDupsKmat) #> [1] 28"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a kinship matrix. — kinship","title":"Generates a kinship matrix. — kinship","text":"{Kinship Matrix Functions} { code kinship function written Terry Therneau Mayo clinic taken website. function part package written S (later ported R) calculating kinship statistics. }","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a kinship matrix. — kinship","text":"","code":"kinship(id, father.id, mother.id, pdepth, sparse = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a kinship matrix. — kinship","text":"id character vector IDs set animals. father.id character vector NA IDs sires set animals. mother.id character vector NA IDs dams set animals. pdepth integer vector indicating generation number animal. sparse logical flag. TRUE, Matrix::Diagnol() used make unit diagonal matrix. FALSE, base::diag() used make unit square matrix.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a kinship matrix. — kinship","text":"kinship square matrix","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a kinship matrix. — kinship","text":"function previously internal call kindepth function order provide parameter pdepth (generation number). version requires generation number calculated elsewhere passed function. rows (cols) founders just 0.5 * identity matrix, processing needed . Parents must processed children, child's kinship just sum kinship's parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a kinship matrix. — kinship","text":"{S-Plus/R Function Page} www.mayo.edu/research/departments-divisions/department-health-sciences-research/division-biomedical-statistics-informatics/software/ @description {s-plus-r-functions} {Downloaded 2014-08-26} page address now (2019-10-03) stale. code S-Plus page stated released GNU General Public License (version 2 later). R version became kinship2 package available CRAN: https://cran.r-project.org/package=kinship2 $Id: kinship.s,v 1.5 2003/01/04 19:07:53 therneau Exp $ {Create kinship matrix, using algorithm K Lange, Mathematical Statistical Methods Genetic Analysis, Springer, 1997, p 71-72.}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a kinship matrix. — kinship","text":"{Terry M. Therneau, Mayo Clinic (mayo.edu), original version} {modified , M Raboin, 2014-09-08 14:44:26}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a kinship matrix. — kinship","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped ped$gen <- findGeneration(ped$id, ped$sire, ped$dam) kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen) ped #>   id sire  dam gen population #> 1  A <NA> <NA>   0       TRUE #> 2  B <NA> <NA>   0       TRUE #> 3  C    A    B   1       TRUE #> 4  D    A    B   1       TRUE #> 5  E <NA> <NA>   0       TRUE #> 6  F    D    E   2       TRUE #> 7  G    D    E   2       TRUE kmat #>       A     B     C    D    E     F     G #> A 0.500 0.000 0.250 0.25 0.00 0.125 0.125 #> B 0.000 0.500 0.250 0.25 0.00 0.125 0.125 #> C 0.250 0.250 0.500 0.25 0.00 0.125 0.125 #> D 0.250 0.250 0.250 0.50 0.00 0.250 0.250 #> E 0.000 0.000 0.000 0.00 0.50 0.250 0.250 #> F 0.125 0.125 0.125 0.25 0.25 0.500 0.250 #> G 0.125 0.125 0.125 0.25 0.25 0.250 0.500"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"kValue matrix one row pair individuals kinship matrix one column kinship matrix. kValue matrix one row pair individuals kinship matrix one column kinship matrix. Thus, kinship matrix 20 individuals kinship matrix 20 rows 20 columns upper lower triangle unique information diagonal values definition 1.0 upper triangle values lower triangle. kValue table 210 rows. calculation number row kValue table  \\(20 + (20 * 19) / 2\\) rows 20 values kinship coeficient matrix diagonal \\((20 * 19) / 2\\) elements one either two triangles.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"","code":"kinshipMatricesToKValues(kinshipMatrices)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"kinshipMatrices list square matrices kinship values. May may named rows columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"Dataframe object columns id_1, id_2, one kinship column kinship matrix kinshipMatricies first two columns contain IDs individuals kinship matrix provided function kinship columms contain corresponding kinship coefficients. contrast kinship matrix. possible pairing IDs appears .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"kValue matrix 1 kinship matrix 20 individuals 210 rows 3 columns. first two columns dedicated ID pairs third column contains pair's kinship coefficient. Thus, number rows kValues matrix \\(n + n(n-1) / 2\\) number columns 2 plus one additional column kinship matrix (\\(2 + n\\)).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatricesToKValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forms kValue matrix from list of kinship matrices — kinshipMatricesToKValues","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_4 <- list(   id = \"J\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_5 <- list(   id = \"K\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_6 <- list(   id = \"N\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) allSimParents <- list(   simParent_1, simParent_2, simParent_3,   simParent_4, simParent_5, simParent_6 )  extractKinship <- function(simKinships, id1, id2, simulation) {   ids <- dimnames(simKinships[[simulation]])[[1]]   simKinships[[simulation]][     seq_along(ids)[ids == id1],     seq_along(ids)[ids == id2]   ] }  extractKValue <- function(kValue, id1, id2, simulation) {   kValue[kValue$id_1 == id1 & kValue$id_2 == id2, paste0(     \"sim_\",     simulation   )] }  n <- 10 simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValue <- kinshipMatricesToKValues(simKinships) extractKValue(kValue, id1 = \"A\", id2 = \"F\", simulation = 1:n) #>  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  #>  [9] \"sim_9\"  \"sim_10\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"kValue matrix one row pair individuals kinship matrix one column kinship matrix. kValue matrix one row pair individuals kinship matrix one column kinship matrix. Thus, kinship matrix 20 individuals kinship matrix 20 rows 20 columns upper lower triangle unique information diagonal values definition 1.0 upper triangle values lower triangle. kValue table 210 rows. calculation number row kValue table  \\(20 + (20 * 19) / 2\\) rows 20 values kinship coeficient matrix diagonal \\((20 * 19) / 2\\) elements one either two triangles.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"","code":"kinshipMatrixToKValues(kinshipMatrix)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"kinshipMatrix square kinship matrix. May may named rows columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"data.frame object columns id_1, id_2, kinship first two columns contain IDs individuals kinship matrix provided function kinship columm contains corresponding kinship coefficient. contrast kinship matrix. possible pairing IDs appears .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"kValue matrix 1 kinship matrix 20 individuals 210 rows 3 columns. first two columns dedicated ID pairs third column contains pair's kinship coefficient. Thus, number rows kValues matrix \\(n + n(n-1) / 2\\) number columns 3.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/kinshipMatrixToKValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts a dataframe with a row for each kinship coeficient in the kinship matrix — kinshipMatrixToKValues","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_4 <- list(   id = \"J\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_5 <- list(   id = \"K\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_6 <- list(   id = \"N\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) allSimParents <- list(   simParent_1, simParent_2, simParent_3,   simParent_4, simParent_5, simParent_6 )  extractKinship <- function(simKinships, id1, id2, simulation) {   ids <- dimnames(simKinships[[simulation]])[[1]]   simKinships[[simulation]][     seq_along(ids)[ids == id1],     seq_along(ids)[ids == id2]   ] }  extractKValue <- function(kValue, id1, id2, simulation) {   kValue[     kValue$id_1 == id1 & kValue$id_2 == id2,     paste0(\"sim_\", simulation)   ] }  simPed <- makeSimPed(ped, allSimParents) simKinship <- kinship(   simPed$id, simPed$sire,   simPed$dam, simPed$gen ) kValues <- kinshipMatrixToKValues(simKinship)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989Ped.html","id":null,"dir":"Reference","previous_headings":"","what":"lacy1989Ped small hypothetical pedigree — lacy1989Ped","title":"lacy1989Ped small hypothetical pedigree — lacy1989Ped","text":"lacy1989Ped small hypothetical pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989Ped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lacy1989Ped small hypothetical pedigree — lacy1989Ped","text":"","code":"lacy1989Ped"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989Ped.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"lacy1989Ped small hypothetical pedigree — lacy1989Ped","text":"object class data.frame 7 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989Ped.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"lacy1989Ped small hypothetical pedigree — lacy1989Ped","text":"lacy1989Ped dataframe containing small hypothetical pedigree three founders four descendants used Robert C. Lacy \"Analysis Founder Representation Pedigrees: Founder Equivalents Founder Genome Equivalents\" Zoo Biology 8:111-123 (1989). founders (, B, E) unknown parentages assumed independent ancestries. id character column animal IDs sire male parent animal indicated id column. Unknown sires indicated NA dam female parent animal indicated id column.Unknown dams indicated NA gen generation number (integers beginning 0 founder generation) animal indicated id column. population logical vector values set TRUE","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989PedAlleles.html","id":null,"dir":"Reference","previous_headings":"","what":"lacy1989PedAlleles is a dataframe produced by geneDrop on lacy1989Ped with 5000 iterations. — lacy1989PedAlleles","title":"lacy1989PedAlleles is a dataframe produced by geneDrop on lacy1989Ped with 5000 iterations. — lacy1989PedAlleles","text":"lacy1989PedAlleles dataframe produced geneDrop lacy1989Ped 5000 iterations.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989PedAlleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lacy1989PedAlleles is a dataframe produced by geneDrop on lacy1989Ped with 5000 iterations. — lacy1989PedAlleles","text":"","code":"lacy1989PedAlleles"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989PedAlleles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"lacy1989PedAlleles is a dataframe produced by geneDrop on lacy1989Ped with 5000 iterations. — lacy1989PedAlleles","text":"object class data.frame 14 rows 5002 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/lacy1989PedAlleles.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"lacy1989PedAlleles is a dataframe produced by geneDrop on lacy1989Ped with 5000 iterations. — lacy1989PedAlleles","text":"lacy1989Ped dataframe containing small example pedigree used Robert C. Lacy \"Analysis Founder Representation Pedigrees: Founder Equivalents Founder Genome Equivalents\" Zoo Biology 8:111-123 (1989).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a CEPH-style pedigree for each id — makeCEPH","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"Part Relations","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"","code":"makeCEPH(id, sire, dam)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"id character vector unique identifier individual sire character vector unique identifier individual's father (NA unknown). dam character vector unique identifier individual's mother (NA unknown).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"List lists: {fields: id, {subfields: parents, pgp, mgp}}. Pedigree information converted CEPH-style list. top level list elements IDs id. ID list three elements: parents (sire, dam), paternal grandparents (pgp: sire, dam), maternal grandparents (mgp: sire, dam).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"Creates CEPH-style pedigree id, consisting three generations: id, parents, grandparents. Inserts NA unknown pedigree members. Calculates first-order relationships pedigree, convert pairwise kinships appropriate relationship category. Relationships categories: ID pair, find CEPH-style pedigree compare {one parent } {— Designate relationship parent-offspring} {Else parents shared} {— Designate relationship full-siblings} {Else one parent shared} {— Designate relationship half-siblings} {Else one grandparent } {— Designate relationship grandparent-grandchild} {Else grand parents shared} {— Designate relationship cousin} {Else least one grand parent shared} {— Designate relationship cousin - } {Else parents one grandparents } {— Designate relationship full-avuncular} {Else single parent one grandparent } {— Designate relationship avuncular - } {Else kinship greater 0, pair fall categories} {— Designate relationship } {Else} {— Designate relationships relation.}","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeCEPH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a CEPH-style pedigree for each id — makeCEPH","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::lacy1989Ped pedCEPH <- makeCEPH(ped$id, ped$sire, ped$dam) head(ped) #>   id sire  dam gen population #> 1  A <NA> <NA>   0       TRUE #> 2  B <NA> <NA>   0       TRUE #> 3  C    A    B   1       TRUE #> 4  D    A    B   1       TRUE #> 5  E <NA> <NA>   0       TRUE #> 6  F    D    E   2       TRUE head(pedCEPH$F) #> $parents #> [1] \"D\" \"E\" #>  #> $pgp #> [1] \"A\" \"B\" #>  #> $mgp #> [1] NA NA #>"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeExamplePedigreeFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","title":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","text":"Uses examplePedigree data structure create example data file","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeExamplePedigreeFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","text":"","code":"makeExamplePedigreeFile(   file = file.path(tempdir(), \"examplePedigree.csv\"),   fileType = \"csv\" )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeExamplePedigreeFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","text":"file character vector length one providing file name fileType character vector length one possible values \"txt\", \"csv\", \"xlsx\". Default value \"csv\".","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeExamplePedigreeFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","text":"Full path name file saved.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeExamplePedigreeFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write copy of nprcgenekeepr::examplePedigree into a file — makeExamplePedigreeFile","text":"","code":"library(nprcgenekeepr) pedigreeFile <- makeExamplePedigreeFile()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGroupMembers.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to make the initial groupMembers animal list — makeGroupMembers","title":"Convenience function to make the initial groupMembers animal list — makeGroupMembers","text":"Convenience function make initial groupMembers animal list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGroupMembers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to make the initial groupMembers animal list — makeGroupMembers","text":"","code":"makeGroupMembers(numGp, currentGroups, candidates, ped, harem, minAge)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGroupMembers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to make the initial groupMembers animal list — makeGroupMembers","text":"numGp integer value indicating number groups formed list IDs. Default 1. currentGroups list character vectors IDs animals currently assigned group. Defaults character(0) assuming groups existent. candidates character vector IDs animals available use group. ped dataframe Pedigree. contains pedigree information including IDs listed candidates. harem logical variable set TRUE, formed groups single male least minAge old. minAge integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGroupMembers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to make the initial groupMembers animal list — makeGroupMembers","text":"Initial groupMembers list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGrpNum.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to make the initial grpNum list — makeGrpNum","title":"Convenience function to make the initial grpNum list — makeGrpNum","text":"Convenience function make initial grpNum list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGrpNum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to make the initial grpNum list — makeGrpNum","text":"","code":"makeGrpNum(numGp)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGrpNum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to make the initial grpNum list — makeGrpNum","text":"numGp integer value indicating number groups formed list IDs. Default 1.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeGrpNum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to make the initial grpNum list — makeGrpNum","text":"Initial grpNum list","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeRelationClassesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make relation classes table from kin dataframe. — makeRelationClassesTable","title":"Make relation classes table from kin dataframe. — makeRelationClassesTable","text":"Relations","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeRelationClassesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make relation classes table from kin dataframe. — makeRelationClassesTable","text":"","code":"makeRelationClassesTable(kin)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeRelationClassesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make relation classes table from kin dataframe. — makeRelationClassesTable","text":"kin dataframe columns id1, id2, kinship, relation. long-form table pairwise kinships, relationship categories included pair.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeRelationClassesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make relation classes table from kin dataframe. — makeRelationClassesTable","text":"data.frame number instances following relationship classes: Parent-Offspring, Full-Siblings, Half-Siblings, Grandparent-Grandchild, Full-Cousins, Cousin - , Full-Avuncular, Avuncular - , , Relation.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeRelationClassesTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make relation classes table from kin dataframe. — makeRelationClassesTable","text":"","code":"library(nprcgenekeepr) suppressMessages(library(dplyr))  qcPed <- nprcgenekeepr::qcPed qcPed <- qcPed[1:50, ] # Comment out for full example bkmat <- kinship(qcPed$id, qcPed$sire, qcPed$dam, qcPed$gen,   sparse = FALSE ) kin <- convertRelationships(bkmat, qcPed) relClasses <- makeRelationClassesTable(kin) relClasses$`Relationship Class` <-   as.character(relClasses$`Relationship Class`) relClassTbl <- kin[!kin$relation == \"Self\", ] %>%   group_by(relation) %>%   summarise(count = n()) relClassTbl #> # A tibble: 1 × 2 #>   relation    count #>   <chr>       <int> #> 1 No Relation  1225"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeSimPed.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a simulated pedigree using representative sires and dams — makeSimPed","title":"Makes a simulated pedigree using representative sires and dams — makeSimPed","text":"id allSimParents one unknown parents unknown parent replaced random sire dam needed corresponding parent vector (sires dams).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeSimPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a simulated pedigree using representative sires and dams — makeSimPed","text":"","code":"makeSimPed(ped, allSimParents, verbose = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeSimPed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a simulated pedigree using representative sires and dams — makeSimPed","text":"ped pedigree information data.frame format allSimParents list made lists internal list offspring ID id, vector representative sires (sires), vector representative dams (dams). verbose logical vector length one indicates whether print animal missing sire dam.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeSimPed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a simulated pedigree using representative sires and dams — makeSimPed","text":"simulated pedigree data.frame format id, sire, dam.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/makeSimPed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Makes a simulated pedigree using representative sires and dams — makeSimPed","text":"algorithm assigns parents randomly lists possible sires dams prevent dam selected within breeding period. probably introducing large error, ideal.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/mapIdsToObfuscated.html","id":null,"dir":"Reference","previous_headings":"","what":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","title":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","text":"robust fails IDs found within map.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/mapIdsToObfuscated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","text":"","code":"mapIdsToObfuscated(ids, map)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/mapIdsToObfuscated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","text":"ids character vector original IDs map named character vector values obfuscated IDs vector names (names(map)) vector original names.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/mapIdsToObfuscated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","text":"dataframe vector original IDs replaced obfuscated counterparts.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/mapIdsToObfuscated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map IDs to Obfuscated IDs — mapIdsToObfuscated","text":"","code":"set_seed(1) ped <- qcStudbook(nprcgenekeepr::pedSix) obfuscated <- obfuscatePed(ped, map = TRUE) someIds <- c(\"s1\", \"s2\", \"d1\", \"d1\") mapIdsToObfuscated(someIds, obfuscated$map) #> [1] \"JNAN5L\" \"0ZR5QI\" \"2D0P3X\" \"2D0P3X\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"Part Genetic Value Analysis","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"","code":"meanKinship(kmat)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"kmat numeric matrix pairwise kinship coefficients. Animal IDs row column names.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"named numeric vector average kinship coefficients animal ID. Elements named IDs columns kmat.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"mean kinship animal $$MK_i = \\Sigma f_ij / N$$, summation animals, j, including kinship animal .","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/meanKinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the mean kinship for each animal in a kinship matrix — meanKinship","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::qcPed kmat <- kinship(ped$id, ped$sire, ped$dam, ped$gen) head(meanKinship(kmat)) #>      4LFS70      81KHJN      IU065S      H7R5WN      YAYD44      BRLQFI  #> 0.003459821 0.003348214 0.003459821 0.005468750 0.003459821 0.003125000"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/nprcgenekeepr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Management Functions — nprcgenekeepr-package","title":"Genetic Management Functions — nprcgenekeepr-package","text":"Primary Data Structure — Pedigree Contains studbook information number individuals. ASSUME: IDs listed sire dam columns must row entry id column  Provides genetic tools colony management derivation work Amanda Vinson Michael J Raboin (2015) https://pmc.ncbi.nlm.nih.gov/articles/PMC4671785/ \"Practical Approach Designing Breeding Groups Maximize Genetic Diversity Large Colony Captive Rhesus Macaques ('Macaca' 'mulatto')\". provides 'Shiny' application exposed API. application supports five groups functions: (1) Quality control studbooks contained text files 'Excel' workbooks pedigrees within 'LabKey' Electronic Health Records (EHR); (2) Creation pedigrees list animals using 'LabKey' EHR integration; (3) Creation display age sex pyramid plot living animals within designated pedigree; (4) Generation genetic value analysis reports; (5) Creation potential breeding groups without proscribed sex ratios defined maximum kinships.","code":""},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/nprcgenekeepr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genetic Management Functions — nprcgenekeepr-package","text":"Maintainer: R. Mark Sharp rmsharp@.com (ORCID) [copyright holder, data contributor] Authors: Michael Raboin Terry Therneau Amanda Vinson [data contributor] Matthew Schultz (ORCID) contributors: Southwest National Primate Research Center NIH grant P51 RR13986 [funder] Oregon National Primate Research Center grant P51 OD011092 [funder]","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/nprcgenekeepr.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Tools for Colony Management — nprcgenekeepr","title":"Genetic Tools for Colony Management — nprcgenekeepr","text":"Genetic Tools Colony Management","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateDate.html","id":null,"dir":"Reference","previous_headings":"","what":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","title":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","text":"Get base_date add random number days taken uniform distribution bounded -max_delta max_delta. Insure resulting date least large min_date.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","text":"","code":"obfuscateDate(baseDate, minDate, maxDelta = 30L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","text":"baseDate list Date objects dates obfuscated minDate list object Date objects lower bound resulting obfuscated dates maxDelta integer vector used create min max arguments runif (runif(n, min = 0, max = 1))","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","text":"vector dates obfuscated.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obfucateDate adds a random number of days bounded by plus and minus max delta — obfuscateDate","text":"","code":"library(nprcgenekeepr) someDates <- rep(   as.Date(c(\"2009-2-16\", \"2016-2-16\"), format = \"%Y-%m-%d\"),   10 ) minBirthDate <- rep(as.Date(\"2009-2-16\", format = \"%Y-%m-%d\"), 20) obfuscateDate(someDates, minBirthDate, 30L) #>  [1] \"2009-03-13\" \"2016-02-21\" \"2009-03-16\" \"2016-02-29\" \"2009-02-28\" #>  [6] \"2016-01-23\" \"2009-02-24\" \"2016-03-16\" \"2009-03-03\" \"2016-02-13\" #> [11] \"2009-02-16\" \"2016-01-29\" \"2009-02-21\" \"2016-02-20\" \"2009-02-24\" #> [16] \"2016-03-12\" \"2009-02-21\" \"2016-02-19\" \"2009-02-17\" \"2016-03-16\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateId.html","id":null,"dir":"Reference","previous_headings":"","what":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","title":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","text":"ID aliases pseudorandom sequences alphanumeric upper case characters letter \"O\" included readability.. User option providing character vector aliases avoid using.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","text":"","code":"obfuscateId(id, size = 10L, existingIds = character(0L))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","text":"id character vector IDs obfuscated (alias creation). size character length alias existingIds character vector existing aliases avoid duplication.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","text":"named character vector aliases name original ID value.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscateId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obfucateId creates a vector of ID aliases of specified length — obfuscateId","text":"","code":"library(nprcgenekeepr) integerIds <- 1L:10L obfuscateId(integerIds, size = 4L) #>      1      2      3      4      5      6      7      8      9     10  #> \"YWIJ\" \"0QG1\" \"D5WU\" \"LQSG\" \"TCJH\" \"J6Q2\" \"5PCL\" \"0LX4\" \"4NN6\" \"X0W6\"  characterIds <- paste0(paste0(sample(LETTERS, 1L, replace = FALSE)), 1L:10L) obfuscateId(characterIds, size = 4L) #>     H1     H2     H3     H4     H5     H6     H7     H8     H9    H10  #> \"G6S5\" \"G108\" \"7JVD\" \"4L2J\" \"HTJG\" \"TUEI\" \"08D1\" \"83KX\" \"88LJ\" \"FLS7\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscatePed.html","id":null,"dir":"Reference","previous_headings":"","what":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","title":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","text":"User provides pedigree object (ped), number characters used alias IDs (size), maximum number days birthdate can shifted (maxDelta).","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscatePed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","text":"","code":"obfuscatePed(   ped,   size = 6L,   maxDelta = 30L,   existingIds = character(0L),   map = FALSE )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscatePed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","text":"ped pedigree object size integer value indicating number characters alias IDs maxDelta integer value indicating maximum number days birthdate can shifted existingIds character vector existing aliases avoid duplication. map logical TRUE list object returned new pedigree named character vector names original IDs values new alias values. Defaults FALSE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscatePed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","text":"obfuscated pedigree","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/obfuscatePed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obfuscatePed takes a pedigree object and creates aliases for all IDs and adjusts all date within a specified amount. — obfuscatePed","text":"","code":"library(nprcgenekeepr) ped <- qcStudbook(nprcgenekeepr::pedGood) obfuscatedPed <- obfuscatePed(ped) ped #>   id sire  dam sex gen      birth exit  age recordStatus #> 1 d1 <NA> <NA>   F   0 2003-04-13 <NA> 22.3     original #> 2 d2 <NA> <NA>   F   0 2002-06-22 <NA> 23.1     original #> 3 s1 <NA> <NA>   M   0 2000-07-18 <NA> 25.0     original #> 4 s2 <NA> <NA>   M   0 2005-06-19 <NA> 20.1     original #> 5 o1   s1   d1   F   1 2015-02-04 <NA> 10.5     original #> 6 o2   s1   d2   F   1 2009-03-17 <NA> 16.4     original #> 7 o3   s2   d2   F   1 2012-04-11 <NA> 13.3     original #> 8 o4   s2   d2   M   1 2008-04-13 <NA> 17.3     original obfuscatedPed #>       id   sire    dam sex gen      birth exit  age recordStatus #> 1 JBP4ME   <NA>   <NA>   F   0 2003-03-31 <NA> 22.3     original #> 2 NXNZZU   <NA>   <NA>   F   0 2002-06-03 <NA> 23.1     original #> 3 QQKV6E   <NA>   <NA>   M   0 2000-07-03 <NA> 25.1     original #> 4 PHQER8   <NA>   <NA>   M   0 2005-05-30 <NA> 20.2     original #> 5 17RWRD QQKV6E JBP4ME   F   1 2015-02-02 <NA> 10.5     original #> 6 ISN7TL QQKV6E NXNZZU   F   1 2009-04-02 <NA> 16.3     original #> 7 J2ZFC1 PHQER8 NXNZZU   F   1 2012-03-13 <NA> 13.4     original #> 8 WFCDNF PHQER8 NXNZZU   M   1 2008-04-14 <NA> 17.3     original"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/offspringCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","title":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","text":"Optionally find number part population interest.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/offspringCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","text":"","code":"offspringCounts(probands, ped, considerPop = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/offspringCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","text":"probands character vector egos offspring counted. ped pedigree information datatable format.  Pedigree (req. fields: id, sire, dam, gen, population). complete pedigree. considerPop logical value indication whether number offspring part focal population counted? Default FALSE.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/offspringCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","text":"dataframe least id totalOffspring required livingOffspring optional.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/offspringCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds the total number of offspring for each animal in the pedigree — offspringCounts","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) probands <- ped$id[ped$population] counts <- offspringCounts(probands, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/ped1Alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"ped1Alleles is a dataframe created by the geneDrop function — ped1Alleles","title":"ped1Alleles is a dataframe created by the geneDrop function — ped1Alleles","text":"ped1Alleles dataframe created geneDrop function","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/ped1Alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ped1Alleles is a dataframe created by the geneDrop function — ped1Alleles","text":"","code":"ped1Alleles"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/ped1Alleles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ped1Alleles is a dataframe created by the geneDrop function — ped1Alleles","text":"dataframe 554 rows 6 variables V1 alleles assigned parents animals identified id column iteration 1 gene dropping performed geneDrop. V2 alleles assigned parents animals identified id column iteration 1 gene dropping performed geneDrop. V3 alleles assigned parents animals identified id column iteration 1 gene dropping performed geneDrop. V4 alleles assigned parents animals identified id column iteration 1 gene dropping performed geneDrop. id character vector animal IDs provided gene dropping function geneDrop. parent parent type (\"sire\" \"dam\") parent supplied alleles assigned 4 gene dropping iterations performed geneDrop.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/ped1Alleles.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ped1Alleles is a dataframe created by the geneDrop function — ped1Alleles","text":"example baboon pedigree file provided Deborah Newman, Southwest National Primate Center.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedDuplicateIds.html","id":null,"dir":"Reference","previous_headings":"","what":"pedDuplicateIds is a dataframe with 9 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with a duplicated record. — pedDuplicateIds","title":"pedDuplicateIds is a dataframe with 9 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with a duplicated record. — pedDuplicateIds","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedDuplicateIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedDuplicateIds is a dataframe with 9 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with a duplicated record. — pedDuplicateIds","text":"","code":"pedDuplicateIds"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedDuplicateIds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedDuplicateIds is a dataframe with 9 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with a duplicated record. — pedDuplicateIds","text":"object class data.frame 9 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedFemaleSireMaleDam.html","id":null,"dir":"Reference","previous_headings":"","what":"pedFemaleSireMaleDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with the errors of having a sire labeled as female and a dam labeled as male. — pedFemaleSireMaleDam","title":"pedFemaleSireMaleDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with the errors of having a sire labeled as female and a dam labeled as male. — pedFemaleSireMaleDam","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedFemaleSireMaleDam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedFemaleSireMaleDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with the errors of having a sire labeled as female and a dam labeled as male. — pedFemaleSireMaleDam","text":"","code":"pedFemaleSireMaleDam"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedFemaleSireMaleDam.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedFemaleSireMaleDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with the errors of having a sire labeled as female and a dam labeled as male. — pedFemaleSireMaleDam","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedGood.html","id":null,"dir":"Reference","previous_headings":"","what":"pedGood is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedGood","title":"pedGood is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedGood","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedGood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedGood is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedGood","text":"","code":"pedGood"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedGood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedGood is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedGood","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedInvalidDates.html","id":null,"dir":"Reference","previous_headings":"","what":"pedInvalidDates is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with values in the birth_date column that are not valid dates. — pedInvalidDates","title":"pedInvalidDates is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with values in the birth_date column that are not valid dates. — pedInvalidDates","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedInvalidDates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedInvalidDates is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with values in the birth_date column that are not valid dates. — pedInvalidDates","text":"","code":"pedInvalidDates"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedInvalidDates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedInvalidDates is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with values in the birth_date column that are not valid dates. — pedInvalidDates","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedMissingBirth.html","id":null,"dir":"Reference","previous_headings":"","what":"pedMissingBirth is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedMissingBirth","title":"pedMissingBirth is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedMissingBirth","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedMissingBirth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedMissingBirth is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedMissingBirth","text":"","code":"pedMissingBirth"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedMissingBirth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedMissingBirth is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedMissingBirth","text":"object class data.frame 8 rows 4 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedOne.html","id":null,"dir":"Reference","previous_headings":"","what":"pedOne is a loadable version of a pedigree file fragment used for testing and demonstration — pedOne","title":"pedOne is a loadable version of a pedigree file fragment used for testing and demonstration — pedOne","text":"used testing demonstration.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedOne is a loadable version of a pedigree file fragment used for testing and demonstration — pedOne","text":"","code":"pedOne"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedOne.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedOne is a loadable version of a pedigree file fragment used for testing and demonstration — pedOne","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedOne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pedOne is a loadable version of a pedigree file fragment used for testing and demonstration — pedOne","text":"","code":"library(nprcgenekeepr) data(\"pedOne\") head(pedOne) #>   ego_id si re dam_id sex birth_date #> 1     s1  <NA>   <NA>   F 2000-07-18 #> 2     d1  <NA>   <NA>   M 2003-04-13 #> 3     s2  <NA>   <NA>   M 2006-06-19 #> 4     d2  <NA>   <NA>   F 2015-09-16 #> 5     o1    s1     d1   F 2015-02-04 #> 6     o2    s1     d2   F 2009-03-17"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSameMaleIsSireAndDam.html","id":null,"dir":"Reference","previous_headings":"","what":"pedSameMaleIsSireAndDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedSameMaleIsSireAndDam","title":"pedSameMaleIsSireAndDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedSameMaleIsSireAndDam","text":"one six pedigrees (pedDuplicateIds, pedFemaleSireMaleDam, pedgood, pedInvalidDates, pedMissingBirth, pedSameMaleIsSireAndDam) used demonstrate error detection qcStudbook function.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSameMaleIsSireAndDam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedSameMaleIsSireAndDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedSameMaleIsSireAndDam","text":"","code":"pedSameMaleIsSireAndDam"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSameMaleIsSireAndDam.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedSameMaleIsSireAndDam is a dataframe with 8 rows and 5 columns (ego_id, sire, dam_id, sex, birth_date) representing a full pedigree with no errors. — pedSameMaleIsSireAndDam","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSix.html","id":null,"dir":"Reference","previous_headings":"","what":"pedSix is a loadable version of a pedigree file fragment used for testing and demonstration — pedSix","title":"pedSix is a loadable version of a pedigree file fragment used for testing and demonstration — pedSix","text":"used testing demonstration.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedSix is a loadable version of a pedigree file fragment used for testing and demonstration — pedSix","text":"","code":"pedSix"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedSix is a loadable version of a pedigree file fragment used for testing and demonstration — pedSix","text":"object class data.frame 8 rows 7 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedSix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pedSix is a loadable version of a pedigree file fragment used for testing and demonstration — pedSix","text":"","code":"library(nprcgenekeepr) data(\"pedSix\") head(pedSix) #>   Ego Id Sire Id  Dam Sex Birth Date  Departure      Death #> 1     s1    <NA> <NA>   F 1983-05-10 2009-08-02 2012-07-24 #> 2     d1      s0   d0   F 1983-10-01 2003-08-18 2003-06-10 #> 3     s2      s4   d4   M 1980-11-17 2006-08-12 2006-08-12 #> 4     d2    <NA> <NA>   F 1992-03-26 2000-02-25 2003-08-18 #> 5     o1      s1   d1   F 2003-10-24 2003-06-10 2009-08-02 #> 6     o2      s1   d2   F 2000-05-27 2003-06-08 2003-05-22"},{"path":[]},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedWithGenotype is a dataframe produced from qcPed by adding made up genotypes. — pedWithGenotype","text":"","code":"pedWithGenotype"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotype.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedWithGenotype is a dataframe produced from qcPed by adding made up genotypes. — pedWithGenotype","text":"object class data.frame 280 rows 12 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotypeReport.html","id":null,"dir":"Reference","previous_headings":"","what":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","title":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","text":"pedWithGenotypeReport list containing output reportGV.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotypeReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","text":"","code":"pedWithGenotypeReport"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotypeReport.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","text":"object class list (inherits GVnprcmanag) length 8.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotypeReport.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","text":"pedWithGenotypeReport made pedWithGenotype input reportGV 10,000 iterations. pedWithGenotypeReport simple example report use examples unit tests. created using following commands. set_seed(10) pedWithGenotypeReport <- reportGV(nprcgenekeepr::pedWithGenotype, guIter = 10000) save(pedWithGenotypeReport, file = \"data/pedWithGenotypeReport.RData\")","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/pedWithGenotypeReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pedWithGenotypeReport is a list containing the output of reportGV. — pedWithGenotypeReport","text":"","code":"pedWithGenotypeReport <- nprcgenekeepr::pedWithGenotypeReport"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","title":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","text":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","text":"","code":"# S3 method for class 'summary.nprcgenekeeprErr' print(x, ...)  # S3 method for class 'summary.nprcgenekeeprGV' print(x, ...)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","text":"x object class summary.nprcgenekeeprErr class list ... additional arguments summary.default statement","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","text":"object send generic print function object send generic print function","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.summary.nprcgenekeepr print.summary.nprcgenekeeprGV — print.summary.nprcgenekeeprErr","text":"","code":"library(nprcgenekeepr) errorLst <- qcStudbook(nprcgenekeepr::pedInvalidDates,   reportChanges = TRUE, reportErrors = TRUE ) summary(errorLst) #> Error: There are 2 rows having an invalid date. The rows having an invalid date are: 3 and 4. #>  #> Please check and correct the pedigree file. #>   library(nprcgenekeepr) ped <- nprcgenekeepr::pedGood ped <- suppressWarnings(qcStudbook(ped, reportErrors = FALSE)) summary(reportGV(ped, guIter = 10)) #> The genetic value report  #> Individuals in Pedigree: 8  #> Male Founders: 2 #> Female Founders: 2 #> Total Founders: 4  #> Founder Equivalents: 3.56  #> Founder Genome Equivalents: 2.67  #> Live Offspring: 8  #> High Value Individuals: 5  #> Low Value Individuals: 3"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcBreeders.html","id":null,"dir":"Reference","previous_headings":"","what":"qcBreeders is a list of 29 baboon IDs that are potential breeders — qcBreeders","title":"qcBreeders is a list of 29 baboon IDs that are potential breeders — qcBreeders","text":"qcBreeders list 29 baboon IDs potential breeders","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcBreeders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qcBreeders is a list of 29 baboon IDs that are potential breeders — qcBreeders","text":"","code":"qcBreeders"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcBreeders.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"qcBreeders is a list of 29 baboon IDs that are potential breeders — qcBreeders","text":"object class character length 29.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcBreeders.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"qcBreeders is a list of 29 baboon IDs that are potential breeders — qcBreeders","text":"qcBreeders list 3 males 26 females qcPed data set.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPed.html","id":null,"dir":"Reference","previous_headings":"","what":"qcPed is a dataframe with 277 rows and 6 columns — qcPed","title":"qcPed is a dataframe with 277 rows and 6 columns — qcPed","text":"id character column animal IDs sire male parent animal indicated id column. dam female parent animal indicated id column. sex sex animal indicated id column. gen generation number (integers beginning 0 founder generation) animal indicated id column. birth birth date Date format animal indicated id column. exit exit date Date format animal indicated id column. age age year (numeric) animal indicated id column.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qcPed is a dataframe with 277 rows and 6 columns — qcPed","text":"","code":"qcPed"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"qcPed is a dataframe with 277 rows and 6 columns — qcPed","text":"object class data.frame 280 rows 8 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPedGvReport.html","id":null,"dir":"Reference","previous_headings":"","what":"qcPedGvReport is a genetic value report — qcPedGvReport","title":"qcPedGvReport is a genetic value report — qcPedGvReport","text":"qcPedGvReport genetic value report illustrative purposes . used examples unit tests nprcgenekeepr package. created using following commands. set_seed(10) qcPedGvReport <- reportGV(nprcgenekeepr::qcPed, guIter = 10000) save(qcPedGvReport, file = \"data/qcPedGvReport.RData\")","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPedGvReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qcPedGvReport is a genetic value report — qcPedGvReport","text":"","code":"qcPedGvReport"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPedGvReport.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"qcPedGvReport is a genetic value report — qcPedGvReport","text":"object class list (inherits GVnprcmanag) length 8.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcPedGvReport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"qcPedGvReport is a genetic value report — qcPedGvReport","text":"","code":"qcPedGvReport <- nprcgenekeepr::qcPedGvReport"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcStudbook.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Control for the Studbook or pedigree — qcStudbook","title":"Quality Control for the Studbook or pedigree — qcStudbook","text":"Main pedigree curation function performs basic quality control pedigree information","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcStudbook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Control for the Studbook or pedigree — qcStudbook","text":"","code":"qcStudbook(sb, minParentAge = 2, reportChanges = FALSE, reportErrors = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcStudbook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Control for the Studbook or pedigree — qcStudbook","text":"sb dataframe containing table pedigree demographic information. function recognizes following columns (optional columns used present, required): {id} {— Character vector Unique identifier individuals} {sire} {— Character vector unique identifier father current id} {dam} {— Character vector unique identifier mother current id} {sex} {— Factor {levels: \"M\", \"F\", \"U\"} Sex specifier individual} {birth} {— Date NA (optional) individual's birth date} {departure} {— Date NA (optional) individual sold shipped colony} {death} {— date NA (optional) Date death, applicable} {status} {— Factor {levels: ALIVE, DEAD, SHIPPED} (optional) Status individual} {origin} {— Character NA (optional) Facility individual originated , ONPRC} {ancestry} {— Character NA (optional) Geographic population individual belongs} {spf} {— Character NA (optional) Specific pathogen-free status individual} {vasxOvx} {— Character NA (optional) Indicator vasectomy/ovariectomy status animal; NA animal intact, assume values indicate surgical alteration} {condition} {— Character NA (optional) Indicator restricted status animal. \"Nonrestricted\" animals generally assumed naive.} minParentAge numeric values set minimum age years animal offspring. Defaults 2 years. check performed animals missing birth dates. reportChanges logical value TRUE, errorLst contains list changes made column names. Default FALSE. reportErrors logical value TRUE scan entire file report back changes made input errors list list sublist type change error found. Changes include column names, case categorical values (male, female, unknown), etc. Errors include missing columns, invalid date rows, male dams, female sires, records one parents  minimum age parents. following changes made cols. {Column cols converted lower case} {Periods (\".\") within column cols collapsed space \"\"} {egoid converted id} {sireid convert sire} {damid converted dam} dataframe (sb contain five required columns (id, sire, dam, sex), birth function throws error calling stop(). id field string UNKNOWN (case) fields sire dam NA UNKNOWN (case), record removed. either fields sire dam string UNKNOWN (case), replaced unique identifier form Unnnn, nnnn represents one series sequential integers representing number missing sires dams right justified pattern 0000. See addUIds function. function addParents used add records parents missing record pedigree. function convertSexCodes used ignoreHerm == TRUE convert sex codes according following factors standardized codes: {F} {– replacing \"FEMALE\" \"2\"} {M} {– replacing \"MALE\" \"1\"} {H} {– replacing \"HERMAPHRODITE\" \"4\", ignore.herm == FALSE} {U} {– replacing \"HERMAPHRODITE\" \"4\", ignore.herm == TRUE} {U} {– replacing \"UNKNOWN\" \"3\"} function correctParentSex used ensure parent sire dam. error detected, function throws error halts program. function convertStatusCodes converts status indicators following factors standardized codes. Case original status value ignored. {\"ALIVE\"} {— replacing \"alive\", \"\" \"1\"} {\"DECEASED\"} {— replacing \"deceased\", \"DEAD\", \"D\", \"2\"} {\"SHIPPED\"} {— replacing \"shipped\", \"sold\", \"sale\", \"s\", \"3\"} {\"UNKNOWN\"} {— replacing .na(status)} {\"UNKNOWN\"} {— replacing \"unknown\", \"U\", \"4\"} function convertAncestry coverts ancestry indicators using regular expressions following conversions made character strings match selected substrings following factors. {\"INDIAN\"} {— replacing \"ind\" \"chin\"} {\"CHINESE\"} {— replacing \"chin\" \"ind\"} {\"HYBRID\"} {— replacing \"hyb\" \"chin\" \"ind\"} {\"JAPANESE\"} {— replacing \"jap\"} {\"UNKNOWN\"} {— replacing NA} {\"\"} {— replacing matching } function convertDate converts character representations dates columns birth, death, departure, exit dates using .Date function. function setExit uses heuristics columns death departure set exit already defined. function calcAge uses birth exit columns define age column. numerical values rounded nearest 0.1 year. exit defined, current system date (Sys.Date()) used. function findGeneration used define generation number animal pedigree. function removeDuplicates checks duplicated records removes duplicates. also throws error stops program ID appears one record one columns difference. Columns used subsequently removed rows ordered generation number ID. Finally columns id sire, dam coerce character.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcStudbook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Control for the Studbook or pedigree — qcStudbook","text":"data.frame standardized quality controlled pedigree information.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/qcStudbook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Control for the Studbook or pedigree — qcStudbook","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree ped <- qcStudbook(examplePedigree,   minParentAge = 2.0, reportChanges = FALSE,   reportErrors = FALSE ) names(ped) #>  [1] \"id\"           \"sire\"         \"dam\"          \"sex\"          \"gen\"          #>  [6] \"birth\"        \"exit\"         \"age\"          \"ancestry\"     \"origin\"       #> [11] \"status\"       \"recordStatus\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rankSubjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranks animals based on genetic value. — rankSubjects","title":"Ranks animals based on genetic value. — rankSubjects","text":"Part Genetic Value Analysis Adds column rpt containing integers 1 nrow, provides value designation animal \"high value\" \"low value\"","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rankSubjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranks animals based on genetic value. — rankSubjects","text":"","code":"rankSubjects(rpt)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rankSubjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranks animals based on genetic value. — rankSubjects","text":"rpt list data.frame (req. colnames: value) containing genetic value data population. Dataframes separate animals imports, high genome uniqueness (gu > 10%), low mean kinship (mk < 0.25), remainder.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rankSubjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranks animals based on genetic value. — rankSubjects","text":"list dataframes value ranking information added.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rankSubjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ranks animals based on genetic value. — rankSubjects","text":"","code":"library(nprcgenekeepr) finalRpt <- nprcgenekeepr::finalRpt rpt <- rankSubjects(nprcgenekeepr::finalRpt) rpt[[\"highGu\"]][1, \"value\"] #> [1] \"High Value\" rpt[[\"highGu\"]][1, \"rank\"] #> [1] 1 rpt[[\"lowMk\"]][1, \"value\"] #> [1] \"High Value\" rpt[[\"lowMk\"]][1, \"rank\"] #> [1] 122 rpt[[\"lowVal\"]][1, \"value\"] #> [1] \"Low Value\" rpt[[\"lowVal\"]][1, \"rank\"] #> [1] 190"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeAutoGenIds.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove automatically generated IDs from pedigree — removeAutoGenIds","title":"Remove automatically generated IDs from pedigree — removeAutoGenIds","text":"Currently uses leading \"U\" identify automatically generated IDs. TODO change identification automatically generated IDs looking initial \"U\" beginning ID function call actual ID start \"U\" possible.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeAutoGenIds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove automatically generated IDs from pedigree — removeAutoGenIds","text":"","code":"removeAutoGenIds(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeAutoGenIds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove automatically generated IDs from pedigree — removeAutoGenIds","text":"ped datatable Pedigree. contains pedigree information. id, sire, dame columns required.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeAutoGenIds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove automatically generated IDs from pedigree — removeAutoGenIds","text":"pedigree automatically generated IDs removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeAutoGenIds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove automatically generated IDs from pedigree — removeAutoGenIds","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree length(examplePedigree$id) #> [1] 3694 ped <- removeAutoGenIds(examplePedigree) length(ped$id) #> [1] 2322"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicate records from pedigree — removeDuplicates","title":"Remove duplicate records from pedigree — removeDuplicates","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicate records from pedigree — removeDuplicates","text":"","code":"removeDuplicates(ped, reportErrors = FALSE)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicate records from pedigree — removeDuplicates","text":"ped dataframe Pedigree. contains pedigree information. id column required. reportErrors logical value TRUE scan entire file make list errors found. errors returned list list sublist type error found.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicate records from pedigree — removeDuplicates","text":"Pedigree object duplicates removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove duplicate records from pedigree — removeDuplicates","text":"Returns updated dataframe duplicate rows removed. Returns error table duplicate IDs differing data.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeDuplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicate records from pedigree — removeDuplicates","text":"","code":"ped <- nprcgenekeepr::smallPed newPed <- cbind(ped, recordStatus = rep(\"original\", nrow(ped))) ped1 <- removeDuplicates(newPed) nrow(newPed) #> [1] 17 nrow(ped1) #> [1] 17 pedWithDups <- rbind(newPed, newPed[1:3, ]) ped2 <- removeDuplicates(pedWithDups) nrow(pedWithDups) #> [1] 20 nrow(ped2) #> [1] 17"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":null,"dir":"Reference","previous_headings":"","what":"removeEarlyDates removes dates before a specified year — removeEarlyDates","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"Dates specified year set NA. often used dates formed malformed character representations date %m-%d-%Y format read %Y-%m-%d format","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"","code":"removeEarlyDates(dates, firstYear)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"dates vector dates firstYear integer value first (earliest) year allowed date range.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"vector dates year indicated numeric value firstYear.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"NA values ignored changed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeEarlyDates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"removeEarlyDates removes dates before a specified year — removeEarlyDates","text":"","code":"dates <- structure(c(   12361, 14400, 15413, NA, 11189, NA, 13224, 10971,   -432000, 13262 ), class = \"Date\") cleanedDates <- removeEarlyDates(dates, firstYear = 1000) dates #>  [1] \"2003-11-05\" \"2009-06-05\" \"2012-03-14\" NA           \"2000-08-20\" #>  [6] NA           \"2006-03-17\" \"2000-01-15\" \"787-03-24\"  \"2006-04-24\" cleanedDates #>  [1] \"2003-11-05\" \"2009-06-05\" \"2012-03-14\" NA           \"2000-08-20\" #>  [6] NA           \"2006-03-17\" \"2000-01-15\" NA           \"2006-04-24\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removePotentialSires.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes potential sires from list of Ids — removePotentialSires","title":"Removes potential sires from list of Ids — removePotentialSires","text":"Removes potential sires list Ids","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removePotentialSires.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes potential sires from list of Ids — removePotentialSires","text":"","code":"removePotentialSires(ids, minAge, ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removePotentialSires.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes potential sires from list of Ids — removePotentialSires","text":"ids character vector IDs animals minAge integer value indicating minimum age consider group formation. Pairwise kinships involving animal age younger ignored. Default 1 year. ped dataframe Pedigree. contains pedigree information including IDs listed candidates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removePotentialSires.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes potential sires from list of Ids — removePotentialSires","text":"character vector Ids potential sire Ids removed.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removePotentialSires.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes potential sires from list of Ids — removePotentialSires","text":"","code":"library(nprcgenekeepr) qcBreeders <- nprcgenekeepr::qcBreeders pedWithGenotype <- nprcgenekeepr::pedWithGenotype noSires <- removePotentialSires(   ids = qcBreeders, minAge = 2,   ped = pedWithGenotype ) sires <- getPotentialSires(qcBreeders, ped = pedWithGenotype, minAge = 2) pedWithGenotype[pedWithGenotype$id %in% noSires, c(\"sex\", \"age\")] #>     sex  age #> 161   F 14.3 #> 197   F  3.3 #> 178   F  6.0 #> 186   F  4.4 #> 188   F  4.4 #> 191   F  4.4 #> 195   F  3.8 #> 174   F  7.0 #> 175   F  6.4 #> 176   F  6.3 #> 177   F  6.1 #> 179   F  6.0 #> 180   F  6.0 #> 182   F  5.9 #> 184   F  5.2 #> 185   F  4.4 #> 187   F  4.4 #> 189   F  4.3 #> 190   F  4.4 #> 192   F  4.2 #> 193   F  4.1 #> 194   F  3.8 #> 198   F  3.1 #> 181   F  6.1 #> 183   F  5.4 #> 196   F  3.7 pedWithGenotype[pedWithGenotype$id %in% sires, c(\"sex\", \"age\")] #>     sex  age #> 52    M 18.4 #> 165   M 13.4 #> 169   M 12.2"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUninformativeFounders.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove uninformative founders. — removeUninformativeFounders","title":"Remove uninformative founders. — removeUninformativeFounders","text":"Founders (unknown sire dam) appear one time pedigree uninformative can removed pedigree without loss information.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUninformativeFounders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove uninformative founders. — removeUninformativeFounders","text":"","code":"removeUninformativeFounders(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUninformativeFounders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove uninformative founders. — removeUninformativeFounders","text":"ped datatable Pedigree. contains pedigree information. fields sire dam required.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUninformativeFounders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove uninformative founders. — removeUninformativeFounders","text":"reduced pedigree.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUninformativeFounders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove uninformative founders. — removeUninformativeFounders","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) probands <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- getProbandPedigree(probands, breederPed) nrow(ped) #> [1] 704 p <- removeUninformativeFounders(ped) nrow(p) #> [1] 509 p <- addBackSecondParents(p, ped) nrow(p) #> [1] 690"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUnknownAnimals.html","id":null,"dir":"Reference","previous_headings":"","what":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","title":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","text":"removeUnknownAnimals Removes unknown animals added pedigree serve placeholders unknown parents.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUnknownAnimals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","text":"","code":"removeUnknownAnimals(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUnknownAnimals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","text":"ped pedigree dataframe","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUnknownAnimals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","text":"Pedigree unknown animals removed","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/removeUnknownAnimals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"removeUnknownAnimals Removes unknown animals added to pedigree that serve as placeholders for unknown parents. — removeUnknownAnimals","text":"","code":"library(nprcgenekeepr) ped <- nprcgenekeepr::smallPed addedPed <- cbind(ped,   recordStatus = rep(\"original\", nrow(ped)),   stringsAsFactors = FALSE ) addedPed[1:3, \"recordStatus\"] <- \"added\" ped2 <- removeUnknownAnimals(addedPed) nrow(ped) #> [1] 17 nrow(ped2) #> [1] 14"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/reportGV.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a genetic value report for a provided pedigree. — reportGV","title":"Generates a genetic value report for a provided pedigree. — reportGV","text":"main function Genetic Value Analysis.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/reportGV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a genetic value report for a provided pedigree. — reportGV","text":"","code":"reportGV(   ped,   guIter = 5000L,   guThresh = 1L,   pop = NULL,   byID = TRUE,   updateProgress = NULL )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/reportGV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a genetic value report for a provided pedigree. — reportGV","text":"ped pedigree information data.frame format guIter Integer indicating number iterations gene-drop analysis. Default 5000 iterations guThresh Integer indicating threshold number animals defining unique allele. Default considers allele \"unique\" found 1 animal. pop Character vector animal IDs consider population interest. default NULL. byID Logical variable length 1 passed eventually used alleleFreq(), calculates count allele provided vector. byID TRUE ids provided, function count unique alleles individual (homozygous alleles counted 1). updateProgress Function NULL. function defined, called iteration update shiny::Progress object.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/reportGV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a genetic value report for a provided pedigree. — reportGV","text":"dataframe genetic value report. Animals ranked order descending value.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/reportGV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a genetic value report for a provided pedigree. — reportGV","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) probands <- ped$id[ped$population] ped <- trimPedigree(probands, ped,   removeUninformative = FALSE,   addBackParents = FALSE ) geneticValue <- reportGV(ped,   guIter = 50, # should be >= 1000   guThresh = 3,   byID = TRUE,   updateProgress = NULL ) trimmedGeneticValue <- reportGV(trimmedPed,   guIter = 50, # should be >= 1000   guThresh = 3,   byID = TRUE,   updateProgress = NULL ) rpt <- trimmedGeneticValue[[\"report\"]] kmat <- trimmedGeneticValue[[\"kinship\"]] f <- trimmedGeneticValue[[\"total\"]] mf <- trimmedGeneticValue[[\"maleFounders\"]] ff <- trimmedGeneticValue[[\"femaleFounders\"]] nmf <- trimmedGeneticValue[[\"nMaleFounders\"]] nff <- trimmedGeneticValue[[\"nFemaleFounders\"]] fe <- trimmedGeneticValue[[\"fe\"]] fg <- trimmedGeneticValue[[\"fg\"]]"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusGenotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","title":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","text":" object.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusGenotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","text":"","code":"rhesusGenotypes"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusGenotypes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","text":"object class data.frame 31 rows 3 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusGenotypes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","text":"Represents 31 animals also obfuscated rhesusPedigree pedigree rhesusGenotypes.csv. id – character column animal IDs first_name – generic name first haplotype second_name – generic name second haplotype","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusGenotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rhesusGenotypes is a dataframe with two haplotypes per animal — rhesusGenotypes","text":"","code":"library(nprcgenekeepr) data(\"rhesusGenotypes\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"rhesusPedigree is a pedigree object — rhesusPedigree","title":"rhesusPedigree is a pedigree object — rhesusPedigree","text":"Represents obfuscated pedigree rhesusPedigree.csv IDs dates modified de-identify data. id – character column animal IDs sire – male parent animal indicated id column. Unknown sires indicated NA dam – female parent animal indicated id column.Unknown dams indicated NA sex – factor levels: \"M\", \"F\", \"U\". Sex specifier individual. gen – generation number (integers beginning 0 founder generation) animal indicated id column. birth – Date vector birth dates exit – Date vector exit dates age – numerical vector age years","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rhesusPedigree is a pedigree object — rhesusPedigree","text":"","code":"rhesusPedigree"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusPedigree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rhesusPedigree is a pedigree object — rhesusPedigree","text":"object class data.frame 375 rows 8 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/rhesusPedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rhesusPedigree is a pedigree object — rhesusPedigree","text":"","code":"library(nprcgenekeepr) data(\"rhesusPedigree\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/runGeneKeepR.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows running shiny application with nprcgenekeepr::runGeneKeepR() — runGeneKeepR","title":"Allows running shiny application with nprcgenekeepr::runGeneKeepR() — runGeneKeepR","text":"Allows running shiny application nprcgenekeepr::runGeneKeepR()","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/runGeneKeepR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows running shiny application with nprcgenekeepr::runGeneKeepR() — runGeneKeepR","text":"","code":"runGeneKeepR()"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/runGeneKeepR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allows running shiny application with nprcgenekeepr::runGeneKeepR() — runGeneKeepR","text":"Returns error condition Shiny application terminates.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/runGeneKeepR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allows running shiny application with nprcgenekeepr::runGeneKeepR() — runGeneKeepR","text":"","code":"if (interactive()) {   library(nprcgenekeepr)   runGeneKeepR() }"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/saveDataframesAsFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Write copy of dataframes to either CSV, TXT, or Excel file. — saveDataframesAsFiles","title":"Write copy of dataframes to either CSV, TXT, or Excel file. — saveDataframesAsFiles","text":"Takes list dataframes creates file based list name dataframe extension file type.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/saveDataframesAsFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write copy of dataframes to either CSV, TXT, or Excel file. — saveDataframesAsFiles","text":"","code":"saveDataframesAsFiles(dfList, baseDir, fileType = \"csv\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/saveDataframesAsFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write copy of dataframes to either CSV, TXT, or Excel file. — saveDataframesAsFiles","text":"dfList list dataframes stored files. \"txt\", \"csv\", \"xlsx\". Default value \"csv\". baseDir character vector length directory path. fileType character vector length one possible values \"txt\", \"csv\", \"xlsx\". Default value \"csv\".","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/saveDataframesAsFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write copy of dataframes to either CSV, TXT, or Excel file. — saveDataframesAsFiles","text":"Full path name files saved.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setExit.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the exit date, if there is no exit column in the table — setExit","title":"Sets the exit date, if there is no exit column in the table — setExit","text":"Part Pedigree Curation","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setExit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the exit date, if there is no exit column in the table — setExit","text":"","code":"setExit(ped, timeOrigin = as.Date(\"1970-01-01\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setExit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the exit date, if there is no exit column in the table — setExit","text":"ped dataframe pedigree demographic information potentially containing columns indicating birth death dates individual. table may also contain dates sale (departure). Optional columns birth, death, departure. timeOrigin date object used .Date set origin.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setExit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the exit date, if there is no exit column in the table — setExit","text":"dataframe updated pedigree exit dates specified based date information available.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setExit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the exit date, if there is no exit column in the table — setExit","text":"","code":"library(lubridate) library(nprcgenekeepr) death <- mdy(paste0(   sample(1:12, 10, replace = TRUE), \"-\",   sample(1:28, 10, replace = TRUE), \"-\",   sample(seq(0, 15, by = 3), 10, replace = TRUE) + 2000 )) departure <- as.Date(rep(NA, 10), origin = as.Date(\"1970-01-01\")) departure[c(1, 3, 6)] <- as.Date(death[c(1, 3, 6)],   origin = as.Date(\"1970-01-01\") ) death[c(1, 3, 5)] <- NA death[6] <- death[6] + days(1) ped <- data.frame(   id = paste0(100 + 1:10),   birth = mdy(paste0(     sample(1:12, 10, replace = TRUE), \"-\",     sample(1:28, 10, replace = TRUE), \"-\",     sample(seq(0, 20, by = 3), 10, replace = TRUE) + 1980   )),   death = death,   departure = departure,   stringsAsFactors = FALSE ) pedWithExit <- setExit(ped)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setPopulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Population designation function — setPopulation","title":"Population designation function — setPopulation","text":"Part pedigree filtering toolset.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setPopulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population designation function — setPopulation","text":"","code":"setPopulation(ped, ids)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setPopulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population designation function — setPopulation","text":"ped datatable Pedigree. contains pedigree information. id column required. ids character vector IDs flagged part population consideration.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setPopulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population designation function — setPopulation","text":"updated pedigree population column added updated set TRUE animal IDs ped$id FALSE otherwise.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/setPopulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population designation function — setPopulation","text":"","code":"examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] breederPed <- setPopulation(ped = breederPed, ids = focalAnimals) nrow(breederPed[breederPed$population, ]) #> [1] 327"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Work around for unit tests using sample() among various versions of R — set_seed","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"change set.seed works R 3.6 prompted creation R version agnostic replacement get unit test code work multiple versions R CICD test build.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"","code":"set_seed(seed = 1L)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"seed argument set.seed","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"NULL, invisibly.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"seems RNGkind(sample.kind=\"Rounding\") work prior version 3.6 resorted using version dependent construction argument list set.seed() .call().#'","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/set_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work around for unit tests using sample() among various versions of R — set_seed","text":"","code":"set_seed(1) rnorm(5) #> [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPed.html","id":null,"dir":"Reference","previous_headings":"","what":"smallPed is a hypothetical pedigree — smallPed","title":"smallPed is a hypothetical pedigree — smallPed","text":"following structure: structure(list(id = c(\"\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"), sire = c(\"Q\", NA, \"\", \"\", NA, \"D\", \"D\", \"\", \"\", NA, NA, \"C\", \"\", NA, NA, \"M\", NA), dam = c(NA, NA, \"B\", \"B\", NA, \"E\", \"E\", \"B\", \"J\", NA, NA, \"K\", \"N\", NA, NA, \"O\", NA), sex = c(\"M\", \"F\", \"M\", \"M\", \"F\", \"F\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"M\", \"F\", \"F\", \"F\", \"M\"), gen = c(1, 1, 2, 2, 1, 3, 3, 2, 2, 1, 1, 2, 1, 1, 2, 3, 0), population = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)), .Names = c(\"id\", \"sire\", \"dam\", \"sex\", \"gen\", \"population\"), row.names = c(NA, -17L), class = \"data.frame\")","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"smallPed is a hypothetical pedigree — smallPed","text":"","code":"smallPed"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPed.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"smallPed is a hypothetical pedigree — smallPed","text":"object class data.frame 17 rows 6 columns.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPedTree.html","id":null,"dir":"Reference","previous_headings":"","what":"smallPedTree is a pedigree tree made from smallPed — smallPedTree","title":"smallPedTree is a pedigree tree made from smallPed — smallPedTree","text":"Access using following commands.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPedTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"smallPedTree is a pedigree tree made from smallPed — smallPedTree","text":"","code":"smallPedTree"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPedTree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"smallPedTree is a pedigree tree made from smallPed — smallPedTree","text":"object class list length 17.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/smallPedTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"smallPedTree is a pedigree tree made from smallPed — smallPedTree","text":"","code":"library(nprcgenekeepr) data(\"smallPedTree\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summarizeKinshipValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for imputed kinship values — summarizeKinshipValues","title":"Summary statistics for imputed kinship values — summarizeKinshipValues","text":"Makes data.frame object containing simulated kinship summary statistics using counts kinship values list countKinshipValues.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summarizeKinshipValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for imputed kinship values — summarizeKinshipValues","text":"","code":"summarizeKinshipValues(countedKValues)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summarizeKinshipValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for imputed kinship values — summarizeKinshipValues","text":"countedKValues list object countKinshipValues function containes lists kinshipIds, kinshipValues, kinshipCounts.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summarizeKinshipValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary statistics for imputed kinship values — summarizeKinshipValues","text":"data.frame one row summary statistics imputed kinship value. columns follows: id_1, id_2, min, secondQuartile, mean, median, thirdQuartile, max, sd.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summarizeKinshipValues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics for imputed kinship values — summarizeKinshipValues","text":"","code":"ped <- nprcgenekeepr::smallPed simParent_1 <- list(   id = \"A\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_2 <- list(   id = \"B\",   sires = c(\"s1_1\", \"s1_2\", \"s1_3\"),   dams = c(\"d1_1\", \"d1_2\", \"d1_3\", \"d1_4\") ) simParent_3 <- list(   id = \"E\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_4 <- list(   id = \"J\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_5 <- list(   id = \"K\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) simParent_6 <- list(   id = \"N\",   sires = c(\"A\", \"C\", \"s1_1\"),   dams = c(\"d3_1\", \"B\") ) allSimParents <- list(   simParent_1, simParent_2, simParent_3,   simParent_4, simParent_5, simParent_6 )  extractKinship <- function(simKinships, id1, id2, simulation) {   ids <- dimnames(simKinships[[simulation]])[[1]]   simKinships[[simulation]][     seq_along(ids)[ids == id1],     seq_along(ids)[ids == id2]   ] }  extractKValue <- function(kValue, id1, id2, simulation) {   kValue[     kValue$id_1 == id1 & kValue$id_2 == id2,     paste0(\"sim_\", simulation)   ] }  n <- 10 simKinships <- createSimKinships(ped, allSimParents, pop = ped$id, n = n) kValues <- kinshipMatricesToKValues(simKinships) extractKValue(kValues, id1 = \"A\", id2 = \"F\", simulation = 1:n) #>  [1] \"sim_1\"  \"sim_2\"  \"sim_3\"  \"sim_4\"  \"sim_5\"  \"sim_6\"  \"sim_7\"  \"sim_8\"  #>  [9] \"sim_9\"  \"sim_10\" counts <- countKinshipValues(kValues) stats <- summarizeKinshipValues(counts)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","title":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","text":"summary.nprcgenekeeprErr Summary function class nprcgenekeeprErr","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","text":"","code":"# S3 method for class 'nprcgenekeeprErr' summary(object, ...)  # S3 method for class 'nprcgenekeeprGV' summary(object, ...)"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","text":"object object class nprcgenekeeprErr class list ... additional arguments summary.default statement","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","text":"Object class summary.nprcgenekeeprErr object class summary.nprcgenekeeprGV","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary.nprcgenekeeprErr Summary function for class nprcgenekeeprErr — summary.nprcgenekeeprErr","text":"","code":"errorList <- qcStudbook(nprcgenekeepr::pedOne,   minParentAge = 0,   reportChanges = TRUE,   reportErrors = TRUE ) summary(errorList) #> Error: The animal listed as a sire and also listed as a female is: s1. #> Error: The animal listed as a dam and also listed as a male is: d1. #> Change: The column where space was removed is: si re to sire. #> Change: The columns where underscore was removed are: ego_id, dam_id, and birth_date to egoid, damid, and birthdate. #> Change: The column changed from: egoid to id. #> Change: The column changed from: damid to dam. #> Change: The column changed from: birthdate to birth. #>  #> Please check and correct the pedigree file. #>   #> Animal records where parent records are suspicous because of dates. #> One or more parents appear too young at time of birth. #>   dam sire id sex      birth recordStatus exit  sireBirth   damBirth sireAge #> 2  d2   s1 o2   F 2009-03-17     original <NA> 2000-07-18 2015-09-16    8.66 #> 3  d2   s2 o3   F 2012-04-11     original <NA> 2006-06-19 2015-09-16    5.81 #> 4  d2   s2 o4   M 2006-04-13     original <NA> 2006-06-19 2015-09-16   -0.18 #>   damAge #> 2   -6.5 #> 3   -3.4 #> 4   -9.4 examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2L,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] ped <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) probands <- ped$id[ped$population] ped <- trimPedigree(probands, ped,   removeUninformative = FALSE,   addBackParents = FALSE ) geneticValue <- reportGV(ped,   guIter = 50L, # should be >= 1000L   guThresh = 3L,   byID = TRUE,   updateProgress = NULL ) trimmedGeneticValue <- reportGV(trimmedPed,   guIter = 50L, # should be >= 1000L   guThresh = 3L,   byID = TRUE,   updateProgress = NULL ) summary(geneticValue) #> The genetic value report  #> Individuals in Pedigree: 327  #> Male Founders: 3 #> Female Founders: 17 #> Total Founders: 20  #> Founder Equivalents: 109.67  #> Founder Genome Equivalents: 46.8  #> Live Offspring: 321  #> High Value Individuals: 232  #> Low Value Individuals: 95  summary(trimmedGeneticValue) #> The genetic value report  #> Individuals in Pedigree: 704  #> Male Founders: 3 #> Female Founders: 17 #> Total Founders: 20  #> Founder Equivalents: 116.8  #> Founder Genome Equivalents: 65.8  #> Live Offspring: 1004  #> High Value Individuals: 452  #> Low Value Individuals: 252"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/toCharacter.html","id":null,"dir":"Reference","previous_headings":"","what":"Force dataframe columns to character — toCharacter","title":"Force dataframe columns to character — toCharacter","text":"Converts designated columns dataframe character. Defaults converting columns id, sire, dam.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/toCharacter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force dataframe columns to character — toCharacter","text":"","code":"toCharacter(df, headers = c(\"id\", \"sire\", \"dam\"))"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/toCharacter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force dataframe columns to character — toCharacter","text":"df dataframe first three columns can coerced character. headers character vector columns converted character class. Defaults c(\"id\", \"sire\", \"dam\")/","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/toCharacter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force dataframe columns to character — toCharacter","text":"dataframe specified columns converted class \"character\" display xtables (shiny)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/toCharacter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force dataframe columns to character — toCharacter","text":"","code":"library(nprcgenekeepr) pedGood <- nprcgenekeepr::pedGood names(pedGood) <- c(\"id\", \"sire\", \"dam\", \"sex\", \"birth\") class(pedGood[[\"id\"]]) #> [1] \"factor\" pedGood <- toCharacter(pedGood) class(pedGood[[\"id\"]]) #> [1] \"character\""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/trimPedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","title":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","text":"Filters pedigree ancestors provided group, removing unnecessary individuals studbook. version builds pedigree back time starting group probands, moves back tree trimming uninformative ancestors.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/trimPedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","text":"","code":"trimPedigree(   probands,   ped,   removeUninformative = FALSE,   addBackParents = FALSE )"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/trimPedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","text":"probands character vector list animals whose ancestors included final pedigree. ped datatable Pedigree. contains pedigree information. fields sire dam required. removeUninformative logical defaults FALSE. set TRUE, uninformative founders removed. Founders (unknown sire dam) appear one time pedigree uninformative can removed pedigree without loss information. addBackParents logical defaults FALSE. set TRUE, function adds back single parents p dataframe one parent known. function addBackSecondParents uses ped dataframe, full complement parents p dataframe, uninformative parents removed add back single parents p dataframe.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/trimPedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","text":"pedigree trimmed, uninformative founders removed single parents added back.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/trimPedigree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim pedigree to ancestors of provided group by removing uninformative individuals — trimPedigree","text":"","code":"library(nprcgenekeepr) examplePedigree <- nprcgenekeepr::examplePedigree breederPed <- qcStudbook(examplePedigree,   minParentAge = 2,   reportChanges = FALSE,   reportErrors = FALSE ) focalAnimals <- breederPed$id[!(is.na(breederPed$sire) &   is.na(breederPed$dam)) &   is.na(breederPed$exit)] breederPed <- setPopulation(ped = breederPed, ids = focalAnimals) trimmedPed <- trimPedigree(focalAnimals, breederPed) trimmedPedInformative <- trimPedigree(focalAnimals, breederPed,   removeUninformative = TRUE ) nrow(breederPed) #> [1] 3694 nrow(trimmedPed) #> [1] 704 nrow(trimmedPedInformative) #> [1] 509"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/withinIntegerRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Get integer within a range — withinIntegerRange","title":"Get integer within a range — withinIntegerRange","text":"Assures returned integer within specified range. Real values truncated. Non-numerics forced minimum without warning.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/withinIntegerRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get integer within a range — withinIntegerRange","text":"","code":"withinIntegerRange(int = 0L, minimum = 0L, maximum = 0L, na = \"min\")"},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/withinIntegerRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get integer within a range — withinIntegerRange","text":"int value forced within range minimum minimum integer value. maximum maximum integer value na \"min\" non-numerics forced minimum range \"max\" non-numerics forced maximum range. either \"min\" \"max\" forced \"min\".","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/withinIntegerRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get integer within a range — withinIntegerRange","text":"vector integers forced within specified range.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/reference/withinIntegerRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get integer within a range — withinIntegerRange","text":"","code":"library(nprcgenekeepr) withinIntegerRange() #> [1] 0 withinIntegerRange(, 0, 10) #> [1] 0 withinIntegerRange(NA, 0, 10, na = \"max\") #> [1] 10 withinIntegerRange(, 0, 10, na = \"max\") # no argument is not NA #> [1] 0 withinIntegerRange(LETTERS, 0, 10) #>  [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 withinIntegerRange(2.6, 1, 5) #> [1] 2 withinIntegerRange(2.6, 0, 2) #> [1] 2 withinIntegerRange(c(0, 2.6, -1), 0, 2) #> [1] 0 2 0 withinIntegerRange(c(0, 2.6, -1, NA), 0, 2) #> [1] 0 2 0 0 withinIntegerRange(c(0, 2.6, -1, NA), 0, 2, na = \"max\") #> [1] 0 2 0 2 withinIntegerRange(c(0, 2.6, -1, NA), 0, 2, na = \"min\") #> [1] 0 2 0 0"},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-108-20250723","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.8 (20250723)","title":"nprcgenekeepr 1.0.8 (20250723)","text":"Added returned value descriptions functions formerly missing. Changed unit test get_elapsed_time_str() use mocked version proc.time","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-107-20250506","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.7 (20250506)","title":"nprcgenekeepr 1.0.7 (20250506)","text":"CRAN release: 2025-04-24 Added returned value descriptions functions formerly missing. Removed extraneous spaces DESCRIPTION file. Exposed examples roxygen2 comments removing . example runGeneKeepR() protected (interactive()) {}.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-106-20241215","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.6 (20241215)","title":"nprcgenekeepr 1.0.6 (20241215)","text":"Update version preparation CRAN submission Added article demonstrating Simulated Kinships Partial Parentage lintr pipeline R CMD check pipeline multiple R environments versions pkgdown pipeline Added several unit tests Cleaned code based lintr feedback Added example deidentified pedigree data 2022-05-02_Deidentified_Pedigree.xlsx, 2022-05-02_Deidentified_Pedigree_focal_animals.csv, deidentified_jmac_ped.csv (text, except dates, double quotes), deidentified_jmac_ped_edited.csv (edited remove double quotes). Made getVersion() robust. Abstracted removal auto generated Ids preparation allowing user define auto generated Ids formed. Added quality assurance badges README. Added CRAN status badge README. Stopped using travis-ci started using GitHub Actions Rhub.yaml file checking Rhub.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-1059004-20221213","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.5.9004 (20221213)","title":"nprcgenekeepr 1.0.5.9004 (20221213)","text":"Changed method used test class object use inherits(). Corrected getPedDirectRelative() direct relatives found. Supplemented unit tests direct relative types. Added unit tests trimPedigree().  Technical edits R code based lintr::lint_dir(“R”)","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-1059003-20220625","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.5.9003 (20220625)","title":"nprcgenekeepr 1.0.5.9003 (20220625)","text":"Removed dependency gdata. Removed getMinParentAge never used. Starting replace rbind() rbindlist() data.table possible.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-1059002-20220425","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.5.9002 (20220425)","title":"nprcgenekeepr 1.0.5.9002 (20220425)","text":"Added use data.table effort reduce memory use CPU use estimation kinship values. Functions refactored ability handle larger simulations resulted.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-1059001-20210830","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.5.9001 (20210830)","title":"nprcgenekeepr 1.0.5.9001 (20210830)","text":"Added ability use simulation estimate kinship values animals incomplete parental information known born within colony. animals may 0 1 known parents value pedigree file database fromcenter fromCenter field “Y”, “YES”, “T”, “TRUE”. Increase unit test coverage primarily include rare events events happen trapped result errors. Changed travis-ci.com","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-105-20210328","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.5 (20210328)","title":"nprcgenekeepr 1.0.5 (20210328)","text":"CRAN release: 2021-03-31 Major changes – none CRAN submission primarily response change shiny 1.6 removed internal shiny function (shiny:::%%) replaced rlang::%||% Stale URL historical documentation causing notes generated automated tests removed. URL referring Terry Therneau’s page updated “http” “https”. incremented version 1.0.4 (github.com version) 1.0.5, updated NEWS reflect changes, updated documentation reflect version change.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-1049003-20210318","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.4.9003 (20210318)","title":"nprcgenekeepr 1.0.4.9003 (20210318)","text":"Major changes – none Testing .travis.yml code change get textshaping build systems.. Cleaned .travis.yml response syntax checking travis.org. Added markdown suggest due new changes knitr.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-104-20210318","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.4 (20210318)","title":"nprcgenekeepr 1.0.4 (20210318)","text":"Major changes – none Added suppression warnings DT beginning server.R since unlikely anyone call affected functions controlled environment. Changed call shiny:::%% rlang::%||% server.R since update 1.6 shiny broke code. Thanks Dan Metzger Wisconsin National Primate Research Center.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-103-20200526","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.3 (20200526)","title":"nprcgenekeepr 1.0.3 (20200526)","text":"CRAN release: 2020-06-02 Major changes – none removed capitalization “Genetic Tools Colony Management” “Genetic Value Analysis Reports” within DESCRIPTION. removed conditional installation DT ui.R file. incremented version 1.0.2 1.0.3, updated NEWS reflect changes, updated documentation reflect version change.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-102-20200517","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.2 (20200517)","title":"nprcgenekeepr 1.0.2 (20200517)","text":"Major changes – none changed capitalization Shiny description section DESCRIPTION file name type application used name package. use capitalization consistent capitalization used within documentation shiny package (?shiny, See Details section, first sentence used type tutorial.) documentation tutorials provided author RStudio capitalized everywhere except referring package. runGeneKeepr(), starts Shiny application getFocalAnimalPed(), dependent valid LabKey instance, proper configuration file, .netrc _netrc authentication file. create_wkbk() createPedTree() findLoops() countLoops() 11 examples data.R makeExamplePedigreeFile","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-101-20200510","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0.1 (20200510)","title":"nprcgenekeepr 1.0.1 (20200510)","text":"Major changes – none Reduced time required unit test 12 minutes 21.6 seconds skipping test dependent stochastic creation simulated pedigrees breeding groups running system. Reduced time run examples create vignettes reducing number stochastic modeling iterations orders magnitude without reducing examples provided user-facing functions. Checking (–-cran –run-donttest) Duration: 2m 21.8s system. files Rd-tag missing take arguments. Corrected private referencing (:::) exported functions. Exported functions used examples remove private referencing (:::). Removed single quotes names, abbreviations, initialisms, , acronyms. phrase Electronic Health Records (EHR) name module within LabKey, software can use source pedigree information capitalization appropriate. Two exported functions used server.R call tabpanel() examples.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-10-20200415","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 1.0 (20200415)","title":"nprcgenekeepr 1.0 (20200415)","text":"Major changes – none CRAN submission","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-0543-20200414","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.43 (20200414)","title":"nprcgenekeepr 0.5.43 (20200414)","text":"Major changes – none Final preparation CRAN submission","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429012-20200412","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9012 (20200412)","title":"nprcgenekeepr 0.5.42.9012 (20200412)","text":"Major changes – none Updated unit test dataframe2string account change age sire 8.67 8.66 years. Renamed tutorials.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429011-20200409","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9011 (20200409)","title":"nprcgenekeepr 0.5.42.9011 (20200409)","text":"Major changes – none Build failed Travis-ci due unit test failure test never failed fail builds. Removed set_seed() see helps. Fixed GitHub issue 3 Added additional explanatory text Matt Schultz edits Colony Manager version Shiny tutorial.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429010-20200405","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9010 (20200405)","title":"nprcgenekeepr 0.5.42.9010 (20200405)","text":"Major changes – none Added code address issue 1 (GitHub). See comment 1 details, done. Refreshed Shiny_app_use.Rmd reflect changes since November 2019.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429009-20200402","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9009 (20200402)","title":"nprcgenekeepr 0.5.42.9009 (20200402)","text":"Major changes – none Wrapped example makeExamplePedigreeFile \\dontrun{} R 4.0.0 alpha leaving side effect dataframe stored CSV file named text next line.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429008-20200321","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9008 (20200321)","title":"nprcgenekeepr 0.5.42.9008 (20200321)","text":"Major changes – none Changed dependency R >= 3.6 since caTools available R < 3.6.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429007-20200319","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9007 (20200319)","title":"nprcgenekeepr 0.5.42.9007 (20200319)","text":"Major changes – none Changed warnings unit test getLkDirectAncestors work Windows.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429006-20200319","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9006 (20200319)","title":"nprcgenekeepr 0.5.42.9006 (20200319)","text":"Major changes – none Completed examples function documentation Corrected spelling several word throughout found spelling::spell_check_package(\".\").","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429005-20200201","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9005 (20200201)","title":"nprcgenekeepr 0.5.42.9005 (20200201)","text":"Major changes – none Added examples function documentation Added ColonyManagerTutorial.Rmd initial draft, copy shiny_app_use.Rmd. converted use colony managers.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429004-20200201","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9004 (20200201)","title":"nprcgenekeepr 0.5.42.9004 (20200201)","text":"Major changes – none Added examples function documentation Added obfuscated rhesus pedigree rhesus haplotypes use examples","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429003","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9003","title":"nprcgenekeepr 0.5.42.9003","text":"Major changes – none Renamed local remote repositories nprcmanager nprcgenekeepr.","code":""},{"path":"https://github.com/rmsharp/nprcgenekeepr/news/index.html","id":"nprcgenekeepr-05429002","dir":"Changelog","previous_headings":"","what":"nprcgenekeepr 0.5.42.9002","title":"nprcgenekeepr 0.5.42.9002","text":"Changed name package nprcgenekeepr. required changing many supporting files functions. good unit test coverage functions (739 test > 90 percent coverage) made possible. last version nprcmanager repository name. Running build check OK: 739; Failed: 0; Warnings: 0; Skipped: 0 Minor changes – none","code":""}]
